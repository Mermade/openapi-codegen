--  Swagger Petstore
--  This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
--
--  OpenAPI spec version: 1.0.0
--  Contact: apiteam@swagger.io
--
--  NOTE: This package is auto generated by the swagger code generator 1.5.0.
--  https://github.com/swagger-api/swagger-codegen.git
--  Do not edit the class manually.with Swagger.Streams;
package body IO.OpenAPI.Api.Clients is

   --  Add a new pet to the store
   procedure addPet
      (Client : in out Client_Type;
       body : in IO.OpenAPI.Api.Models.object) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.,
                          Swagger.Clients.));
      Client.Initialize (Req, (Swagger.Clients.));
      Req.Stream.Write_Entity ("body", body);

      URI.Set_Path ("/pet");
      Client.Call (Swagger.Clients.POST, URI, Req);
   end addPet;

   --  Update an existing pet
   procedure updatePet
      (Client : in out Client_Type;
       body : in IO.OpenAPI.Api.Models.object) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.,
                          Swagger.Clients.));
      Client.Initialize (Req, (Swagger.Clients.));
      Req.Stream.Write_Entity ("body", body);

      URI.Set_Path ("/pet");
      Client.Call (Swagger.Clients.PUT, URI, Req);
   end updatePet;

   --  Finds Pets by status
   procedure findPetsByStatus
      (Client : in out Client_Type;
       status : in array;
       Result : out array) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.));

      URI.Add_Param ("status", status);
      URI.Set_Path ("/pet/findByStatus");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      Swagger.Streams.Deserialize (Reply, "", Result);
   end findPetsByStatus;

   --  Finds Pets by tags
   procedure findPetsByTags
      (Client : in out Client_Type;
       tags : in array;
       Result : out array) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.));

      URI.Add_Param ("tags", tags);
      URI.Set_Path ("/pet/findByTags");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      Swagger.Streams.Deserialize (Reply, "", Result);
   end findPetsByTags;

   --  Find pet by ID
   procedure getPetById
      (Client : in out Client_Type;
       petId : in integer;
       Result : out Pet) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.));

      URI.Set_Path ("/pet/{petId}");
      URI.Set_Path_Param ("petId", Swagger.To_String (petId));
      Client.Call (Swagger.Clients.GET, URI, Reply);
      IO.OpenAPI.Api.Models.Deserialize (Reply, "", Result);
   end getPetById;

   --  Updates a pet in the store with form data
   procedure updatePetWithForm
      (Client : in out Client_Type;
       petId : in integer;
       body : in IO.OpenAPI.Api.Models.object) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.,
                          Swagger.Clients.));
      Client.Initialize (Req, (Swagger.Clients.));
      Req.Stream.Write_Entity ("body", body);

      URI.Set_Path ("/pet/{petId}");
      URI.Set_Path_Param ("petId", Swagger.To_String (petId));
      Client.Call (Swagger.Clients.POST, URI, Req);
   end updatePetWithForm;

   --  Deletes a pet
   procedure deletePet
      (Client : in out Client_Type;
       petId : in integer;
       api_key : in string) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.,
                          Swagger.Clients.));

      URI.Set_Path ("/pet/{petId}");
      URI.Set_Path_Param ("petId", Swagger.To_String (petId));
      Client.Call (Swagger.Clients.DELETE, URI);
   end deletePet;

   --  uploads an image
   procedure uploadFile
      (Client : in out Client_Type;
       petId : in integer;
       body : in IO.OpenAPI.Api.Models.string;
       Result : out ApiResponse) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.));
      Client.Initialize (Req, (Swagger.Clients.));
      Req.Stream.Write_Entity ("body", body);

      URI.Set_Path ("/pet/{petId}/uploadImage");
      URI.Set_Path_Param ("petId", Swagger.To_String (petId));
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      IO.OpenAPI.Api.Models.Deserialize (Reply, "", Result);
   end uploadFile;

   --  Returns pet inventories by status
   procedure getInventory
      (Client : in out Client_Type;
       Result : out object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.));

      URI.Set_Path ("/store/inventory");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      Swagger.Streams.Deserialize (Reply, "", Result);
   end getInventory;

   --  Place an order for a pet
   procedure placeOrder
      (Client : in out Client_Type;
       body : in IO.OpenAPI.Api.Models.object;
       Result : out Order) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.));
      Client.Initialize (Req, (Swagger.Clients.));
      Req.Stream.Write_Entity ("body", body);

      URI.Set_Path ("/store/order");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      IO.OpenAPI.Api.Models.Deserialize (Reply, "", Result);
   end placeOrder;

   --  Find purchase order by ID
   procedure getOrderById
      (Client : in out Client_Type;
       orderId : in integer;
       Result : out Order) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.));

      URI.Set_Path ("/store/order/{orderId}");
      URI.Set_Path_Param ("orderId", Swagger.To_String (orderId));
      Client.Call (Swagger.Clients.GET, URI, Reply);
      IO.OpenAPI.Api.Models.Deserialize (Reply, "", Result);
   end getOrderById;

   --  Delete purchase order by ID
   procedure deleteOrder
      (Client : in out Client_Type;
       orderId : in integer) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.,
                          Swagger.Clients.));

      URI.Set_Path ("/store/order/{orderId}");
      URI.Set_Path_Param ("orderId", Swagger.To_String (orderId));
      Client.Call (Swagger.Clients.DELETE, URI);
   end deleteOrder;

   --  Create user
   procedure createUser
      (Client : in out Client_Type;
       body : in IO.OpenAPI.Api.Models.object) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.,
                          Swagger.Clients.));
      Client.Initialize (Req, (Swagger.Clients.));
      Req.Stream.Write_Entity ("body", body);

      URI.Set_Path ("/user");
      Client.Call (Swagger.Clients.POST, URI, Req);
   end createUser;

   --  Creates list of users with given input array
   procedure createUsersWithArrayInput
      (Client : in out Client_Type;
       body : in IO.OpenAPI.Api.Models.array) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.,
                          Swagger.Clients.));
      Client.Initialize (Req, (Swagger.Clients.));
      Req.Stream.Write_Entity ("body", body);

      URI.Set_Path ("/user/createWithArray");
      Client.Call (Swagger.Clients.POST, URI, Req);
   end createUsersWithArrayInput;

   --  Creates list of users with given input array
   procedure createUsersWithListInput
      (Client : in out Client_Type;
       body : in IO.OpenAPI.Api.Models.array) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.,
                          Swagger.Clients.));
      Client.Initialize (Req, (Swagger.Clients.));
      Req.Stream.Write_Entity ("body", body);

      URI.Set_Path ("/user/createWithList");
      Client.Call (Swagger.Clients.POST, URI, Req);
   end createUsersWithListInput;

   --  Logs user into the system
   procedure loginUser
      (Client : in out Client_Type;
       username : in string;
       password : in string;
       Result : out string) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.));

      URI.Add_Param ("username", username);
      URI.Add_Param ("password", password);
      URI.Set_Path ("/user/login");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      Swagger.Streams.Deserialize (Reply, "", Result);
   end loginUser;

   --  Logs out current logged in user session
   procedure logoutUser
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.,
                          Swagger.Clients.));

      URI.Set_Path ("/user/logout");
      Client.Call (Swagger.Clients.GET, URI);
   end logoutUser;

   --  Get user by user name
   procedure getUserByName
      (Client : in out Client_Type;
       username : in string;
       Result : out User) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.));

      URI.Set_Path ("/user/{username}");
      URI.Set_Path_Param ("username", Swagger.To_String (username));
      Client.Call (Swagger.Clients.GET, URI, Reply);
      IO.OpenAPI.Api.Models.Deserialize (Reply, "", Result);
   end getUserByName;

   --  Updated user
   procedure updateUser
      (Client : in out Client_Type;
       username : in string;
       body : in IO.OpenAPI.Api.Models.object) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.,
                          Swagger.Clients.));
      Client.Initialize (Req, (Swagger.Clients.));
      Req.Stream.Write_Entity ("body", body);

      URI.Set_Path ("/user/{username}");
      URI.Set_Path_Param ("username", Swagger.To_String (username));
      Client.Call (Swagger.Clients.PUT, URI, Req);
   end updateUser;

   --  Delete user
   procedure deleteUser
      (Client : in out Client_Type;
       username : in string) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.,
                          Swagger.Clients.));

      URI.Set_Path ("/user/{username}");
      URI.Set_Path_Param ("username", Swagger.To_String (username));
      Client.Call (Swagger.Clients.DELETE, URI);
   end deleteUser;
end IO.OpenAPI.Api.Clients;
