--  Swagger Petstore
--  This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
--
--  OpenAPI spec version: 1.0.0
--  Contact: apiteam@swagger.io
--
--  NOTE: This package is auto generated by the swagger code generator 1.5.0.
--  https://github.com/swagger-api/swagger-codegen.git
--  Do not edit the class manually.with Swagger.Streams;
with Swagger.Servers.Operation;
package body IO.OpenAPI.Api.Skeletons is

   package body Skeleton is


      package API_addPet is
         new Swagger.Servers.Operation (Handler => addPet,
                                        Method  => Swagger.Servers.POST,
                                        URI     => "/pet");

      --  Add a new pet to the store
      procedure addPet
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         body : object;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Read (Req, Input);

         Deserialize (Input, "body", body);
         Impl.addPet
            (body, Context);

      end addPet;

      package API_updatePet is
         new Swagger.Servers.Operation (Handler => updatePet,
                                        Method  => Swagger.Servers.PUT,
                                        URI     => "/pet");

      --  Update an existing pet
      procedure updatePet
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         body : object;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Read (Req, Input);

         Deserialize (Input, "body", body);
         Impl.updatePet
            (body, Context);

      end updatePet;

      package API_findPetsByStatus is
         new Swagger.Servers.Operation (Handler => findPetsByStatus,
                                        Method  => Swagger.Servers.GET,
                                        URI     => "/pet/findByStatus");

      --  Finds Pets by status
      procedure findPetsByStatus
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         status : array;
         Result : array;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "status", status);
         Impl.findPetsByStatus
            (status, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end findPetsByStatus;

      package API_findPetsByTags is
         new Swagger.Servers.Operation (Handler => findPetsByTags,
                                        Method  => Swagger.Servers.GET,
                                        URI     => "/pet/findByTags");

      --  Finds Pets by tags
      procedure findPetsByTags
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         tags : array;
         Result : array;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "tags", tags);
         Impl.findPetsByTags
            (tags, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end findPetsByTags;

      package API_getPetById is
         new Swagger.Servers.Operation (Handler => getPetById,
                                        Method  => Swagger.Servers.GET,
                                        URI     => "/pet/{petId}");

      --  Find pet by ID
      procedure getPetById
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         petId : integer;
         Result : Pet;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, , petId);
         Impl.getPetById
            (petId, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            IO.OpenAPI.Api.Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end getPetById;

      package API_updatePetWithForm is
         new Swagger.Servers.Operation (Handler => updatePetWithForm,
                                        Method  => Swagger.Servers.POST,
                                        URI     => "/pet/{petId}");

      --  Updates a pet in the store with form data
      procedure updatePetWithForm
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         petId : integer;
         body : object;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, , petId);
         Swagger.Servers.Read (Req, Input);

         Deserialize (Input, "body", body);
         Impl.updatePetWithForm
            (petId,
             body, Context);

      end updatePetWithForm;

      package API_deletePet is
         new Swagger.Servers.Operation (Handler => deletePet,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => "/pet/{petId}");

      --  Deletes a pet
      procedure deletePet
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         petId : integer;
         api_key : string;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, , petId);
         Impl.deletePet
            (petId,
             api_key, Context);

      end deletePet;

      package API_uploadFile is
         new Swagger.Servers.Operation (Handler => uploadFile,
                                        Method  => Swagger.Servers.POST,
                                        URI     => "/pet/{petId}/uploadImage");

      --  uploads an image
      procedure uploadFile
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         petId : integer;
         body : string;
         Result : ApiResponse;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, , petId);
         Swagger.Servers.Read (Req, Input);

         Deserialize (Input, "body", body);
         Impl.uploadFile
            (petId,
             body, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            IO.OpenAPI.Api.Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end uploadFile;

      package API_getInventory is
         new Swagger.Servers.Operation (Handler => getInventory,
                                        Method  => Swagger.Servers.GET,
                                        URI     => "/store/inventory");

      --  Returns pet inventories by status
      procedure getInventory
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : object;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Impl.getInventory (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end getInventory;

      package API_placeOrder is
         new Swagger.Servers.Operation (Handler => placeOrder,
                                        Method  => Swagger.Servers.POST,
                                        URI     => "/store/order");

      --  Place an order for a pet
      procedure placeOrder
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         body : object;
         Result : Order;
      begin
         Swagger.Servers.Read (Req, Input);

         Deserialize (Input, "body", body);
         Impl.placeOrder
            (body, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            IO.OpenAPI.Api.Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end placeOrder;

      package API_getOrderById is
         new Swagger.Servers.Operation (Handler => getOrderById,
                                        Method  => Swagger.Servers.GET,
                                        URI     => "/store/order/{orderId}");

      --  Find purchase order by ID
      procedure getOrderById
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         orderId : integer;
         Result : Order;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, , orderId);
         Impl.getOrderById
            (orderId, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            IO.OpenAPI.Api.Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end getOrderById;

      package API_deleteOrder is
         new Swagger.Servers.Operation (Handler => deleteOrder,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => "/store/order/{orderId}");

      --  Delete purchase order by ID
      procedure deleteOrder
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         orderId : integer;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, , orderId);
         Impl.deleteOrder
            (orderId, Context);

      end deleteOrder;

      package API_createUser is
         new Swagger.Servers.Operation (Handler => createUser,
                                        Method  => Swagger.Servers.POST,
                                        URI     => "/user");

      --  Create user
      procedure createUser
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         body : object;
      begin
         Swagger.Servers.Read (Req, Input);

         Deserialize (Input, "body", body);
         Impl.createUser
            (body, Context);

      end createUser;

      package API_createUsersWithArrayInput is
         new Swagger.Servers.Operation (Handler => createUsersWithArrayInput,
                                        Method  => Swagger.Servers.POST,
                                        URI     => "/user/createWithArray");

      --  Creates list of users with given input array
      procedure createUsersWithArrayInput
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         body : array;
      begin
         Swagger.Servers.Read (Req, Input);

         Deserialize (Input, "body", body);
         Impl.createUsersWithArrayInput
            (body, Context);

      end createUsersWithArrayInput;

      package API_createUsersWithListInput is
         new Swagger.Servers.Operation (Handler => createUsersWithListInput,
                                        Method  => Swagger.Servers.POST,
                                        URI     => "/user/createWithList");

      --  Creates list of users with given input array
      procedure createUsersWithListInput
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         body : array;
      begin
         Swagger.Servers.Read (Req, Input);

         Deserialize (Input, "body", body);
         Impl.createUsersWithListInput
            (body, Context);

      end createUsersWithListInput;

      package API_loginUser is
         new Swagger.Servers.Operation (Handler => loginUser,
                                        Method  => Swagger.Servers.GET,
                                        URI     => "/user/login");

      --  Logs user into the system
      procedure loginUser
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         username : string;
         password : string;
         Result : string;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "username", username);
         Swagger.Servers.Get_Query_Parameter (Req, "password", password);
         Impl.loginUser
            (username,
             password, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end loginUser;

      package API_logoutUser is
         new Swagger.Servers.Operation (Handler => logoutUser,
                                        Method  => Swagger.Servers.GET,
                                        URI     => "/user/logout");

      --  Logs out current logged in user session
      procedure logoutUser
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
      begin
         Impl.logoutUser (Context);

      end logoutUser;

      package API_getUserByName is
         new Swagger.Servers.Operation (Handler => getUserByName,
                                        Method  => Swagger.Servers.GET,
                                        URI     => "/user/{username}");

      --  Get user by user name
      procedure getUserByName
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         username : string;
         Result : User;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, , username);
         Impl.getUserByName
            (username, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            IO.OpenAPI.Api.Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end getUserByName;

      package API_updateUser is
         new Swagger.Servers.Operation (Handler => updateUser,
                                        Method  => Swagger.Servers.PUT,
                                        URI     => "/user/{username}");

      --  Updated user
      procedure updateUser
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         username : string;
         body : object;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, , username);
         Swagger.Servers.Read (Req, Input);

         Deserialize (Input, "body", body);
         Impl.updateUser
            (username,
             body, Context);

      end updateUser;

      package API_deleteUser is
         new Swagger.Servers.Operation (Handler => deleteUser,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => "/user/{username}");

      --  Delete user
      procedure deleteUser
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         username : string;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, , username);
         Impl.deleteUser
            (username, Context);

      end deleteUser;

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_addPet.Definition);
         Swagger.Servers.Register (Server, API_updatePet.Definition);
         Swagger.Servers.Register (Server, API_findPetsByStatus.Definition);
         Swagger.Servers.Register (Server, API_findPetsByTags.Definition);
         Swagger.Servers.Register (Server, API_getPetById.Definition);
         Swagger.Servers.Register (Server, API_updatePetWithForm.Definition);
         Swagger.Servers.Register (Server, API_deletePet.Definition);
         Swagger.Servers.Register (Server, API_uploadFile.Definition);
         Swagger.Servers.Register (Server, API_getInventory.Definition);
         Swagger.Servers.Register (Server, API_placeOrder.Definition);
         Swagger.Servers.Register (Server, API_getOrderById.Definition);
         Swagger.Servers.Register (Server, API_deleteOrder.Definition);
         Swagger.Servers.Register (Server, API_createUser.Definition);
         Swagger.Servers.Register (Server, API_createUsersWithArrayInput.Definition);
         Swagger.Servers.Register (Server, API_createUsersWithListInput.Definition);
         Swagger.Servers.Register (Server, API_loginUser.Definition);
         Swagger.Servers.Register (Server, API_logoutUser.Definition);
         Swagger.Servers.Register (Server, API_getUserByName.Definition);
         Swagger.Servers.Register (Server, API_updateUser.Definition);
         Swagger.Servers.Register (Server, API_deleteUser.Definition);
      end Register;

   end Skeleton;

   package body Shared_Instance is


      --  Add a new pet to the store
      procedure addPet
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         body : object;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Read (Req, Input);

         Deserialize (Input, "body", body);
         Server.addPet
            (body, Context);

      end addPet;

      package API_addPet is
         new Swagger.Servers.Operation (Handler => addPet,
                                        Method  => Swagger.Servers.POST,
                                        URI     => "/pet");

      --  Update an existing pet
      procedure updatePet
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         body : object;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Read (Req, Input);

         Deserialize (Input, "body", body);
         Server.updatePet
            (body, Context);

      end updatePet;

      package API_updatePet is
         new Swagger.Servers.Operation (Handler => updatePet,
                                        Method  => Swagger.Servers.PUT,
                                        URI     => "/pet");

      --  Finds Pets by status
      procedure findPetsByStatus
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         status : array;
         Result : array;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "status", status);
         Server.findPetsByStatus
            (status, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end findPetsByStatus;

      package API_findPetsByStatus is
         new Swagger.Servers.Operation (Handler => findPetsByStatus,
                                        Method  => Swagger.Servers.GET,
                                        URI     => "/pet/findByStatus");

      --  Finds Pets by tags
      procedure findPetsByTags
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         tags : array;
         Result : array;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "tags", tags);
         Server.findPetsByTags
            (tags, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end findPetsByTags;

      package API_findPetsByTags is
         new Swagger.Servers.Operation (Handler => findPetsByTags,
                                        Method  => Swagger.Servers.GET,
                                        URI     => "/pet/findByTags");

      --  Find pet by ID
      procedure getPetById
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         petId : integer;
         Result : Pet;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, , petId);
         Server.getPetById
            (petId, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            IO.OpenAPI.Api.Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end getPetById;

      package API_getPetById is
         new Swagger.Servers.Operation (Handler => getPetById,
                                        Method  => Swagger.Servers.GET,
                                        URI     => "/pet/{petId}");

      --  Updates a pet in the store with form data
      procedure updatePetWithForm
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         petId : integer;
         body : object;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, , petId);
         Swagger.Servers.Read (Req, Input);

         Deserialize (Input, "body", body);
         Server.updatePetWithForm
            (petId,
             body, Context);

      end updatePetWithForm;

      package API_updatePetWithForm is
         new Swagger.Servers.Operation (Handler => updatePetWithForm,
                                        Method  => Swagger.Servers.POST,
                                        URI     => "/pet/{petId}");

      --  Deletes a pet
      procedure deletePet
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         petId : integer;
         api_key : string;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, , petId);
         Server.deletePet
            (petId,
             api_key, Context);

      end deletePet;

      package API_deletePet is
         new Swagger.Servers.Operation (Handler => deletePet,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => "/pet/{petId}");

      --  uploads an image
      procedure uploadFile
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         petId : integer;
         body : string;
         Result : ApiResponse;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, , petId);
         Swagger.Servers.Read (Req, Input);

         Deserialize (Input, "body", body);
         Server.uploadFile
            (petId,
             body, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            IO.OpenAPI.Api.Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end uploadFile;

      package API_uploadFile is
         new Swagger.Servers.Operation (Handler => uploadFile,
                                        Method  => Swagger.Servers.POST,
                                        URI     => "/pet/{petId}/uploadImage");

      --  Returns pet inventories by status
      procedure getInventory
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : object;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Server.getInventory (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end getInventory;

      package API_getInventory is
         new Swagger.Servers.Operation (Handler => getInventory,
                                        Method  => Swagger.Servers.GET,
                                        URI     => "/store/inventory");

      --  Place an order for a pet
      procedure placeOrder
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         body : object;
         Result : Order;
      begin
         Swagger.Servers.Read (Req, Input);

         Deserialize (Input, "body", body);
         Server.placeOrder
            (body, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            IO.OpenAPI.Api.Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end placeOrder;

      package API_placeOrder is
         new Swagger.Servers.Operation (Handler => placeOrder,
                                        Method  => Swagger.Servers.POST,
                                        URI     => "/store/order");

      --  Find purchase order by ID
      procedure getOrderById
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         orderId : integer;
         Result : Order;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, , orderId);
         Server.getOrderById
            (orderId, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            IO.OpenAPI.Api.Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end getOrderById;

      package API_getOrderById is
         new Swagger.Servers.Operation (Handler => getOrderById,
                                        Method  => Swagger.Servers.GET,
                                        URI     => "/store/order/{orderId}");

      --  Delete purchase order by ID
      procedure deleteOrder
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         orderId : integer;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, , orderId);
         Server.deleteOrder
            (orderId, Context);

      end deleteOrder;

      package API_deleteOrder is
         new Swagger.Servers.Operation (Handler => deleteOrder,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => "/store/order/{orderId}");

      --  Create user
      procedure createUser
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         body : object;
      begin
         Swagger.Servers.Read (Req, Input);

         Deserialize (Input, "body", body);
         Server.createUser
            (body, Context);

      end createUser;

      package API_createUser is
         new Swagger.Servers.Operation (Handler => createUser,
                                        Method  => Swagger.Servers.POST,
                                        URI     => "/user");

      --  Creates list of users with given input array
      procedure createUsersWithArrayInput
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         body : array;
      begin
         Swagger.Servers.Read (Req, Input);

         Deserialize (Input, "body", body);
         Server.createUsersWithArrayInput
            (body, Context);

      end createUsersWithArrayInput;

      package API_createUsersWithArrayInput is
         new Swagger.Servers.Operation (Handler => createUsersWithArrayInput,
                                        Method  => Swagger.Servers.POST,
                                        URI     => "/user/createWithArray");

      --  Creates list of users with given input array
      procedure createUsersWithListInput
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         body : array;
      begin
         Swagger.Servers.Read (Req, Input);

         Deserialize (Input, "body", body);
         Server.createUsersWithListInput
            (body, Context);

      end createUsersWithListInput;

      package API_createUsersWithListInput is
         new Swagger.Servers.Operation (Handler => createUsersWithListInput,
                                        Method  => Swagger.Servers.POST,
                                        URI     => "/user/createWithList");

      --  Logs user into the system
      procedure loginUser
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         username : string;
         password : string;
         Result : string;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "username", username);
         Swagger.Servers.Get_Query_Parameter (Req, "password", password);
         Server.loginUser
            (username,
             password, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end loginUser;

      package API_loginUser is
         new Swagger.Servers.Operation (Handler => loginUser,
                                        Method  => Swagger.Servers.GET,
                                        URI     => "/user/login");

      --  Logs out current logged in user session
      procedure logoutUser
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
      begin
         Server.logoutUser (Context);

      end logoutUser;

      package API_logoutUser is
         new Swagger.Servers.Operation (Handler => logoutUser,
                                        Method  => Swagger.Servers.GET,
                                        URI     => "/user/logout");

      --  Get user by user name
      procedure getUserByName
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         username : string;
         Result : User;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, , username);
         Server.getUserByName
            (username, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            IO.OpenAPI.Api.Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end getUserByName;

      package API_getUserByName is
         new Swagger.Servers.Operation (Handler => getUserByName,
                                        Method  => Swagger.Servers.GET,
                                        URI     => "/user/{username}");

      --  Updated user
      procedure updateUser
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         username : string;
         body : object;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, , username);
         Swagger.Servers.Read (Req, Input);

         Deserialize (Input, "body", body);
         Server.updateUser
            (username,
             body, Context);

      end updateUser;

      package API_updateUser is
         new Swagger.Servers.Operation (Handler => updateUser,
                                        Method  => Swagger.Servers.PUT,
                                        URI     => "/user/{username}");

      --  Delete user
      procedure deleteUser
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         username : string;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, , username);
         Server.deleteUser
            (username, Context);

      end deleteUser;

      package API_deleteUser is
         new Swagger.Servers.Operation (Handler => deleteUser,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => "/user/{username}");

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_addPet.Definition);
         Swagger.Servers.Register (Server, API_updatePet.Definition);
         Swagger.Servers.Register (Server, API_findPetsByStatus.Definition);
         Swagger.Servers.Register (Server, API_findPetsByTags.Definition);
         Swagger.Servers.Register (Server, API_getPetById.Definition);
         Swagger.Servers.Register (Server, API_updatePetWithForm.Definition);
         Swagger.Servers.Register (Server, API_deletePet.Definition);
         Swagger.Servers.Register (Server, API_uploadFile.Definition);
         Swagger.Servers.Register (Server, API_getInventory.Definition);
         Swagger.Servers.Register (Server, API_placeOrder.Definition);
         Swagger.Servers.Register (Server, API_getOrderById.Definition);
         Swagger.Servers.Register (Server, API_deleteOrder.Definition);
         Swagger.Servers.Register (Server, API_createUser.Definition);
         Swagger.Servers.Register (Server, API_createUsersWithArrayInput.Definition);
         Swagger.Servers.Register (Server, API_createUsersWithListInput.Definition);
         Swagger.Servers.Register (Server, API_loginUser.Definition);
         Swagger.Servers.Register (Server, API_logoutUser.Definition);
         Swagger.Servers.Register (Server, API_getUserByName.Definition);
         Swagger.Servers.Register (Server, API_updateUser.Definition);
         Swagger.Servers.Register (Server, API_deleteUser.Definition);
      end Register;

      protected body Server is
         --  Add a new pet to the store
         procedure addPet
            (body : in object;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.addPet
               (body,
                Context);
         end addPet;

         --  Update an existing pet
         procedure updatePet
            (body : in object;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.updatePet
               (body,
                Context);
         end updatePet;

         --  Finds Pets by status
         procedure findPetsByStatus
            (status : in array;
             Result : out array;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.findPetsByStatus
               (status,
                Result,
                Context);
         end findPetsByStatus;

         --  Finds Pets by tags
         procedure findPetsByTags
            (tags : in array;
             Result : out array;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.findPetsByTags
               (tags,
                Result,
                Context);
         end findPetsByTags;

         --  Find pet by ID
         procedure getPetById
            (petId : in integer;
             Result : out Pet;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.getPetById
               (petId,
                Result,
                Context);
         end getPetById;

         --  Updates a pet in the store with form data
         procedure updatePetWithForm
            (petId : in integer;
             body : in object;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.updatePetWithForm
               (petId,
                body,
                Context);
         end updatePetWithForm;

         --  Deletes a pet
         procedure deletePet
            (petId : in integer;
             api_key : in string;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.deletePet
               (petId,
                api_key,
                Context);
         end deletePet;

         --  uploads an image
         procedure uploadFile
            (petId : in integer;
             body : in string;
             Result : out ApiResponse;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.uploadFile
               (petId,
                body,
                Result,
                Context);
         end uploadFile;

         --  Returns pet inventories by status
         procedure getInventory (Result : out object;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.getInventory (Result, Context);
         end getInventory;

         --  Place an order for a pet
         procedure placeOrder
            (body : in object;
             Result : out Order;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.placeOrder
               (body,
                Result,
                Context);
         end placeOrder;

         --  Find purchase order by ID
         procedure getOrderById
            (orderId : in integer;
             Result : out Order;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.getOrderById
               (orderId,
                Result,
                Context);
         end getOrderById;

         --  Delete purchase order by ID
         procedure deleteOrder
            (orderId : in integer;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.deleteOrder
               (orderId,
                Context);
         end deleteOrder;

         --  Create user
         procedure createUser
            (body : in object;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.createUser
               (body,
                Context);
         end createUser;

         --  Creates list of users with given input array
         procedure createUsersWithArrayInput
            (body : in array;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.createUsersWithArrayInput
               (body,
                Context);
         end createUsersWithArrayInput;

         --  Creates list of users with given input array
         procedure createUsersWithListInput
            (body : in array;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.createUsersWithListInput
               (body,
                Context);
         end createUsersWithListInput;

         --  Logs user into the system
         procedure loginUser
            (username : in string;
             password : in string;
             Result : out string;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.loginUser
               (username,
                password,
                Result,
                Context);
         end loginUser;

         --  Logs out current logged in user session
         procedure logoutUser (Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.logoutUser (Context);
         end logoutUser;

         --  Get user by user name
         procedure getUserByName
            (username : in string;
             Result : out User;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.getUserByName
               (username,
                Result,
                Context);
         end getUserByName;

         --  Updated user
         procedure updateUser
            (username : in string;
             body : in object;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.updateUser
               (username,
                body,
                Context);
         end updateUser;

         --  Delete user
         procedure deleteUser
            (username : in string;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.deleteUser
               (username,
                Context);
         end deleteUser;

      end Server;

   end Shared_Instance;

end IO.OpenAPI.Api.Skeletons;
