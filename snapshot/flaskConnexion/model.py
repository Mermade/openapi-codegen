# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from IO.OpenAPI.base_model_ import Model
IO.OpenAPI.Model.Default  # noqa: F401,E501
from IO.OpenAPI import util


class Order(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    placed = "placed"
    approved = "approved"
    delivered = "delivered"
    def __init__(self, id=None, petId=None, quantity=None, shipDate=None, status=None, complete=None):  # noqa: E501
        """Order - a model defined in Swagger

        :param id: The id of this Order.  # noqa: E501
        :type id: integer
        :param petId: The petId of this Order.  # noqa: E501
        :type petId: integer
        :param quantity: The quantity of this Order.  # noqa: E501
        :type quantity: integer
        :param shipDate: The shipDate of this Order.  # noqa: E501
        :type shipDate: string
        :param status: The status of this Order.  # noqa: E501
        :type status: string
        :param complete: The complete of this Order.  # noqa: E501
        :type complete: boolean
        """
        self.swagger_types = {
            'id': integer,
            'petId': integer,
            'quantity': integer,
            'shipDate': string,
            'status': string,
            'complete': boolean
        }

        self.attribute_map = {
            'id': 'id',
            'petId': 'petid',
            'quantity': 'quantity',
            'shipDate': 'shipdate',
            'status': 'status',
            'complete': 'complete'
        }
        self._id = id
        self._petId = petId
        self._quantity = quantity
        self._shipDate = shipDate
        self._status = status
        self._complete = complete

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Order of this Order.  # noqa: E501
        :rtype: Order
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Order.


        :return: The id of this Order.
        :rtype: integer
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Order.


        :param id: The id of this Order.
        :type id: integer
        """

        self._id = id

    @property
    def petId(self):
        """Gets the petId of this Order.


        :return: The petId of this Order.
        :rtype: integer
        """
        return self._petId

    @petId.setter
    def petId(self, petId):
        """Sets the petId of this Order.


        :param petId: The petId of this Order.
        :type petId: integer
        """

        self._petId = petId

    @property
    def quantity(self):
        """Gets the quantity of this Order.


        :return: The quantity of this Order.
        :rtype: integer
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Order.


        :param quantity: The quantity of this Order.
        :type quantity: integer
        """

        self._quantity = quantity

    @property
    def shipDate(self):
        """Gets the shipDate of this Order.


        :return: The shipDate of this Order.
        :rtype: string
        """
        return self._shipDate

    @shipDate.setter
    def shipDate(self, shipDate):
        """Sets the shipDate of this Order.


        :param shipDate: The shipDate of this Order.
        :type shipDate: string
        """

        self._shipDate = shipDate

    @property
    def status(self):
        """Gets the status of this Order.

        Order Status  # noqa: E501

        :return: The status of this Order.
        :rtype: string
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Order.

        Order Status  # noqa: E501

        :param status: The status of this Order.
        :type status: string
        """
        allowed_values = []  # noqa: E501

        self._status = status

    @property
    def complete(self):
        """Gets the complete of this Order.


        :return: The complete of this Order.
        :rtype: boolean
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this Order.


        :param complete: The complete of this Order.
        :type complete: boolean
        """

        self._complete = complete
class Category(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None):  # noqa: E501
        """Category - a model defined in Swagger

        :param id: The id of this Category.  # noqa: E501
        :type id: integer
        :param name: The name of this Category.  # noqa: E501
        :type name: string
        """
        self.swagger_types = {
            'id': integer,
            'name': string
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name'
        }
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Category of this Category.  # noqa: E501
        :rtype: Category
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Category.


        :return: The id of this Category.
        :rtype: integer
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Category.


        :param id: The id of this Category.
        :type id: integer
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Category.


        :return: The name of this Category.
        :rtype: string
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Category.


        :param name: The name of this Category.
        :type name: string
        """

        self._name = name
class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id=None, username=None, firstName=None, lastName=None, email=None, password=None, phone=None, userStatus=None):  # noqa: E501
        """User - a model defined in Swagger

        :param id: The id of this User.  # noqa: E501
        :type id: integer
        :param username: The username of this User.  # noqa: E501
        :type username: string
        :param firstName: The firstName of this User.  # noqa: E501
        :type firstName: string
        :param lastName: The lastName of this User.  # noqa: E501
        :type lastName: string
        :param email: The email of this User.  # noqa: E501
        :type email: string
        :param password: The password of this User.  # noqa: E501
        :type password: string
        :param phone: The phone of this User.  # noqa: E501
        :type phone: string
        :param userStatus: The userStatus of this User.  # noqa: E501
        :type userStatus: integer
        """
        self.swagger_types = {
            'id': integer,
            'username': string,
            'firstName': string,
            'lastName': string,
            'email': string,
            'password': string,
            'phone': string,
            'userStatus': integer
        }

        self.attribute_map = {
            'id': 'id',
            'username': 'username',
            'firstName': 'firstname',
            'lastName': 'lastname',
            'email': 'email',
            'password': 'password',
            'phone': 'phone',
            'userStatus': 'userstatus'
        }
        self._id = id
        self._username = username
        self._firstName = firstName
        self._lastName = lastName
        self._email = email
        self._password = password
        self._phone = phone
        self._userStatus = userStatus

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: integer
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: integer
        """

        self._id = id

    @property
    def username(self):
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: string
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: string
        """

        self._username = username

    @property
    def firstName(self):
        """Gets the firstName of this User.


        :return: The firstName of this User.
        :rtype: string
        """
        return self._firstName

    @firstName.setter
    def firstName(self, firstName):
        """Sets the firstName of this User.


        :param firstName: The firstName of this User.
        :type firstName: string
        """

        self._firstName = firstName

    @property
    def lastName(self):
        """Gets the lastName of this User.


        :return: The lastName of this User.
        :rtype: string
        """
        return self._lastName

    @lastName.setter
    def lastName(self, lastName):
        """Sets the lastName of this User.


        :param lastName: The lastName of this User.
        :type lastName: string
        """

        self._lastName = lastName

    @property
    def email(self):
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: string
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: string
        """

        self._email = email

    @property
    def password(self):
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: string
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.


        :param password: The password of this User.
        :type password: string
        """

        self._password = password

    @property
    def phone(self):
        """Gets the phone of this User.


        :return: The phone of this User.
        :rtype: string
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this User.


        :param phone: The phone of this User.
        :type phone: string
        """

        self._phone = phone

    @property
    def userStatus(self):
        """Gets the userStatus of this User.

        User Status  # noqa: E501

        :return: The userStatus of this User.
        :rtype: integer
        """
        return self._userStatus

    @userStatus.setter
    def userStatus(self, userStatus):
        """Sets the userStatus of this User.

        User Status  # noqa: E501

        :param userStatus: The userStatus of this User.
        :type userStatus: integer
        """

        self._userStatus = userStatus
class Tag(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None):  # noqa: E501
        """Tag - a model defined in Swagger

        :param id: The id of this Tag.  # noqa: E501
        :type id: integer
        :param name: The name of this Tag.  # noqa: E501
        :type name: string
        """
        self.swagger_types = {
            'id': integer,
            'name': string
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name'
        }
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Tag of this Tag.  # noqa: E501
        :rtype: Tag
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Tag.


        :return: The id of this Tag.
        :rtype: integer
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tag.


        :param id: The id of this Tag.
        :type id: integer
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Tag.


        :return: The name of this Tag.
        :rtype: string
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tag.


        :param name: The name of this Tag.
        :type name: string
        """

        self._name = name
class Pet(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    available = "available"
    pending = "pending"
    sold = "sold"
    def __init__(self, id=None, category=None, name=None, photoUrls=None, tags=None, status=None):  # noqa: E501
        """Pet - a model defined in Swagger

        :param id: The id of this Pet.  # noqa: E501
        :type id: integer
        :param category: The category of this Pet.  # noqa: E501
        :type category: object
        :param name: The name of this Pet.  # noqa: E501
        :type name: string
        :param photoUrls: The photoUrls of this Pet.  # noqa: E501
        :type photoUrls: array
        :param tags: The tags of this Pet.  # noqa: E501
        :type tags: array
        :param status: The status of this Pet.  # noqa: E501
        :type status: string
        """
        self.swagger_types = {
            'id': integer,
            'category': object,
            'name': string,
            'photoUrls': array,
            'tags': array,
            'status': string
        }

        self.attribute_map = {
            'id': 'id',
            'category': 'category',
            'name': 'name',
            'photoUrls': 'photourls',
            'tags': 'tags',
            'status': 'status'
        }
        self._id = id
        self._category = category
        self._name = name
        self._photoUrls = photoUrls
        self._tags = tags
        self._status = status

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Pet of this Pet.  # noqa: E501
        :rtype: Pet
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Pet.


        :return: The id of this Pet.
        :rtype: integer
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Pet.


        :param id: The id of this Pet.
        :type id: integer
        """

        self._id = id

    @property
    def category(self):
        """Gets the category of this Pet.


        :return: The category of this Pet.
        :rtype: object
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Pet.


        :param category: The category of this Pet.
        :type category: object
        """

        self._category = category

    @property
    def name(self):
        """Gets the name of this Pet.


        :return: The name of this Pet.
        :rtype: string
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Pet.


        :param name: The name of this Pet.
        :type name: string
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def photoUrls(self):
        """Gets the photoUrls of this Pet.


        :return: The photoUrls of this Pet.
        :rtype: array
        """
        return self._photoUrls

    @photoUrls.setter
    def photoUrls(self, photoUrls):
        """Sets the photoUrls of this Pet.


        :param photoUrls: The photoUrls of this Pet.
        :type photoUrls: array
        """
        if photoUrls is None:
            raise ValueError("Invalid value for `photoUrls`, must not be `None`")  # noqa: E501

        self._photoUrls = photoUrls

    @property
    def tags(self):
        """Gets the tags of this Pet.


        :return: The tags of this Pet.
        :rtype: array
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Pet.


        :param tags: The tags of this Pet.
        :type tags: array
        """

        self._tags = tags

    @property
    def status(self):
        """Gets the status of this Pet.

        pet status in the store  # noqa: E501

        :return: The status of this Pet.
        :rtype: string
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Pet.

        pet status in the store  # noqa: E501

        :param status: The status of this Pet.
        :type status: string
        """
        allowed_values = []  # noqa: E501

        self._status = status
class ApiResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, code=None, type=None, message=None):  # noqa: E501
        """ApiResponse - a model defined in Swagger

        :param code: The code of this ApiResponse.  # noqa: E501
        :type code: integer
        :param type: The type of this ApiResponse.  # noqa: E501
        :type type: string
        :param message: The message of this ApiResponse.  # noqa: E501
        :type message: string
        """
        self.swagger_types = {
            'code': integer,
            'type': string,
            'message': string
        }

        self.attribute_map = {
            'code': 'code',
            'type': 'type',
            'message': 'message'
        }
        self._code = code
        self._type = type
        self._message = message

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ApiResponse of this ApiResponse.  # noqa: E501
        :rtype: ApiResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ApiResponse.


        :return: The code of this ApiResponse.
        :rtype: integer
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ApiResponse.


        :param code: The code of this ApiResponse.
        :type code: integer
        """

        self._code = code

    @property
    def type(self):
        """Gets the type of this ApiResponse.


        :return: The type of this ApiResponse.
        :rtype: string
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApiResponse.


        :param type: The type of this ApiResponse.
        :type type: string
        """

        self._type = type

    @property
    def message(self):
        """Gets the message of this ApiResponse.


        :return: The message of this ApiResponse.
        :rtype: string
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ApiResponse.


        :param message: The message of this ApiResponse.
        :type message: string
        """

        self._message = message
