/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package api

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/v2/",
		Index,
	},

	Route{
		"addPet",
		strings.ToUpper("POST"),
		"/v2/pet",
		addPet,
	},

	Route{
		"updatePet",
		strings.ToUpper("PUT"),
		"/v2/pet",
		updatePet,
	},

	Route{
		"findPetsByStatus",
		strings.ToUpper("GET"),
		"/v2/pet/findByStatus",
		findPetsByStatus,
	},

	Route{
		"findPetsByTags",
		strings.ToUpper("GET"),
		"/v2/pet/findByTags",
		findPetsByTags,
	},

	Route{
		"getPetById",
		strings.ToUpper("GET"),
		"/v2/pet/{petId}",
		getPetById,
	},

	Route{
		"updatePetWithForm",
		strings.ToUpper("POST"),
		"/v2/pet/{petId}",
		updatePetWithForm,
	},

	Route{
		"deletePet",
		strings.ToUpper("DELETE"),
		"/v2/pet/{petId}",
		deletePet,
	},

	Route{
		"uploadFile",
		strings.ToUpper("POST"),
		"/v2/pet/{petId}/uploadImage",
		uploadFile,
	},

	Route{
		"getInventory",
		strings.ToUpper("GET"),
		"/v2/store/inventory",
		getInventory,
	},

	Route{
		"placeOrder",
		strings.ToUpper("POST"),
		"/v2/store/order",
		placeOrder,
	},

	Route{
		"getOrderById",
		strings.ToUpper("GET"),
		"/v2/store/order/{orderId}",
		getOrderById,
	},

	Route{
		"deleteOrder",
		strings.ToUpper("DELETE"),
		"/v2/store/order/{orderId}",
		deleteOrder,
	},

	Route{
		"createUser",
		strings.ToUpper("POST"),
		"/v2/user",
		createUser,
	},

	Route{
		"createUsersWithArrayInput",
		strings.ToUpper("POST"),
		"/v2/user/createWithArray",
		createUsersWithArrayInput,
	},

	Route{
		"createUsersWithListInput",
		strings.ToUpper("POST"),
		"/v2/user/createWithList",
		createUsersWithListInput,
	},

	Route{
		"loginUser",
		strings.ToUpper("GET"),
		"/v2/user/login",
		loginUser,
	},

	Route{
		"logoutUser",
		strings.ToUpper("GET"),
		"/v2/user/logout",
		logoutUser,
	},

	Route{
		"getUserByName",
		strings.ToUpper("GET"),
		"/v2/user/{username}",
		getUserByName,
	},

	Route{
		"updateUser",
		strings.ToUpper("PUT"),
		"/v2/user/{username}",
		updateUser,
	},

	Route{
		"deleteUser",
		strings.ToUpper("DELETE"),
		"/v2/user/{username}",
		deleteUser,
	},
}
