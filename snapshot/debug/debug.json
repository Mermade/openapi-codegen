{
  "supportingFiles": [],
  "modelTests": [],
  "modelDocs": [],
  "apiTests": [],
  "apiDocs": [],
  "allowUnicodeIdentifiers": false,
  "gitUserId": "Mermade",
  "gitRepoId": "openapi-codegen",
  "licenseName": "Unlicense",
  "projectLicenseName": "Unlicense",
  "licenseUrl": "http://www.apache.org/licenses/LICENSE-2.0.html",
  "projectLicenseUrl": "https://unlicense.org",
  "projectUrl": "https://github.com/Mermade/openapi-codegen",
  "localVariablePrefix": "",
  "serializableModel": true,
  "bigDecimalAsString": false,
  "sortParamsByRequiredFlag": true,
  "useDateTimeOffset": 0,
  "ensureUniqueParams": false,
  "optionalMethodArgument": false,
  "optionalAssemblyInfo": false,
  "netCoreProjectFile": true,
  "useCollection": false,
  "interfacePrefix": "",
  "returnICollection": false,
  "optionalProjectFile": false,
  "modelPropertyNaming": "original",
  "targetFramework": 4,
  "modelNamePrefix": "",
  "modelNameSuffix": "",
  "releaseNote": "Minor update",
  "supportsES6": true,
  "supportsAsync": true,
  "emitJSDoc": true,
  "emitModelMethods": true,
  "excludeTests": false,
  "generateApiDocs": true,
  "generateApiTests": true,
  "generateModelDocs": true,
  "generateModelTests": true,
  "hideGenerationTimestamp": false,
  "generatePropertyChanged": true,
  "nonPublicApi": false,
  "validatable": true,
  "ignoreFileOverride": ".swagger-codegen-ignore",
  "removeOperationIdPrefix": false,
  "serverPort": 8000,
  "newline": "\n",
  "apiDocPath": "",
  "modelDocPath": "",
  "classPrefix": "cls",
  "modelNaming": "original",
  "classname": "swagger_petstore",
  "projectName": "swagger_petstore",
  "appVersion": "1.0.0",
  "apiVersion": "1.0.0",
  "packageVersion": "1.0.0",
  "projectVersion": "1.0.0",
  "version": "1.0.0",
  "title": "Swagger Petstore",
  "swaggerVersion": "2.0",
  "generatorVersion": "1.5.0",
  "swaggerCodegenVersion": "openapi-codegen-v1.5.0",
  "appDescription": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
  "projectDescription": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
  "classVarName": "default",
  "exportedName": "swagger_petstore",
  "packageTitle": "swagger_petstore",
  "infoEmail": "apiteam@swagger.io",
  "appContact": "apiteam@swagger.io",
  "infoUrl": "https://swagger.io",
  "licenseInfo": "Apache 2.0",
  "appName": "Swagger Petstore",
  "host": "petstore.swagger.io",
  "basePath": "/v2",
  "basePathWithoutHost": "/v2",
  "contextPath": "/",
  "packageName": "IO.OpenAPI",
  "apiPackage": "IO.OpenAPI",
  "generatorPackage": "IO.OpenAPI",
  "invokerPackage": "IO.OpenAPI",
  "modelPackage": "IO.OpenAPI",
  "package": "IO.OpenAPI.Api",
  "phpInvokerPackage": "IO.OpenAPI",
  "perlModuleName": "IO.OpenAPI",
  "podVersion": "1.0.0",
  "pythonPackageName": "IO.OpenAPI",
  "clientPackage": "IO.OpenAPI.Client",
  "importPath": "IO.OpenAPI.Api.Default",
  "hasImport": true,
  "hasMore": true,
  "generatedDate": "Mon Jul 02 2018 20:01:51 GMT+1000 (AEST)",
  "generatorClass": "debug",
  "fullyQualifiedGeneratorClass": "IO.OpenAPI.debug",
  "imports": [
    {
      "import": "IO.OpenAPI.Model.Default"
    }
  ],
  "name": "swagger_petstore",
  "classFilename": "swagger_petstore",
  "jsModuleName": "swagger_petstore",
  "moduleName": "swagger_petstore",
  "jsProjectName": "swagger_petstore",
  "baseNamespace": "IO.OpenAPI",
  "sourceFolder": "./out/debug",
  "templateDir": "./templates/debug",
  "implFolder": "./out/debug",
  "library": "",
  "packageGuid": "70ba1827-227e-4e3b-b4b1-ac73ddb3f1f2",
  "optionalEmitDefaultValues": false,
  "packageProductName": "swagger_petstore",
  "packageCompany": "Smartbear Software",
  "packageAuthors": "Swagger-Codegen authors",
  "packageCopyright": "Copyright 2016 Smartbear Software",
  "httpUserAgent": "OpenAPI-Codegen/1.0.0/debug",
  "debug": true,
  "configName": "debug",
  "swagger": {
    "x-origin": [
      {
        "url": "http://petstore.swagger.io/v2/swagger.json",
        "format": "swagger",
        "version": "2.0",
        "converter": {
          "url": "https://github.com/mermade/swagger2openapi",
          "version": "2.6.3"
        }
      }
    ],
    "info": {
      "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
      "version": "1.0.0",
      "title": "Swagger Petstore",
      "termsOfService": "http://swagger.io/terms/",
      "contact": {
        "email": "apiteam@swagger.io",
        "url": "https://swagger.io"
      },
      "license": {
        "name": "Apache 2.0",
        "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
      }
    },
    "tags": [
      {
        "name": "pet",
        "description": "Everything about your Pets",
        "externalDocs": {
          "description": "Find out more",
          "url": "http://swagger.io"
        }
      },
      {
        "name": "store",
        "description": "Access to Petstore orders"
      },
      {
        "name": "user",
        "description": "Operations about user",
        "externalDocs": {
          "description": "Find out more about our store",
          "url": "http://swagger.io"
        }
      }
    ],
    "paths": {
      "/pet": {
        "post": {
          "tags": [
            "pet"
          ],
          "summary": "Add a new pet to the store",
          "description": "",
          "operationId": "addPet",
          "responses": {
            "405": {
              "description": "Invalid input"
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "parameters": [
            {
              "description": "Pet object that needs to be added to the store",
              "required": true,
              "x-oldref": "#/components/requestBodies/Pet",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "photoUrls"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "category": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "xml": {
                      "name": "Category"
                    },
                    "x-oldref": "#/components/schemas/Category"
                  },
                  "name": {
                    "type": "string",
                    "example": "doggie"
                  },
                  "photoUrls": {
                    "type": "array",
                    "xml": {
                      "name": "photoUrl",
                      "wrapped": true
                    },
                    "items": {
                      "type": "string"
                    }
                  },
                  "tags": {
                    "type": "array",
                    "xml": {
                      "name": "tag",
                      "wrapped": true
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "xml": {
                        "name": "Tag"
                      },
                      "x-oldref": "#/components/schemas/Tag"
                    }
                  },
                  "status": {
                    "type": "string",
                    "description": "pet status in the store",
                    "enum": [
                      "available",
                      "pending",
                      "sold"
                    ]
                  }
                },
                "xml": {
                  "name": "Pet"
                },
                "x-oldref": "#/components/schemas/Pet"
              }
            }
          ]
        },
        "put": {
          "tags": [
            "pet"
          ],
          "summary": "Update an existing pet",
          "description": "",
          "operationId": "updatePet",
          "responses": {
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Pet not found"
            },
            "405": {
              "description": "Validation exception"
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "parameters": [
            {
              "description": "Pet object that needs to be added to the store",
              "required": true,
              "x-oldref": "#/components/requestBodies/Pet",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "photoUrls"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "category": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "xml": {
                      "name": "Category"
                    },
                    "x-oldref": "#/components/schemas/Category"
                  },
                  "name": {
                    "type": "string",
                    "example": "doggie"
                  },
                  "photoUrls": {
                    "type": "array",
                    "xml": {
                      "name": "photoUrl",
                      "wrapped": true
                    },
                    "items": {
                      "type": "string"
                    }
                  },
                  "tags": {
                    "type": "array",
                    "xml": {
                      "name": "tag",
                      "wrapped": true
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "xml": {
                        "name": "Tag"
                      },
                      "x-oldref": "#/components/schemas/Tag"
                    }
                  },
                  "status": {
                    "type": "string",
                    "description": "pet status in the store",
                    "enum": [
                      "available",
                      "pending",
                      "sold"
                    ]
                  }
                },
                "xml": {
                  "name": "Pet"
                },
                "x-oldref": "#/components/schemas/Pet"
              }
            }
          ]
        }
      },
      "/pet/findByStatus": {
        "get": {
          "tags": [
            "pet"
          ],
          "summary": "Finds Pets by status",
          "description": "Multiple status values can be provided with comma separated strings",
          "operationId": "findPetsByStatus",
          "parameters": [
            {
              "name": "status",
              "in": "query",
              "description": "Status values that need to be considered for filter",
              "required": true,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "available",
                  "pending",
                  "sold"
                ],
                "default": "available"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "name",
                    "photoUrls"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "category": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "xml": {
                        "name": "Category"
                      },
                      "x-oldref": "#/components/schemas/Category"
                    },
                    "name": {
                      "type": "string",
                      "example": "doggie"
                    },
                    "photoUrls": {
                      "type": "array",
                      "xml": {
                        "name": "photoUrl",
                        "wrapped": true
                      },
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "xml": {
                        "name": "tag",
                        "wrapped": true
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "xml": {
                          "name": "Tag"
                        },
                        "x-oldref": "#/components/schemas/Tag"
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "pet status in the store",
                      "enum": [
                        "available",
                        "pending",
                        "sold"
                      ]
                    }
                  },
                  "xml": {
                    "name": "Pet"
                  },
                  "x-oldref": "#/components/schemas/Pet"
                }
              }
            },
            "400": {
              "description": "Invalid status value"
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ]
        }
      },
      "/pet/findByTags": {
        "get": {
          "tags": [
            "pet"
          ],
          "summary": "Finds Pets by tags",
          "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
          "operationId": "findPetsByTags",
          "parameters": [
            {
              "name": "tags",
              "in": "query",
              "description": "Tags to filter by",
              "required": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "name",
                    "photoUrls"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "category": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "xml": {
                        "name": "Category"
                      },
                      "x-oldref": "#/components/schemas/Category"
                    },
                    "name": {
                      "type": "string",
                      "example": "doggie"
                    },
                    "photoUrls": {
                      "type": "array",
                      "xml": {
                        "name": "photoUrl",
                        "wrapped": true
                      },
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "xml": {
                        "name": "tag",
                        "wrapped": true
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "xml": {
                          "name": "Tag"
                        },
                        "x-oldref": "#/components/schemas/Tag"
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "pet status in the store",
                      "enum": [
                        "available",
                        "pending",
                        "sold"
                      ]
                    }
                  },
                  "xml": {
                    "name": "Pet"
                  },
                  "x-oldref": "#/components/schemas/Pet"
                }
              }
            },
            "400": {
              "description": "Invalid tag value"
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "deprecated": true
        }
      },
      "/pet/{petId}": {
        "get": {
          "tags": [
            "pet"
          ],
          "summary": "Find pet by ID",
          "description": "Returns a single pet",
          "operationId": "getPetById",
          "parameters": [
            {
              "name": "petId",
              "in": "path",
              "description": "ID of pet to return",
              "required": true,
              "format": "int64",
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "photoUrls"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "category": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "xml": {
                      "name": "Category"
                    },
                    "x-oldref": "#/components/schemas/Category"
                  },
                  "name": {
                    "type": "string",
                    "example": "doggie"
                  },
                  "photoUrls": {
                    "type": "array",
                    "xml": {
                      "name": "photoUrl",
                      "wrapped": true
                    },
                    "items": {
                      "type": "string"
                    }
                  },
                  "tags": {
                    "type": "array",
                    "xml": {
                      "name": "tag",
                      "wrapped": true
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "xml": {
                        "name": "Tag"
                      },
                      "x-oldref": "#/components/schemas/Tag"
                    }
                  },
                  "status": {
                    "type": "string",
                    "description": "pet status in the store",
                    "enum": [
                      "available",
                      "pending",
                      "sold"
                    ]
                  }
                },
                "xml": {
                  "name": "Pet"
                },
                "x-oldref": "#/components/schemas/Pet"
              }
            },
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Pet not found"
            }
          },
          "security": [
            {
              "api_key": []
            }
          ]
        },
        "post": {
          "tags": [
            "pet"
          ],
          "summary": "Updates a pet in the store with form data",
          "description": "",
          "operationId": "updatePetWithForm",
          "parameters": [
            {
              "name": "petId",
              "in": "path",
              "description": "ID of pet that needs to be updated",
              "required": true,
              "format": "int64",
              "type": "integer"
            },
            {
              "description": "Updated name of the pet",
              "type": "string",
              "name": "name",
              "in": "formData"
            },
            {
              "description": "Updated status of the pet",
              "type": "string",
              "name": "status",
              "in": "formData"
            }
          ],
          "responses": {
            "405": {
              "description": "Invalid input"
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "pet"
          ],
          "summary": "Deletes a pet",
          "description": "",
          "operationId": "deletePet",
          "parameters": [
            {
              "name": "api_key",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "petId",
              "in": "path",
              "description": "Pet id to delete",
              "required": true,
              "format": "int64",
              "type": "integer"
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Pet not found"
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ]
        }
      },
      "/pet/{petId}/uploadImage": {
        "post": {
          "tags": [
            "pet"
          ],
          "summary": "uploads an image",
          "description": "",
          "operationId": "uploadFile",
          "parameters": [
            {
              "name": "petId",
              "in": "path",
              "description": "ID of pet to update",
              "required": true,
              "format": "int64",
              "type": "integer"
            },
            {
              "name": "body",
              "in": "formData",
              "type": "file"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "type": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  }
                },
                "x-oldref": "#/components/schemas/ApiResponse"
              }
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ]
        }
      },
      "/store/inventory": {
        "get": {
          "tags": [
            "store"
          ],
          "summary": "Returns pet inventories by status",
          "description": "Returns a map of status codes to quantities",
          "operationId": "getInventory",
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "security": [
            {
              "api_key": []
            }
          ],
          "parameters": []
        }
      },
      "/store/order": {
        "post": {
          "tags": [
            "store"
          ],
          "summary": "Place an order for a pet",
          "description": "",
          "operationId": "placeOrder",
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "petId": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "quantity": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "shipDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status": {
                    "type": "string",
                    "description": "Order Status",
                    "enum": [
                      "placed",
                      "approved",
                      "delivered"
                    ]
                  },
                  "complete": {
                    "type": "boolean",
                    "default": false
                  }
                },
                "xml": {
                  "name": "Order"
                },
                "x-oldref": "#/components/schemas/Order"
              }
            },
            "400": {
              "description": "Invalid Order"
            }
          },
          "parameters": [
            {
              "description": "order placed for purchasing the pet",
              "required": true,
              "name": "body",
              "in": "body",
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "petId": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "quantity": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "shipDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status": {
                    "type": "string",
                    "description": "Order Status",
                    "enum": [
                      "placed",
                      "approved",
                      "delivered"
                    ]
                  },
                  "complete": {
                    "type": "boolean",
                    "default": false
                  }
                },
                "xml": {
                  "name": "Order"
                },
                "x-oldref": "#/components/schemas/Order"
              }
            }
          ]
        }
      },
      "/store/order/{orderId}": {
        "get": {
          "tags": [
            "store"
          ],
          "summary": "Find purchase order by ID",
          "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
          "operationId": "getOrderById",
          "parameters": [
            {
              "name": "orderId",
              "in": "path",
              "description": "ID of pet that needs to be fetched",
              "required": true,
              "format": "int64",
              "minimum": 1,
              "maximum": 10,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "petId": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "quantity": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "shipDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status": {
                    "type": "string",
                    "description": "Order Status",
                    "enum": [
                      "placed",
                      "approved",
                      "delivered"
                    ]
                  },
                  "complete": {
                    "type": "boolean",
                    "default": false
                  }
                },
                "xml": {
                  "name": "Order"
                },
                "x-oldref": "#/components/schemas/Order"
              }
            },
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Order not found"
            }
          }
        },
        "delete": {
          "tags": [
            "store"
          ],
          "summary": "Delete purchase order by ID",
          "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
          "operationId": "deleteOrder",
          "parameters": [
            {
              "name": "orderId",
              "in": "path",
              "description": "ID of the order that needs to be deleted",
              "required": true,
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Order not found"
            }
          }
        }
      },
      "/user": {
        "post": {
          "tags": [
            "user"
          ],
          "summary": "Create user",
          "description": "This can only be done by the logged in user.",
          "operationId": "createUser",
          "responses": {
            "default": {
              "description": "successful operation"
            }
          },
          "parameters": [
            {
              "description": "Created user object",
              "required": true,
              "name": "body",
              "in": "body",
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "username": {
                    "type": "string"
                  },
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "userStatus": {
                    "type": "integer",
                    "format": "int32",
                    "description": "User Status"
                  }
                },
                "xml": {
                  "name": "User"
                },
                "x-oldref": "#/components/schemas/User"
              }
            }
          ]
        }
      },
      "/user/createWithArray": {
        "post": {
          "tags": [
            "user"
          ],
          "summary": "Creates list of users with given input array",
          "description": "",
          "operationId": "createUsersWithArrayInput",
          "responses": {
            "default": {
              "description": "successful operation"
            }
          },
          "parameters": [
            {
              "description": "List of user object",
              "required": true,
              "x-oldref": "#/components/requestBodies/UserArray",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "username": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    },
                    "phone": {
                      "type": "string"
                    },
                    "userStatus": {
                      "type": "integer",
                      "format": "int32",
                      "description": "User Status"
                    }
                  },
                  "xml": {
                    "name": "User"
                  },
                  "x-oldref": "#/components/schemas/User"
                }
              }
            }
          ]
        }
      },
      "/user/createWithList": {
        "post": {
          "tags": [
            "user"
          ],
          "summary": "Creates list of users with given input array",
          "description": "",
          "operationId": "createUsersWithListInput",
          "responses": {
            "default": {
              "description": "successful operation"
            }
          },
          "parameters": [
            {
              "description": "List of user object",
              "required": true,
              "x-oldref": "#/components/requestBodies/UserArray",
              "name": "body",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "username": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    },
                    "phone": {
                      "type": "string"
                    },
                    "userStatus": {
                      "type": "integer",
                      "format": "int32",
                      "description": "User Status"
                    }
                  },
                  "xml": {
                    "name": "User"
                  },
                  "x-oldref": "#/components/schemas/User"
                }
              }
            }
          ]
        }
      },
      "/user/login": {
        "get": {
          "tags": [
            "user"
          ],
          "summary": "Logs user into the system",
          "description": "",
          "operationId": "loginUser",
          "parameters": [
            {
              "name": "username",
              "in": "query",
              "description": "The user name for login",
              "required": true,
              "type": "string"
            },
            {
              "name": "password",
              "in": "query",
              "description": "The password for login in clear text",
              "required": true,
              "format": "password",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "headers": {
                "X-Rate-Limit": {
                  "description": "calls per hour allowed by the user",
                  "format": "int32",
                  "type": "integer"
                },
                "X-Expires-After": {
                  "description": "date in UTC when token expires",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "schema": {
                "type": "string"
              }
            },
            "400": {
              "description": "Invalid username/password supplied"
            }
          }
        }
      },
      "/user/logout": {
        "get": {
          "tags": [
            "user"
          ],
          "summary": "Logs out current logged in user session",
          "description": "",
          "operationId": "logoutUser",
          "responses": {
            "default": {
              "description": "successful operation"
            }
          },
          "parameters": []
        }
      },
      "/user/{username}": {
        "get": {
          "tags": [
            "user"
          ],
          "summary": "Get user by user name",
          "description": "",
          "operationId": "getUserByName",
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "The name that needs to be fetched. Use user1 for testing. ",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "username": {
                    "type": "string"
                  },
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "userStatus": {
                    "type": "integer",
                    "format": "int32",
                    "description": "User Status"
                  }
                },
                "xml": {
                  "name": "User"
                },
                "x-oldref": "#/components/schemas/User"
              }
            },
            "400": {
              "description": "Invalid username supplied"
            },
            "404": {
              "description": "User not found"
            }
          }
        },
        "put": {
          "tags": [
            "user"
          ],
          "summary": "Updated user",
          "description": "This can only be done by the logged in user.",
          "operationId": "updateUser",
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "name that need to be updated",
              "required": true,
              "type": "string"
            },
            {
              "description": "Updated user object",
              "required": true,
              "name": "body",
              "in": "body",
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "username": {
                    "type": "string"
                  },
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "userStatus": {
                    "type": "integer",
                    "format": "int32",
                    "description": "User Status"
                  }
                },
                "xml": {
                  "name": "User"
                },
                "x-oldref": "#/components/schemas/User"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid user supplied"
            },
            "404": {
              "description": "User not found"
            }
          }
        },
        "delete": {
          "tags": [
            "user"
          ],
          "summary": "Delete user",
          "description": "This can only be done by the logged in user.",
          "operationId": "deleteUser",
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "The name that needs to be deleted",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid username supplied"
            },
            "404": {
              "description": "User not found"
            }
          }
        }
      }
    },
    "externalDocs": {
      "description": "Find out more about Swagger",
      "url": "http://swagger.io"
    },
    "swagger": "2.0",
    "schemes": [
      "http"
    ],
    "host": "petstore.swagger.io",
    "basePath": "/v2",
    "securityDefinitions": {
      "petstore_auth": {
        "type": "oauth2",
        "flow": "implicit",
        "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
        "scopes": {
          "write:pets": "modify pets in your account",
          "read:pets": "read your pets"
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    },
    "definitions": {
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "petId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ]
          },
          "complete": {
            "type": "boolean",
            "default": false
          }
        },
        "xml": {
          "name": "Order"
        },
        "x-oldref": "#/components/schemas/Order"
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Category"
        },
        "x-oldref": "#/components/schemas/Category"
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "type": "integer",
            "format": "int32",
            "description": "User Status"
          }
        },
        "xml": {
          "name": "User"
        },
        "x-oldref": "#/components/schemas/User"
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Tag"
        },
        "x-oldref": "#/components/schemas/Tag"
      },
      "Pet": {
        "type": "object",
        "required": [
          "name",
          "photoUrls"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "type": "string"
              }
            },
            "xml": {
              "name": "Category"
            },
            "x-oldref": "#/components/schemas/Category"
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true
            },
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true
            },
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "name": {
                  "type": "string"
                }
              },
              "xml": {
                "name": "Tag"
              },
              "x-oldref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        },
        "xml": {
          "name": "Pet"
        },
        "x-oldref": "#/components/schemas/Pet"
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "x-oldref": "#/components/schemas/ApiResponse"
      }
    },
    "x-components": {
      "requestBodies": {
        "Pet": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "photoUrls"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "category": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "xml": {
                      "name": "Category"
                    },
                    "x-oldref": "#/components/schemas/Category"
                  },
                  "name": {
                    "type": "string",
                    "example": "doggie"
                  },
                  "photoUrls": {
                    "type": "array",
                    "xml": {
                      "name": "photoUrl",
                      "wrapped": true
                    },
                    "items": {
                      "type": "string"
                    }
                  },
                  "tags": {
                    "type": "array",
                    "xml": {
                      "name": "tag",
                      "wrapped": true
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "xml": {
                        "name": "Tag"
                      },
                      "x-oldref": "#/components/schemas/Tag"
                    }
                  },
                  "status": {
                    "type": "string",
                    "description": "pet status in the store",
                    "enum": [
                      "available",
                      "pending",
                      "sold"
                    ]
                  }
                },
                "xml": {
                  "name": "Pet"
                },
                "x-oldref": "#/components/schemas/Pet"
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "photoUrls"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "category": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "xml": {
                      "name": "Category"
                    },
                    "x-oldref": "#/components/schemas/Category"
                  },
                  "name": {
                    "type": "string",
                    "example": "doggie"
                  },
                  "photoUrls": {
                    "type": "array",
                    "xml": {
                      "name": "photoUrl",
                      "wrapped": true
                    },
                    "items": {
                      "type": "string"
                    }
                  },
                  "tags": {
                    "type": "array",
                    "xml": {
                      "name": "tag",
                      "wrapped": true
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "xml": {
                        "name": "Tag"
                      },
                      "x-oldref": "#/components/schemas/Tag"
                    }
                  },
                  "status": {
                    "type": "string",
                    "description": "pet status in the store",
                    "enum": [
                      "available",
                      "pending",
                      "sold"
                    ]
                  }
                },
                "xml": {
                  "name": "Pet"
                },
                "x-oldref": "#/components/schemas/Pet"
              }
            }
          },
          "description": "Pet object that needs to be added to the store",
          "required": true,
          "x-oldref": "#/components/requestBodies/Pet"
        },
        "UserArray": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "username": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    },
                    "phone": {
                      "type": "string"
                    },
                    "userStatus": {
                      "type": "integer",
                      "format": "int32",
                      "description": "User Status"
                    }
                  },
                  "xml": {
                    "name": "User"
                  },
                  "x-oldref": "#/components/schemas/User"
                }
              }
            }
          },
          "description": "List of user object",
          "required": true,
          "x-oldref": "#/components/requestBodies/UserArray"
        }
      }
    }
  },
  "swagger-yaml": "x-origin:\n  - url: 'http://petstore.swagger.io/v2/swagger.json'\n    format: swagger\n    version: '2.0'\n    converter:\n      url: 'https://github.com/mermade/swagger2openapi'\n      version: 2.6.3\ninfo:\n  description: 'This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.'\n  version: 1.0.0\n  title: Swagger Petstore\n  termsOfService: 'http://swagger.io/terms/'\n  contact:\n    email: apiteam@swagger.io\n    url: 'https://swagger.io'\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: 'http://swagger.io'\n  - name: store\n    description: Access to Petstore orders\n  - name: user\n    description: Operations about user\n    externalDocs:\n      description: Find out more about our store\n      url: 'http://swagger.io'\npaths:\n  /pet:\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: ''\n      operationId: addPet\n      responses:\n        '405':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      parameters:\n        - description: Pet object that needs to be added to the store\n          required: true\n          x-oldref: '#/components/requestBodies/Pet'\n          name: body\n          in: body\n          schema:\n            type: object\n            required:\n              - name\n              - photoUrls\n            properties:\n              id:\n                type: integer\n                format: int64\n              category:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                    format: int64\n                  name:\n                    type: string\n                xml:\n                  name: Category\n                x-oldref: '#/components/schemas/Category'\n              name:\n                type: string\n                example: doggie\n              photoUrls:\n                type: array\n                xml:\n                  name: photoUrl\n                  wrapped: true\n                items:\n                  type: string\n              tags:\n                type: array\n                xml:\n                  name: tag\n                  wrapped: true\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: integer\n                      format: int64\n                    name:\n                      type: string\n                  xml:\n                    name: Tag\n                  x-oldref: '#/components/schemas/Tag'\n              status:\n                type: string\n                description: pet status in the store\n                enum:\n                  - available\n                  - pending\n                  - sold\n            xml:\n              name: Pet\n            x-oldref: '#/components/schemas/Pet'\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: ''\n      operationId: updatePet\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      parameters:\n        - description: Pet object that needs to be added to the store\n          required: true\n          x-oldref: '#/components/requestBodies/Pet'\n          name: body\n          in: body\n          schema:\n            type: object\n            required:\n              - name\n              - photoUrls\n            properties:\n              id:\n                type: integer\n                format: int64\n              category:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                    format: int64\n                  name:\n                    type: string\n                xml:\n                  name: Category\n                x-oldref: '#/components/schemas/Category'\n              name:\n                type: string\n                example: doggie\n              photoUrls:\n                type: array\n                xml:\n                  name: photoUrl\n                  wrapped: true\n                items:\n                  type: string\n              tags:\n                type: array\n                xml:\n                  name: tag\n                  wrapped: true\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: integer\n                      format: int64\n                    name:\n                      type: string\n                  xml:\n                    name: Tag\n                  x-oldref: '#/components/schemas/Tag'\n              status:\n                type: string\n                description: pet status in the store\n                enum:\n                  - available\n                  - pending\n                  - sold\n            xml:\n              name: Pet\n            x-oldref: '#/components/schemas/Pet'\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          type: array\n          items:\n            type: string\n            enum:\n              - available\n              - pending\n              - sold\n            default: available\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            type: array\n            items:\n              type: object\n              required:\n                - name\n                - photoUrls\n              properties:\n                id:\n                  type: integer\n                  format: int64\n                category:\n                  type: object\n                  properties:\n                    id:\n                      type: integer\n                      format: int64\n                    name:\n                      type: string\n                  xml:\n                    name: Category\n                  x-oldref: '#/components/schemas/Category'\n                name:\n                  type: string\n                  example: doggie\n                photoUrls:\n                  type: array\n                  xml:\n                    name: photoUrl\n                    wrapped: true\n                  items:\n                    type: string\n                tags:\n                  type: array\n                  xml:\n                    name: tag\n                    wrapped: true\n                  items:\n                    type: object\n                    properties:\n                      id:\n                        type: integer\n                        format: int64\n                      name:\n                        type: string\n                    xml:\n                      name: Tag\n                    x-oldref: '#/components/schemas/Tag'\n                status:\n                  type: string\n                  description: pet status in the store\n                  enum:\n                    - available\n                    - pending\n                    - sold\n              xml:\n                name: Pet\n              x-oldref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid status value\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: 'Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.'\n      operationId: findPetsByTags\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: true\n          type: array\n          items:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            type: array\n            items:\n              type: object\n              required:\n                - name\n                - photoUrls\n              properties:\n                id:\n                  type: integer\n                  format: int64\n                category:\n                  type: object\n                  properties:\n                    id:\n                      type: integer\n                      format: int64\n                    name:\n                      type: string\n                  xml:\n                    name: Category\n                  x-oldref: '#/components/schemas/Category'\n                name:\n                  type: string\n                  example: doggie\n                photoUrls:\n                  type: array\n                  xml:\n                    name: photoUrl\n                    wrapped: true\n                  items:\n                    type: string\n                tags:\n                  type: array\n                  xml:\n                    name: tag\n                    wrapped: true\n                  items:\n                    type: object\n                    properties:\n                      id:\n                        type: integer\n                        format: int64\n                      name:\n                        type: string\n                    xml:\n                      name: Tag\n                    x-oldref: '#/components/schemas/Tag'\n                status:\n                  type: string\n                  description: pet status in the store\n                  enum:\n                    - available\n                    - pending\n                    - sold\n              xml:\n                name: Pet\n              x-oldref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid tag value\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      deprecated: true\n  '/pet/{petId}':\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          format: int64\n          type: integer\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            type: object\n            required:\n              - name\n              - photoUrls\n            properties:\n              id:\n                type: integer\n                format: int64\n              category:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                    format: int64\n                  name:\n                    type: string\n                xml:\n                  name: Category\n                x-oldref: '#/components/schemas/Category'\n              name:\n                type: string\n                example: doggie\n              photoUrls:\n                type: array\n                xml:\n                  name: photoUrl\n                  wrapped: true\n                items:\n                  type: string\n              tags:\n                type: array\n                xml:\n                  name: tag\n                  wrapped: true\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: integer\n                      format: int64\n                    name:\n                      type: string\n                  xml:\n                    name: Tag\n                  x-oldref: '#/components/schemas/Tag'\n              status:\n                type: string\n                description: pet status in the store\n                enum:\n                  - available\n                  - pending\n                  - sold\n            xml:\n              name: Pet\n            x-oldref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n      security:\n        - api_key: []\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: ''\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          format: int64\n          type: integer\n        - description: Updated name of the pet\n          type: string\n          name: name\n          in: formData\n        - description: Updated status of the pet\n          type: string\n          name: status\n          in: formData\n      responses:\n        '405':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: ''\n      operationId: deletePet\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          format: int64\n          type: integer\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n  '/pet/{petId}/uploadImage':\n    post:\n      tags:\n        - pet\n      summary: uploads an image\n      description: ''\n      operationId: uploadFile\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to update\n          required: true\n          format: int64\n          type: integer\n        - name: body\n          in: formData\n          type: file\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            type: object\n            properties:\n              code:\n                type: integer\n                format: int32\n              type:\n                type: string\n              message:\n                type: string\n            x-oldref: '#/components/schemas/ApiResponse'\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            type: object\n            additionalProperties:\n              type: integer\n              format: int32\n      security:\n        - api_key: []\n      parameters: []\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: ''\n      operationId: placeOrder\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            type: object\n            properties:\n              id:\n                type: integer\n                format: int64\n              petId:\n                type: integer\n                format: int64\n              quantity:\n                type: integer\n                format: int32\n              shipDate:\n                type: string\n                format: date-time\n              status:\n                type: string\n                description: Order Status\n                enum:\n                  - placed\n                  - approved\n                  - delivered\n              complete:\n                type: boolean\n                default: false\n            xml:\n              name: Order\n            x-oldref: '#/components/schemas/Order'\n        '400':\n          description: Invalid Order\n      parameters:\n        - description: order placed for purchasing the pet\n          required: true\n          name: body\n          in: body\n          schema:\n            type: object\n            properties:\n              id:\n                type: integer\n                format: int64\n              petId:\n                type: integer\n                format: int64\n              quantity:\n                type: integer\n                format: int32\n              shipDate:\n                type: string\n                format: date-time\n              status:\n                type: string\n                description: Order Status\n                enum:\n                  - placed\n                  - approved\n                  - delivered\n              complete:\n                type: boolean\n                default: false\n            xml:\n              name: Order\n            x-oldref: '#/components/schemas/Order'\n  '/store/order/{orderId}':\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\n      operationId: getOrderById\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of pet that needs to be fetched\n          required: true\n          format: int64\n          minimum: 1\n          maximum: 10\n          type: integer\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            type: object\n            properties:\n              id:\n                type: integer\n                format: int64\n              petId:\n                type: integer\n                format: int64\n              quantity:\n                type: integer\n                format: int32\n              shipDate:\n                type: string\n                format: date-time\n              status:\n                type: string\n                description: Order Status\n                enum:\n                  - placed\n                  - approved\n                  - delivered\n              complete:\n                type: boolean\n                default: false\n            xml:\n              name: Order\n            x-oldref: '#/components/schemas/Order'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          format: int64\n          minimum: 1\n          type: integer\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      responses:\n        default:\n          description: successful operation\n      parameters:\n        - description: Created user object\n          required: true\n          name: body\n          in: body\n          schema:\n            type: object\n            properties:\n              id:\n                type: integer\n                format: int64\n              username:\n                type: string\n              firstName:\n                type: string\n              lastName:\n                type: string\n              email:\n                type: string\n              password:\n                type: string\n              phone:\n                type: string\n              userStatus:\n                type: integer\n                format: int32\n                description: User Status\n            xml:\n              name: User\n            x-oldref: '#/components/schemas/User'\n  /user/createWithArray:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: ''\n      operationId: createUsersWithArrayInput\n      responses:\n        default:\n          description: successful operation\n      parameters:\n        - description: List of user object\n          required: true\n          x-oldref: '#/components/requestBodies/UserArray'\n          name: body\n          in: body\n          schema:\n            type: array\n            items:\n              type: object\n              properties:\n                id:\n                  type: integer\n                  format: int64\n                username:\n                  type: string\n                firstName:\n                  type: string\n                lastName:\n                  type: string\n                email:\n                  type: string\n                password:\n                  type: string\n                phone:\n                  type: string\n                userStatus:\n                  type: integer\n                  format: int32\n                  description: User Status\n              xml:\n                name: User\n              x-oldref: '#/components/schemas/User'\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: ''\n      operationId: createUsersWithListInput\n      responses:\n        default:\n          description: successful operation\n      parameters:\n        - description: List of user object\n          required: true\n          x-oldref: '#/components/requestBodies/UserArray'\n          name: body\n          in: body\n          schema:\n            type: array\n            items:\n              type: object\n              properties:\n                id:\n                  type: integer\n                  format: int64\n                username:\n                  type: string\n                firstName:\n                  type: string\n                lastName:\n                  type: string\n                email:\n                  type: string\n                password:\n                  type: string\n                phone:\n                  type: string\n                userStatus:\n                  type: integer\n                  format: int32\n                  description: User Status\n              xml:\n                name: User\n              x-oldref: '#/components/schemas/User'\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: ''\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          format: password\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              format: int32\n              type: integer\n            X-Expires-After:\n              description: date in UTC when token expires\n              format: date-time\n              type: string\n          schema:\n            type: string\n        '400':\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: ''\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n      parameters: []\n  '/user/{username}':\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: ''\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: 'The name that needs to be fetched. Use user1 for testing. '\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            type: object\n            properties:\n              id:\n                type: integer\n                format: int64\n              username:\n                type: string\n              firstName:\n                type: string\n              lastName:\n                type: string\n              email:\n                type: string\n              password:\n                type: string\n              phone:\n                type: string\n              userStatus:\n                type: integer\n                format: int32\n                description: User Status\n            xml:\n              name: User\n            x-oldref: '#/components/schemas/User'\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be updated\n          required: true\n          type: string\n        - description: Updated user object\n          required: true\n          name: body\n          in: body\n          schema:\n            type: object\n            properties:\n              id:\n                type: integer\n                format: int64\n              username:\n                type: string\n              firstName:\n                type: string\n              lastName:\n                type: string\n              email:\n                type: string\n              password:\n                type: string\n              phone:\n                type: string\n              userStatus:\n                type: integer\n                format: int32\n                description: User Status\n            xml:\n              name: User\n            x-oldref: '#/components/schemas/User'\n      responses:\n        '400':\n          description: Invalid user supplied\n        '404':\n          description: User not found\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          type: string\n      responses:\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\nexternalDocs:\n  description: Find out more about Swagger\n  url: 'http://swagger.io'\nswagger: '2.0'\nschemes:\n  - http\nhost: petstore.swagger.io\nbasePath: /v2\nsecurityDefinitions:\n  petstore_auth:\n    type: oauth2\n    flow: implicit\n    authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'\n    scopes:\n      'write:pets': modify pets in your account\n      'read:pets': read your pets\n  api_key:\n    type: apiKey\n    name: api_key\n    in: header\ndefinitions:\n  Order:\n    type: object\n    properties:\n      id:\n        type: integer\n        format: int64\n      petId:\n        type: integer\n        format: int64\n      quantity:\n        type: integer\n        format: int32\n      shipDate:\n        type: string\n        format: date-time\n      status:\n        type: string\n        description: Order Status\n        enum:\n          - placed\n          - approved\n          - delivered\n      complete:\n        type: boolean\n        default: false\n    xml:\n      name: Order\n    x-oldref: '#/components/schemas/Order'\n  Category:\n    type: object\n    properties:\n      id:\n        type: integer\n        format: int64\n      name:\n        type: string\n    xml:\n      name: Category\n    x-oldref: '#/components/schemas/Category'\n  User:\n    type: object\n    properties:\n      id:\n        type: integer\n        format: int64\n      username:\n        type: string\n      firstName:\n        type: string\n      lastName:\n        type: string\n      email:\n        type: string\n      password:\n        type: string\n      phone:\n        type: string\n      userStatus:\n        type: integer\n        format: int32\n        description: User Status\n    xml:\n      name: User\n    x-oldref: '#/components/schemas/User'\n  Tag:\n    type: object\n    properties:\n      id:\n        type: integer\n        format: int64\n      name:\n        type: string\n    xml:\n      name: Tag\n    x-oldref: '#/components/schemas/Tag'\n  Pet:\n    type: object\n    required:\n      - name\n      - photoUrls\n    properties:\n      id:\n        type: integer\n        format: int64\n      category:\n        type: object\n        properties:\n          id:\n            type: integer\n            format: int64\n          name:\n            type: string\n        xml:\n          name: Category\n        x-oldref: '#/components/schemas/Category'\n      name:\n        type: string\n        example: doggie\n      photoUrls:\n        type: array\n        xml:\n          name: photoUrl\n          wrapped: true\n        items:\n          type: string\n      tags:\n        type: array\n        xml:\n          name: tag\n          wrapped: true\n        items:\n          type: object\n          properties:\n            id:\n              type: integer\n              format: int64\n            name:\n              type: string\n          xml:\n            name: Tag\n          x-oldref: '#/components/schemas/Tag'\n      status:\n        type: string\n        description: pet status in the store\n        enum:\n          - available\n          - pending\n          - sold\n    xml:\n      name: Pet\n    x-oldref: '#/components/schemas/Pet'\n  ApiResponse:\n    type: object\n    properties:\n      code:\n        type: integer\n        format: int32\n      type:\n        type: string\n      message:\n        type: string\n    x-oldref: '#/components/schemas/ApiResponse'\nx-components:\n  requestBodies:\n    Pet:\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - name\n              - photoUrls\n            properties:\n              id:\n                type: integer\n                format: int64\n              category:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                    format: int64\n                  name:\n                    type: string\n                xml:\n                  name: Category\n                x-oldref: '#/components/schemas/Category'\n              name:\n                type: string\n                example: doggie\n              photoUrls:\n                type: array\n                xml:\n                  name: photoUrl\n                  wrapped: true\n                items:\n                  type: string\n              tags:\n                type: array\n                xml:\n                  name: tag\n                  wrapped: true\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: integer\n                      format: int64\n                    name:\n                      type: string\n                  xml:\n                    name: Tag\n                  x-oldref: '#/components/schemas/Tag'\n              status:\n                type: string\n                description: pet status in the store\n                enum:\n                  - available\n                  - pending\n                  - sold\n            xml:\n              name: Pet\n            x-oldref: '#/components/schemas/Pet'\n        application/xml:\n          schema:\n            type: object\n            required:\n              - name\n              - photoUrls\n            properties:\n              id:\n                type: integer\n                format: int64\n              category:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                    format: int64\n                  name:\n                    type: string\n                xml:\n                  name: Category\n                x-oldref: '#/components/schemas/Category'\n              name:\n                type: string\n                example: doggie\n              photoUrls:\n                type: array\n                xml:\n                  name: photoUrl\n                  wrapped: true\n                items:\n                  type: string\n              tags:\n                type: array\n                xml:\n                  name: tag\n                  wrapped: true\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: integer\n                      format: int64\n                    name:\n                      type: string\n                  xml:\n                    name: Tag\n                  x-oldref: '#/components/schemas/Tag'\n              status:\n                type: string\n                description: pet status in the store\n                enum:\n                  - available\n                  - pending\n                  - sold\n            xml:\n              name: Pet\n            x-oldref: '#/components/schemas/Pet'\n      description: Pet object that needs to be added to the store\n      required: true\n      x-oldref: '#/components/requestBodies/Pet'\n    UserArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              type: object\n              properties:\n                id:\n                  type: integer\n                  format: int64\n                username:\n                  type: string\n                firstName:\n                  type: string\n                lastName:\n                  type: string\n                email:\n                  type: string\n                password:\n                  type: string\n                phone:\n                  type: string\n                userStatus:\n                  type: integer\n                  format: int32\n                  description: User Status\n              xml:\n                name: User\n              x-oldref: '#/components/schemas/User'\n      description: List of user object\n      required: true\n      x-oldref: '#/components/requestBodies/UserArray'\n",
  "swagger-json": "{\n  \"x-origin\": [\n    {\n      \"url\": \"http://petstore.swagger.io/v2/swagger.json\",\n      \"format\": \"swagger\",\n      \"version\": \"2.0\",\n      \"converter\": {\n        \"url\": \"https://github.com/mermade/swagger2openapi\",\n        \"version\": \"2.6.3\"\n      }\n    }\n  ],\n  \"info\": {\n    \"description\": \"This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\",\n    \"version\": \"1.0.0\",\n    \"title\": \"Swagger Petstore\",\n    \"termsOfService\": \"http://swagger.io/terms/\",\n    \"contact\": {\n      \"email\": \"apiteam@swagger.io\",\n      \"url\": \"https://swagger.io\"\n    },\n    \"license\": {\n      \"name\": \"Apache 2.0\",\n      \"url\": \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n    }\n  },\n  \"tags\": [\n    {\n      \"name\": \"pet\",\n      \"description\": \"Everything about your Pets\",\n      \"externalDocs\": {\n        \"description\": \"Find out more\",\n        \"url\": \"http://swagger.io\"\n      }\n    },\n    {\n      \"name\": \"store\",\n      \"description\": \"Access to Petstore orders\"\n    },\n    {\n      \"name\": \"user\",\n      \"description\": \"Operations about user\",\n      \"externalDocs\": {\n        \"description\": \"Find out more about our store\",\n        \"url\": \"http://swagger.io\"\n      }\n    }\n  ],\n  \"paths\": {\n    \"/pet\": {\n      \"post\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"Add a new pet to the store\",\n        \"description\": \"\",\n        \"operationId\": \"addPet\",\n        \"responses\": {\n          \"405\": {\n            \"description\": \"Invalid input\"\n          }\n        },\n        \"security\": [\n          {\n            \"petstore_auth\": [\n              \"write:pets\",\n              \"read:pets\"\n            ]\n          }\n        ],\n        \"parameters\": [\n          {\n            \"description\": \"Pet object that needs to be added to the store\",\n            \"required\": true,\n            \"x-oldref\": \"#/components/requestBodies/Pet\",\n            \"name\": \"body\",\n            \"in\": \"body\",\n            \"schema\": {\n              \"type\": \"object\",\n              \"required\": [\n                \"name\",\n                \"photoUrls\"\n              ],\n              \"properties\": {\n                \"id\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                },\n                \"category\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    },\n                    \"name\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"xml\": {\n                    \"name\": \"Category\"\n                  },\n                  \"x-oldref\": \"#/components/schemas/Category\"\n                },\n                \"name\": {\n                  \"type\": \"string\",\n                  \"example\": \"doggie\"\n                },\n                \"photoUrls\": {\n                  \"type\": \"array\",\n                  \"xml\": {\n                    \"name\": \"photoUrl\",\n                    \"wrapped\": true\n                  },\n                  \"items\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"tags\": {\n                  \"type\": \"array\",\n                  \"xml\": {\n                    \"name\": \"tag\",\n                    \"wrapped\": true\n                  },\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"id\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                      },\n                      \"name\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"xml\": {\n                      \"name\": \"Tag\"\n                    },\n                    \"x-oldref\": \"#/components/schemas/Tag\"\n                  }\n                },\n                \"status\": {\n                  \"type\": \"string\",\n                  \"description\": \"pet status in the store\",\n                  \"enum\": [\n                    \"available\",\n                    \"pending\",\n                    \"sold\"\n                  ]\n                }\n              },\n              \"xml\": {\n                \"name\": \"Pet\"\n              },\n              \"x-oldref\": \"#/components/schemas/Pet\"\n            }\n          }\n        ]\n      },\n      \"put\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"Update an existing pet\",\n        \"description\": \"\",\n        \"operationId\": \"updatePet\",\n        \"responses\": {\n          \"400\": {\n            \"description\": \"Invalid ID supplied\"\n          },\n          \"404\": {\n            \"description\": \"Pet not found\"\n          },\n          \"405\": {\n            \"description\": \"Validation exception\"\n          }\n        },\n        \"security\": [\n          {\n            \"petstore_auth\": [\n              \"write:pets\",\n              \"read:pets\"\n            ]\n          }\n        ],\n        \"parameters\": [\n          {\n            \"description\": \"Pet object that needs to be added to the store\",\n            \"required\": true,\n            \"x-oldref\": \"#/components/requestBodies/Pet\",\n            \"name\": \"body\",\n            \"in\": \"body\",\n            \"schema\": {\n              \"type\": \"object\",\n              \"required\": [\n                \"name\",\n                \"photoUrls\"\n              ],\n              \"properties\": {\n                \"id\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                },\n                \"category\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    },\n                    \"name\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"xml\": {\n                    \"name\": \"Category\"\n                  },\n                  \"x-oldref\": \"#/components/schemas/Category\"\n                },\n                \"name\": {\n                  \"type\": \"string\",\n                  \"example\": \"doggie\"\n                },\n                \"photoUrls\": {\n                  \"type\": \"array\",\n                  \"xml\": {\n                    \"name\": \"photoUrl\",\n                    \"wrapped\": true\n                  },\n                  \"items\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"tags\": {\n                  \"type\": \"array\",\n                  \"xml\": {\n                    \"name\": \"tag\",\n                    \"wrapped\": true\n                  },\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"id\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                      },\n                      \"name\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"xml\": {\n                      \"name\": \"Tag\"\n                    },\n                    \"x-oldref\": \"#/components/schemas/Tag\"\n                  }\n                },\n                \"status\": {\n                  \"type\": \"string\",\n                  \"description\": \"pet status in the store\",\n                  \"enum\": [\n                    \"available\",\n                    \"pending\",\n                    \"sold\"\n                  ]\n                }\n              },\n              \"xml\": {\n                \"name\": \"Pet\"\n              },\n              \"x-oldref\": \"#/components/schemas/Pet\"\n            }\n          }\n        ]\n      }\n    },\n    \"/pet/findByStatus\": {\n      \"get\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"Finds Pets by status\",\n        \"description\": \"Multiple status values can be provided with comma separated strings\",\n        \"operationId\": \"findPetsByStatus\",\n        \"parameters\": [\n          {\n            \"name\": \"status\",\n            \"in\": \"query\",\n            \"description\": \"Status values that need to be considered for filter\",\n            \"required\": true,\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\",\n              \"enum\": [\n                \"available\",\n                \"pending\",\n                \"sold\"\n              ],\n              \"default\": \"available\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [\n                  \"name\",\n                  \"photoUrls\"\n                ],\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                  },\n                  \"category\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"id\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                      },\n                      \"name\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"xml\": {\n                      \"name\": \"Category\"\n                    },\n                    \"x-oldref\": \"#/components/schemas/Category\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\",\n                    \"example\": \"doggie\"\n                  },\n                  \"photoUrls\": {\n                    \"type\": \"array\",\n                    \"xml\": {\n                      \"name\": \"photoUrl\",\n                      \"wrapped\": true\n                    },\n                    \"items\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"tags\": {\n                    \"type\": \"array\",\n                    \"xml\": {\n                      \"name\": \"tag\",\n                      \"wrapped\": true\n                    },\n                    \"items\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"id\": {\n                          \"type\": \"integer\",\n                          \"format\": \"int64\"\n                        },\n                        \"name\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"xml\": {\n                        \"name\": \"Tag\"\n                      },\n                      \"x-oldref\": \"#/components/schemas/Tag\"\n                    }\n                  },\n                  \"status\": {\n                    \"type\": \"string\",\n                    \"description\": \"pet status in the store\",\n                    \"enum\": [\n                      \"available\",\n                      \"pending\",\n                      \"sold\"\n                    ]\n                  }\n                },\n                \"xml\": {\n                  \"name\": \"Pet\"\n                },\n                \"x-oldref\": \"#/components/schemas/Pet\"\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid status value\"\n          }\n        },\n        \"security\": [\n          {\n            \"petstore_auth\": [\n              \"write:pets\",\n              \"read:pets\"\n            ]\n          }\n        ]\n      }\n    },\n    \"/pet/findByTags\": {\n      \"get\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"Finds Pets by tags\",\n        \"description\": \"Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\",\n        \"operationId\": \"findPetsByTags\",\n        \"parameters\": [\n          {\n            \"name\": \"tags\",\n            \"in\": \"query\",\n            \"description\": \"Tags to filter by\",\n            \"required\": true,\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [\n                  \"name\",\n                  \"photoUrls\"\n                ],\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                  },\n                  \"category\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"id\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                      },\n                      \"name\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"xml\": {\n                      \"name\": \"Category\"\n                    },\n                    \"x-oldref\": \"#/components/schemas/Category\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\",\n                    \"example\": \"doggie\"\n                  },\n                  \"photoUrls\": {\n                    \"type\": \"array\",\n                    \"xml\": {\n                      \"name\": \"photoUrl\",\n                      \"wrapped\": true\n                    },\n                    \"items\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"tags\": {\n                    \"type\": \"array\",\n                    \"xml\": {\n                      \"name\": \"tag\",\n                      \"wrapped\": true\n                    },\n                    \"items\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"id\": {\n                          \"type\": \"integer\",\n                          \"format\": \"int64\"\n                        },\n                        \"name\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"xml\": {\n                        \"name\": \"Tag\"\n                      },\n                      \"x-oldref\": \"#/components/schemas/Tag\"\n                    }\n                  },\n                  \"status\": {\n                    \"type\": \"string\",\n                    \"description\": \"pet status in the store\",\n                    \"enum\": [\n                      \"available\",\n                      \"pending\",\n                      \"sold\"\n                    ]\n                  }\n                },\n                \"xml\": {\n                  \"name\": \"Pet\"\n                },\n                \"x-oldref\": \"#/components/schemas/Pet\"\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid tag value\"\n          }\n        },\n        \"security\": [\n          {\n            \"petstore_auth\": [\n              \"write:pets\",\n              \"read:pets\"\n            ]\n          }\n        ],\n        \"deprecated\": true\n      }\n    },\n    \"/pet/{petId}\": {\n      \"get\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"Find pet by ID\",\n        \"description\": \"Returns a single pet\",\n        \"operationId\": \"getPetById\",\n        \"parameters\": [\n          {\n            \"name\": \"petId\",\n            \"in\": \"path\",\n            \"description\": \"ID of pet to return\",\n            \"required\": true,\n            \"format\": \"int64\",\n            \"type\": \"integer\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"schema\": {\n              \"type\": \"object\",\n              \"required\": [\n                \"name\",\n                \"photoUrls\"\n              ],\n              \"properties\": {\n                \"id\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                },\n                \"category\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    },\n                    \"name\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"xml\": {\n                    \"name\": \"Category\"\n                  },\n                  \"x-oldref\": \"#/components/schemas/Category\"\n                },\n                \"name\": {\n                  \"type\": \"string\",\n                  \"example\": \"doggie\"\n                },\n                \"photoUrls\": {\n                  \"type\": \"array\",\n                  \"xml\": {\n                    \"name\": \"photoUrl\",\n                    \"wrapped\": true\n                  },\n                  \"items\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"tags\": {\n                  \"type\": \"array\",\n                  \"xml\": {\n                    \"name\": \"tag\",\n                    \"wrapped\": true\n                  },\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"id\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                      },\n                      \"name\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"xml\": {\n                      \"name\": \"Tag\"\n                    },\n                    \"x-oldref\": \"#/components/schemas/Tag\"\n                  }\n                },\n                \"status\": {\n                  \"type\": \"string\",\n                  \"description\": \"pet status in the store\",\n                  \"enum\": [\n                    \"available\",\n                    \"pending\",\n                    \"sold\"\n                  ]\n                }\n              },\n              \"xml\": {\n                \"name\": \"Pet\"\n              },\n              \"x-oldref\": \"#/components/schemas/Pet\"\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid ID supplied\"\n          },\n          \"404\": {\n            \"description\": \"Pet not found\"\n          }\n        },\n        \"security\": [\n          {\n            \"api_key\": []\n          }\n        ]\n      },\n      \"post\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"Updates a pet in the store with form data\",\n        \"description\": \"\",\n        \"operationId\": \"updatePetWithForm\",\n        \"parameters\": [\n          {\n            \"name\": \"petId\",\n            \"in\": \"path\",\n            \"description\": \"ID of pet that needs to be updated\",\n            \"required\": true,\n            \"format\": \"int64\",\n            \"type\": \"integer\"\n          },\n          {\n            \"description\": \"Updated name of the pet\",\n            \"type\": \"string\",\n            \"name\": \"name\",\n            \"in\": \"formData\"\n          },\n          {\n            \"description\": \"Updated status of the pet\",\n            \"type\": \"string\",\n            \"name\": \"status\",\n            \"in\": \"formData\"\n          }\n        ],\n        \"responses\": {\n          \"405\": {\n            \"description\": \"Invalid input\"\n          }\n        },\n        \"security\": [\n          {\n            \"petstore_auth\": [\n              \"write:pets\",\n              \"read:pets\"\n            ]\n          }\n        ]\n      },\n      \"delete\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"Deletes a pet\",\n        \"description\": \"\",\n        \"operationId\": \"deletePet\",\n        \"parameters\": [\n          {\n            \"name\": \"api_key\",\n            \"in\": \"header\",\n            \"required\": false,\n            \"type\": \"string\"\n          },\n          {\n            \"name\": \"petId\",\n            \"in\": \"path\",\n            \"description\": \"Pet id to delete\",\n            \"required\": true,\n            \"format\": \"int64\",\n            \"type\": \"integer\"\n          }\n        ],\n        \"responses\": {\n          \"400\": {\n            \"description\": \"Invalid ID supplied\"\n          },\n          \"404\": {\n            \"description\": \"Pet not found\"\n          }\n        },\n        \"security\": [\n          {\n            \"petstore_auth\": [\n              \"write:pets\",\n              \"read:pets\"\n            ]\n          }\n        ]\n      }\n    },\n    \"/pet/{petId}/uploadImage\": {\n      \"post\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"uploads an image\",\n        \"description\": \"\",\n        \"operationId\": \"uploadFile\",\n        \"parameters\": [\n          {\n            \"name\": \"petId\",\n            \"in\": \"path\",\n            \"description\": \"ID of pet to update\",\n            \"required\": true,\n            \"format\": \"int64\",\n            \"type\": \"integer\"\n          },\n          {\n            \"name\": \"body\",\n            \"in\": \"formData\",\n            \"type\": \"file\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"code\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int32\"\n                },\n                \"type\": {\n                  \"type\": \"string\"\n                },\n                \"message\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"x-oldref\": \"#/components/schemas/ApiResponse\"\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"petstore_auth\": [\n              \"write:pets\",\n              \"read:pets\"\n            ]\n          }\n        ]\n      }\n    },\n    \"/store/inventory\": {\n      \"get\": {\n        \"tags\": [\n          \"store\"\n        ],\n        \"summary\": \"Returns pet inventories by status\",\n        \"description\": \"Returns a map of status codes to quantities\",\n        \"operationId\": \"getInventory\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"schema\": {\n              \"type\": \"object\",\n              \"additionalProperties\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"api_key\": []\n          }\n        ],\n        \"parameters\": []\n      }\n    },\n    \"/store/order\": {\n      \"post\": {\n        \"tags\": [\n          \"store\"\n        ],\n        \"summary\": \"Place an order for a pet\",\n        \"description\": \"\",\n        \"operationId\": \"placeOrder\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"id\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                },\n                \"petId\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                },\n                \"quantity\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int32\"\n                },\n                \"shipDate\": {\n                  \"type\": \"string\",\n                  \"format\": \"date-time\"\n                },\n                \"status\": {\n                  \"type\": \"string\",\n                  \"description\": \"Order Status\",\n                  \"enum\": [\n                    \"placed\",\n                    \"approved\",\n                    \"delivered\"\n                  ]\n                },\n                \"complete\": {\n                  \"type\": \"boolean\",\n                  \"default\": false\n                }\n              },\n              \"xml\": {\n                \"name\": \"Order\"\n              },\n              \"x-oldref\": \"#/components/schemas/Order\"\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid Order\"\n          }\n        },\n        \"parameters\": [\n          {\n            \"description\": \"order placed for purchasing the pet\",\n            \"required\": true,\n            \"name\": \"body\",\n            \"in\": \"body\",\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"id\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                },\n                \"petId\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                },\n                \"quantity\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int32\"\n                },\n                \"shipDate\": {\n                  \"type\": \"string\",\n                  \"format\": \"date-time\"\n                },\n                \"status\": {\n                  \"type\": \"string\",\n                  \"description\": \"Order Status\",\n                  \"enum\": [\n                    \"placed\",\n                    \"approved\",\n                    \"delivered\"\n                  ]\n                },\n                \"complete\": {\n                  \"type\": \"boolean\",\n                  \"default\": false\n                }\n              },\n              \"xml\": {\n                \"name\": \"Order\"\n              },\n              \"x-oldref\": \"#/components/schemas/Order\"\n            }\n          }\n        ]\n      }\n    },\n    \"/store/order/{orderId}\": {\n      \"get\": {\n        \"tags\": [\n          \"store\"\n        ],\n        \"summary\": \"Find purchase order by ID\",\n        \"description\": \"For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\",\n        \"operationId\": \"getOrderById\",\n        \"parameters\": [\n          {\n            \"name\": \"orderId\",\n            \"in\": \"path\",\n            \"description\": \"ID of pet that needs to be fetched\",\n            \"required\": true,\n            \"format\": \"int64\",\n            \"minimum\": 1,\n            \"maximum\": 10,\n            \"type\": \"integer\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"id\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                },\n                \"petId\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                },\n                \"quantity\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int32\"\n                },\n                \"shipDate\": {\n                  \"type\": \"string\",\n                  \"format\": \"date-time\"\n                },\n                \"status\": {\n                  \"type\": \"string\",\n                  \"description\": \"Order Status\",\n                  \"enum\": [\n                    \"placed\",\n                    \"approved\",\n                    \"delivered\"\n                  ]\n                },\n                \"complete\": {\n                  \"type\": \"boolean\",\n                  \"default\": false\n                }\n              },\n              \"xml\": {\n                \"name\": \"Order\"\n              },\n              \"x-oldref\": \"#/components/schemas/Order\"\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid ID supplied\"\n          },\n          \"404\": {\n            \"description\": \"Order not found\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"store\"\n        ],\n        \"summary\": \"Delete purchase order by ID\",\n        \"description\": \"For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\",\n        \"operationId\": \"deleteOrder\",\n        \"parameters\": [\n          {\n            \"name\": \"orderId\",\n            \"in\": \"path\",\n            \"description\": \"ID of the order that needs to be deleted\",\n            \"required\": true,\n            \"format\": \"int64\",\n            \"minimum\": 1,\n            \"type\": \"integer\"\n          }\n        ],\n        \"responses\": {\n          \"400\": {\n            \"description\": \"Invalid ID supplied\"\n          },\n          \"404\": {\n            \"description\": \"Order not found\"\n          }\n        }\n      }\n    },\n    \"/user\": {\n      \"post\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Create user\",\n        \"description\": \"This can only be done by the logged in user.\",\n        \"operationId\": \"createUser\",\n        \"responses\": {\n          \"default\": {\n            \"description\": \"successful operation\"\n          }\n        },\n        \"parameters\": [\n          {\n            \"description\": \"Created user object\",\n            \"required\": true,\n            \"name\": \"body\",\n            \"in\": \"body\",\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"id\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                },\n                \"username\": {\n                  \"type\": \"string\"\n                },\n                \"firstName\": {\n                  \"type\": \"string\"\n                },\n                \"lastName\": {\n                  \"type\": \"string\"\n                },\n                \"email\": {\n                  \"type\": \"string\"\n                },\n                \"password\": {\n                  \"type\": \"string\"\n                },\n                \"phone\": {\n                  \"type\": \"string\"\n                },\n                \"userStatus\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int32\",\n                  \"description\": \"User Status\"\n                }\n              },\n              \"xml\": {\n                \"name\": \"User\"\n              },\n              \"x-oldref\": \"#/components/schemas/User\"\n            }\n          }\n        ]\n      }\n    },\n    \"/user/createWithArray\": {\n      \"post\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Creates list of users with given input array\",\n        \"description\": \"\",\n        \"operationId\": \"createUsersWithArrayInput\",\n        \"responses\": {\n          \"default\": {\n            \"description\": \"successful operation\"\n          }\n        },\n        \"parameters\": [\n          {\n            \"description\": \"List of user object\",\n            \"required\": true,\n            \"x-oldref\": \"#/components/requestBodies/UserArray\",\n            \"name\": \"body\",\n            \"in\": \"body\",\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                  },\n                  \"username\": {\n                    \"type\": \"string\"\n                  },\n                  \"firstName\": {\n                    \"type\": \"string\"\n                  },\n                  \"lastName\": {\n                    \"type\": \"string\"\n                  },\n                  \"email\": {\n                    \"type\": \"string\"\n                  },\n                  \"password\": {\n                    \"type\": \"string\"\n                  },\n                  \"phone\": {\n                    \"type\": \"string\"\n                  },\n                  \"userStatus\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\",\n                    \"description\": \"User Status\"\n                  }\n                },\n                \"xml\": {\n                  \"name\": \"User\"\n                },\n                \"x-oldref\": \"#/components/schemas/User\"\n              }\n            }\n          }\n        ]\n      }\n    },\n    \"/user/createWithList\": {\n      \"post\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Creates list of users with given input array\",\n        \"description\": \"\",\n        \"operationId\": \"createUsersWithListInput\",\n        \"responses\": {\n          \"default\": {\n            \"description\": \"successful operation\"\n          }\n        },\n        \"parameters\": [\n          {\n            \"description\": \"List of user object\",\n            \"required\": true,\n            \"x-oldref\": \"#/components/requestBodies/UserArray\",\n            \"name\": \"body\",\n            \"in\": \"body\",\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                  },\n                  \"username\": {\n                    \"type\": \"string\"\n                  },\n                  \"firstName\": {\n                    \"type\": \"string\"\n                  },\n                  \"lastName\": {\n                    \"type\": \"string\"\n                  },\n                  \"email\": {\n                    \"type\": \"string\"\n                  },\n                  \"password\": {\n                    \"type\": \"string\"\n                  },\n                  \"phone\": {\n                    \"type\": \"string\"\n                  },\n                  \"userStatus\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\",\n                    \"description\": \"User Status\"\n                  }\n                },\n                \"xml\": {\n                  \"name\": \"User\"\n                },\n                \"x-oldref\": \"#/components/schemas/User\"\n              }\n            }\n          }\n        ]\n      }\n    },\n    \"/user/login\": {\n      \"get\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Logs user into the system\",\n        \"description\": \"\",\n        \"operationId\": \"loginUser\",\n        \"parameters\": [\n          {\n            \"name\": \"username\",\n            \"in\": \"query\",\n            \"description\": \"The user name for login\",\n            \"required\": true,\n            \"type\": \"string\"\n          },\n          {\n            \"name\": \"password\",\n            \"in\": \"query\",\n            \"description\": \"The password for login in clear text\",\n            \"required\": true,\n            \"format\": \"password\",\n            \"type\": \"string\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"headers\": {\n              \"X-Rate-Limit\": {\n                \"description\": \"calls per hour allowed by the user\",\n                \"format\": \"int32\",\n                \"type\": \"integer\"\n              },\n              \"X-Expires-After\": {\n                \"description\": \"date in UTC when token expires\",\n                \"format\": \"date-time\",\n                \"type\": \"string\"\n              }\n            },\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid username/password supplied\"\n          }\n        }\n      }\n    },\n    \"/user/logout\": {\n      \"get\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Logs out current logged in user session\",\n        \"description\": \"\",\n        \"operationId\": \"logoutUser\",\n        \"responses\": {\n          \"default\": {\n            \"description\": \"successful operation\"\n          }\n        },\n        \"parameters\": []\n      }\n    },\n    \"/user/{username}\": {\n      \"get\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Get user by user name\",\n        \"description\": \"\",\n        \"operationId\": \"getUserByName\",\n        \"parameters\": [\n          {\n            \"name\": \"username\",\n            \"in\": \"path\",\n            \"description\": \"The name that needs to be fetched. Use user1 for testing. \",\n            \"required\": true,\n            \"type\": \"string\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"id\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                },\n                \"username\": {\n                  \"type\": \"string\"\n                },\n                \"firstName\": {\n                  \"type\": \"string\"\n                },\n                \"lastName\": {\n                  \"type\": \"string\"\n                },\n                \"email\": {\n                  \"type\": \"string\"\n                },\n                \"password\": {\n                  \"type\": \"string\"\n                },\n                \"phone\": {\n                  \"type\": \"string\"\n                },\n                \"userStatus\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int32\",\n                  \"description\": \"User Status\"\n                }\n              },\n              \"xml\": {\n                \"name\": \"User\"\n              },\n              \"x-oldref\": \"#/components/schemas/User\"\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid username supplied\"\n          },\n          \"404\": {\n            \"description\": \"User not found\"\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Updated user\",\n        \"description\": \"This can only be done by the logged in user.\",\n        \"operationId\": \"updateUser\",\n        \"parameters\": [\n          {\n            \"name\": \"username\",\n            \"in\": \"path\",\n            \"description\": \"name that need to be updated\",\n            \"required\": true,\n            \"type\": \"string\"\n          },\n          {\n            \"description\": \"Updated user object\",\n            \"required\": true,\n            \"name\": \"body\",\n            \"in\": \"body\",\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"id\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                },\n                \"username\": {\n                  \"type\": \"string\"\n                },\n                \"firstName\": {\n                  \"type\": \"string\"\n                },\n                \"lastName\": {\n                  \"type\": \"string\"\n                },\n                \"email\": {\n                  \"type\": \"string\"\n                },\n                \"password\": {\n                  \"type\": \"string\"\n                },\n                \"phone\": {\n                  \"type\": \"string\"\n                },\n                \"userStatus\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int32\",\n                  \"description\": \"User Status\"\n                }\n              },\n              \"xml\": {\n                \"name\": \"User\"\n              },\n              \"x-oldref\": \"#/components/schemas/User\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"400\": {\n            \"description\": \"Invalid user supplied\"\n          },\n          \"404\": {\n            \"description\": \"User not found\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Delete user\",\n        \"description\": \"This can only be done by the logged in user.\",\n        \"operationId\": \"deleteUser\",\n        \"parameters\": [\n          {\n            \"name\": \"username\",\n            \"in\": \"path\",\n            \"description\": \"The name that needs to be deleted\",\n            \"required\": true,\n            \"type\": \"string\"\n          }\n        ],\n        \"responses\": {\n          \"400\": {\n            \"description\": \"Invalid username supplied\"\n          },\n          \"404\": {\n            \"description\": \"User not found\"\n          }\n        }\n      }\n    }\n  },\n  \"externalDocs\": {\n    \"description\": \"Find out more about Swagger\",\n    \"url\": \"http://swagger.io\"\n  },\n  \"swagger\": \"2.0\",\n  \"schemes\": [\n    \"http\"\n  ],\n  \"host\": \"petstore.swagger.io\",\n  \"basePath\": \"/v2\",\n  \"securityDefinitions\": {\n    \"petstore_auth\": {\n      \"type\": \"oauth2\",\n      \"flow\": \"implicit\",\n      \"authorizationUrl\": \"http://petstore.swagger.io/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    },\n    \"api_key\": {\n      \"type\": \"apiKey\",\n      \"name\": \"api_key\",\n      \"in\": \"header\"\n    }\n  },\n  \"definitions\": {\n    \"Order\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"petId\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"quantity\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"shipDate\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\"\n        },\n        \"status\": {\n          \"type\": \"string\",\n          \"description\": \"Order Status\",\n          \"enum\": [\n            \"placed\",\n            \"approved\",\n            \"delivered\"\n          ]\n        },\n        \"complete\": {\n          \"type\": \"boolean\",\n          \"default\": false\n        }\n      },\n      \"xml\": {\n        \"name\": \"Order\"\n      },\n      \"x-oldref\": \"#/components/schemas/Order\"\n    },\n    \"Category\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      },\n      \"xml\": {\n        \"name\": \"Category\"\n      },\n      \"x-oldref\": \"#/components/schemas/Category\"\n    },\n    \"User\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"username\": {\n          \"type\": \"string\"\n        },\n        \"firstName\": {\n          \"type\": \"string\"\n        },\n        \"lastName\": {\n          \"type\": \"string\"\n        },\n        \"email\": {\n          \"type\": \"string\"\n        },\n        \"password\": {\n          \"type\": \"string\"\n        },\n        \"phone\": {\n          \"type\": \"string\"\n        },\n        \"userStatus\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\",\n          \"description\": \"User Status\"\n        }\n      },\n      \"xml\": {\n        \"name\": \"User\"\n      },\n      \"x-oldref\": \"#/components/schemas/User\"\n    },\n    \"Tag\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      },\n      \"xml\": {\n        \"name\": \"Tag\"\n      },\n      \"x-oldref\": \"#/components/schemas/Tag\"\n    },\n    \"Pet\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"name\",\n        \"photoUrls\"\n      ],\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"category\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            }\n          },\n          \"xml\": {\n            \"name\": \"Category\"\n          },\n          \"x-oldref\": \"#/components/schemas/Category\"\n        },\n        \"name\": {\n          \"type\": \"string\",\n          \"example\": \"doggie\"\n        },\n        \"photoUrls\": {\n          \"type\": \"array\",\n          \"xml\": {\n            \"name\": \"photoUrl\",\n            \"wrapped\": true\n          },\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"tags\": {\n          \"type\": \"array\",\n          \"xml\": {\n            \"name\": \"tag\",\n            \"wrapped\": true\n          },\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"id\": {\n                \"type\": \"integer\",\n                \"format\": \"int64\"\n              },\n              \"name\": {\n                \"type\": \"string\"\n              }\n            },\n            \"xml\": {\n              \"name\": \"Tag\"\n            },\n            \"x-oldref\": \"#/components/schemas/Tag\"\n          }\n        },\n        \"status\": {\n          \"type\": \"string\",\n          \"description\": \"pet status in the store\",\n          \"enum\": [\n            \"available\",\n            \"pending\",\n            \"sold\"\n          ]\n        }\n      },\n      \"xml\": {\n        \"name\": \"Pet\"\n      },\n      \"x-oldref\": \"#/components/schemas/Pet\"\n    },\n    \"ApiResponse\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"code\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"type\": {\n          \"type\": \"string\"\n        },\n        \"message\": {\n          \"type\": \"string\"\n        }\n      },\n      \"x-oldref\": \"#/components/schemas/ApiResponse\"\n    }\n  },\n  \"x-components\": {\n    \"requestBodies\": {\n      \"Pet\": {\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"required\": [\n                \"name\",\n                \"photoUrls\"\n              ],\n              \"properties\": {\n                \"id\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                },\n                \"category\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    },\n                    \"name\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"xml\": {\n                    \"name\": \"Category\"\n                  },\n                  \"x-oldref\": \"#/components/schemas/Category\"\n                },\n                \"name\": {\n                  \"type\": \"string\",\n                  \"example\": \"doggie\"\n                },\n                \"photoUrls\": {\n                  \"type\": \"array\",\n                  \"xml\": {\n                    \"name\": \"photoUrl\",\n                    \"wrapped\": true\n                  },\n                  \"items\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"tags\": {\n                  \"type\": \"array\",\n                  \"xml\": {\n                    \"name\": \"tag\",\n                    \"wrapped\": true\n                  },\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"id\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                      },\n                      \"name\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"xml\": {\n                      \"name\": \"Tag\"\n                    },\n                    \"x-oldref\": \"#/components/schemas/Tag\"\n                  }\n                },\n                \"status\": {\n                  \"type\": \"string\",\n                  \"description\": \"pet status in the store\",\n                  \"enum\": [\n                    \"available\",\n                    \"pending\",\n                    \"sold\"\n                  ]\n                }\n              },\n              \"xml\": {\n                \"name\": \"Pet\"\n              },\n              \"x-oldref\": \"#/components/schemas/Pet\"\n            }\n          },\n          \"application/xml\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"required\": [\n                \"name\",\n                \"photoUrls\"\n              ],\n              \"properties\": {\n                \"id\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                },\n                \"category\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    },\n                    \"name\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"xml\": {\n                    \"name\": \"Category\"\n                  },\n                  \"x-oldref\": \"#/components/schemas/Category\"\n                },\n                \"name\": {\n                  \"type\": \"string\",\n                  \"example\": \"doggie\"\n                },\n                \"photoUrls\": {\n                  \"type\": \"array\",\n                  \"xml\": {\n                    \"name\": \"photoUrl\",\n                    \"wrapped\": true\n                  },\n                  \"items\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"tags\": {\n                  \"type\": \"array\",\n                  \"xml\": {\n                    \"name\": \"tag\",\n                    \"wrapped\": true\n                  },\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"id\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                      },\n                      \"name\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"xml\": {\n                      \"name\": \"Tag\"\n                    },\n                    \"x-oldref\": \"#/components/schemas/Tag\"\n                  }\n                },\n                \"status\": {\n                  \"type\": \"string\",\n                  \"description\": \"pet status in the store\",\n                  \"enum\": [\n                    \"available\",\n                    \"pending\",\n                    \"sold\"\n                  ]\n                }\n              },\n              \"xml\": {\n                \"name\": \"Pet\"\n              },\n              \"x-oldref\": \"#/components/schemas/Pet\"\n            }\n          }\n        },\n        \"description\": \"Pet object that needs to be added to the store\",\n        \"required\": true,\n        \"x-oldref\": \"#/components/requestBodies/Pet\"\n      },\n      \"UserArray\": {\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                  },\n                  \"username\": {\n                    \"type\": \"string\"\n                  },\n                  \"firstName\": {\n                    \"type\": \"string\"\n                  },\n                  \"lastName\": {\n                    \"type\": \"string\"\n                  },\n                  \"email\": {\n                    \"type\": \"string\"\n                  },\n                  \"password\": {\n                    \"type\": \"string\"\n                  },\n                  \"phone\": {\n                    \"type\": \"string\"\n                  },\n                  \"userStatus\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\",\n                    \"description\": \"User Status\"\n                  }\n                },\n                \"xml\": {\n                  \"name\": \"User\"\n                },\n                \"x-oldref\": \"#/components/schemas/User\"\n              }\n            }\n          }\n        },\n        \"description\": \"List of user object\",\n        \"required\": true,\n        \"x-oldref\": \"#/components/requestBodies/UserArray\"\n      }\n    }\n  }\n}",
  "openapi-yaml": "openapi: 3.0.0\nservers:\n  - url: 'http://petstore.swagger.io/v2'\nx-origin:\n  - url: 'http://petstore.swagger.io/v2/swagger.json'\n    format: swagger\n    version: '2.0'\n    converter:\n      url: 'https://github.com/mermade/swagger2openapi'\n      version: 2.6.3\ninfo:\n  description: 'This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.'\n  version: 1.0.0\n  title: Swagger Petstore\n  termsOfService: 'http://swagger.io/terms/'\n  contact:\n    email: apiteam@swagger.io\n    url: 'https://swagger.io'\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: 'http://swagger.io'\n  - name: store\n    description: Access to Petstore orders\n  - name: user\n    description: Operations about user\n    externalDocs:\n      description: Find out more about our store\n      url: 'http://swagger.io'\npaths:\n  /pet:\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: ''\n      operationId: addPet\n      responses:\n        '405':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      requestBody: &ref_1\n        content:\n          application/json:\n            schema: &ref_0\n              type: object\n              required:\n                - name\n                - photoUrls\n              properties:\n                id:\n                  type: integer\n                  format: int64\n                category: &ref_5\n                  type: object\n                  properties:\n                    id:\n                      type: integer\n                      format: int64\n                    name:\n                      type: string\n                  xml:\n                    name: Category\n                  x-oldref: '#/components/schemas/Category'\n                name:\n                  type: string\n                  example: doggie\n                photoUrls:\n                  type: array\n                  xml:\n                    name: photoUrl\n                    wrapped: true\n                  items:\n                    type: string\n                tags:\n                  type: array\n                  xml:\n                    name: tag\n                    wrapped: true\n                  items: &ref_6\n                    type: object\n                    properties:\n                      id:\n                        type: integer\n                        format: int64\n                      name:\n                        type: string\n                    xml:\n                      name: Tag\n                    x-oldref: '#/components/schemas/Tag'\n                status:\n                  type: string\n                  description: pet status in the store\n                  enum:\n                    - available\n                    - pending\n                    - sold\n              xml:\n                name: Pet\n              x-oldref: '#/components/schemas/Pet'\n          application/xml:\n            schema: *ref_0\n        description: Pet object that needs to be added to the store\n        required: true\n        x-oldref: '#/components/requestBodies/Pet'\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: ''\n      operationId: updatePet\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      requestBody: *ref_1\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - available\n                - pending\n                - sold\n              default: available\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items: *ref_0\n            application/json:\n              schema:\n                type: array\n                items: *ref_0\n        '400':\n          description: Invalid status value\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: 'Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.'\n      operationId: findPetsByTags\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items: *ref_0\n            application/json:\n              schema:\n                type: array\n                items: *ref_0\n        '400':\n          description: Invalid tag value\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      deprecated: true\n  '/pet/{petId}':\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema: *ref_0\n            application/json:\n              schema: *ref_0\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n      security:\n        - api_key: []\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: ''\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '405':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: ''\n      operationId: deletePet\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n  '/pet/{petId}/uploadImage':\n    post:\n      tags:\n        - pet\n      summary: uploads an image\n      description: ''\n      operationId: uploadFile\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to update\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema: &ref_7\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n                  type:\n                    type: string\n                  message:\n                    type: string\n                x-oldref: '#/components/schemas/ApiResponse'\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n      security:\n        - api_key: []\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: ''\n      operationId: placeOrder\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema: &ref_2\n                type: object\n                properties:\n                  id:\n                    type: integer\n                    format: int64\n                  petId:\n                    type: integer\n                    format: int64\n                  quantity:\n                    type: integer\n                    format: int32\n                  shipDate:\n                    type: string\n                    format: date-time\n                  status:\n                    type: string\n                    description: Order Status\n                    enum:\n                      - placed\n                      - approved\n                      - delivered\n                  complete:\n                    type: boolean\n                    default: false\n                xml:\n                  name: Order\n                x-oldref: '#/components/schemas/Order'\n            application/json:\n              schema: *ref_2\n        '400':\n          description: Invalid Order\n      requestBody:\n        content:\n          application/json:\n            schema: *ref_2\n        description: order placed for purchasing the pet\n        required: true\n  '/store/order/{orderId}':\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\n      operationId: getOrderById\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of pet that needs to be fetched\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n            maximum: 10\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema: *ref_2\n            application/json:\n              schema: *ref_2\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      responses:\n        default:\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            schema: &ref_3\n              type: object\n              properties:\n                id:\n                  type: integer\n                  format: int64\n                username:\n                  type: string\n                firstName:\n                  type: string\n                lastName:\n                  type: string\n                email:\n                  type: string\n                password:\n                  type: string\n                phone:\n                  type: string\n                userStatus:\n                  type: integer\n                  format: int32\n                  description: User Status\n              xml:\n                name: User\n              x-oldref: '#/components/schemas/User'\n        description: Created user object\n        required: true\n  /user/createWithArray:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: ''\n      operationId: createUsersWithArrayInput\n      responses:\n        default:\n          description: successful operation\n      requestBody: &ref_4\n        content:\n          application/json:\n            schema:\n              type: array\n              items: *ref_3\n        description: List of user object\n        required: true\n        x-oldref: '#/components/requestBodies/UserArray'\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: ''\n      operationId: createUsersWithListInput\n      responses:\n        default:\n          description: successful operation\n      requestBody: *ref_4\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: ''\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          schema:\n            type: string\n            format: password\n      responses:\n        '200':\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        '400':\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: ''\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n  '/user/{username}':\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: ''\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: 'The name that needs to be fetched. Use user1 for testing. '\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema: *ref_3\n            application/json:\n              schema: *ref_3\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be updated\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid user supplied\n        '404':\n          description: User not found\n      requestBody:\n        content:\n          application/json:\n            schema: *ref_3\n        description: Updated user object\n        required: true\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\nexternalDocs:\n  description: Find out more about Swagger\n  url: 'http://swagger.io'\ncomponents:\n  schemas:\n    Order: *ref_2\n    Category: *ref_5\n    User: *ref_3\n    Tag: *ref_6\n    Pet: *ref_0\n    ApiResponse: *ref_7\n  requestBodies:\n    Pet: *ref_1\n    UserArray: *ref_4\n  securitySchemes:\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'\n          scopes:\n            'write:pets': modify pets in your account\n            'read:pets': read your pets\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n",
  "openapi-json": "{\n  \"openapi\": \"3.0.0\",\n  \"servers\": [\n    {\n      \"url\": \"http://petstore.swagger.io/v2\"\n    }\n  ],\n  \"x-origin\": [\n    {\n      \"url\": \"http://petstore.swagger.io/v2/swagger.json\",\n      \"format\": \"swagger\",\n      \"version\": \"2.0\",\n      \"converter\": {\n        \"url\": \"https://github.com/mermade/swagger2openapi\",\n        \"version\": \"2.6.3\"\n      }\n    }\n  ],\n  \"info\": {\n    \"description\": \"This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\",\n    \"version\": \"1.0.0\",\n    \"title\": \"Swagger Petstore\",\n    \"termsOfService\": \"http://swagger.io/terms/\",\n    \"contact\": {\n      \"email\": \"apiteam@swagger.io\",\n      \"url\": \"https://swagger.io\"\n    },\n    \"license\": {\n      \"name\": \"Apache 2.0\",\n      \"url\": \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n    }\n  },\n  \"tags\": [\n    {\n      \"name\": \"pet\",\n      \"description\": \"Everything about your Pets\",\n      \"externalDocs\": {\n        \"description\": \"Find out more\",\n        \"url\": \"http://swagger.io\"\n      }\n    },\n    {\n      \"name\": \"store\",\n      \"description\": \"Access to Petstore orders\"\n    },\n    {\n      \"name\": \"user\",\n      \"description\": \"Operations about user\",\n      \"externalDocs\": {\n        \"description\": \"Find out more about our store\",\n        \"url\": \"http://swagger.io\"\n      }\n    }\n  ],\n  \"paths\": {\n    \"/pet\": {\n      \"post\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"Add a new pet to the store\",\n        \"description\": \"\",\n        \"operationId\": \"addPet\",\n        \"responses\": {\n          \"405\": {\n            \"description\": \"Invalid input\"\n          }\n        },\n        \"security\": [\n          {\n            \"petstore_auth\": [\n              \"write:pets\",\n              \"read:pets\"\n            ]\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"required\": [\n                  \"name\",\n                  \"photoUrls\"\n                ],\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                  },\n                  \"category\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"id\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                      },\n                      \"name\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"xml\": {\n                      \"name\": \"Category\"\n                    },\n                    \"x-oldref\": \"#/components/schemas/Category\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\",\n                    \"example\": \"doggie\"\n                  },\n                  \"photoUrls\": {\n                    \"type\": \"array\",\n                    \"xml\": {\n                      \"name\": \"photoUrl\",\n                      \"wrapped\": true\n                    },\n                    \"items\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"tags\": {\n                    \"type\": \"array\",\n                    \"xml\": {\n                      \"name\": \"tag\",\n                      \"wrapped\": true\n                    },\n                    \"items\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"id\": {\n                          \"type\": \"integer\",\n                          \"format\": \"int64\"\n                        },\n                        \"name\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"xml\": {\n                        \"name\": \"Tag\"\n                      },\n                      \"x-oldref\": \"#/components/schemas/Tag\"\n                    }\n                  },\n                  \"status\": {\n                    \"type\": \"string\",\n                    \"description\": \"pet status in the store\",\n                    \"enum\": [\n                      \"available\",\n                      \"pending\",\n                      \"sold\"\n                    ]\n                  }\n                },\n                \"xml\": {\n                  \"name\": \"Pet\"\n                },\n                \"x-oldref\": \"#/components/schemas/Pet\"\n              }\n            },\n            \"application/xml\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"required\": [\n                  \"name\",\n                  \"photoUrls\"\n                ],\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                  },\n                  \"category\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"id\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                      },\n                      \"name\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"xml\": {\n                      \"name\": \"Category\"\n                    },\n                    \"x-oldref\": \"#/components/schemas/Category\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\",\n                    \"example\": \"doggie\"\n                  },\n                  \"photoUrls\": {\n                    \"type\": \"array\",\n                    \"xml\": {\n                      \"name\": \"photoUrl\",\n                      \"wrapped\": true\n                    },\n                    \"items\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"tags\": {\n                    \"type\": \"array\",\n                    \"xml\": {\n                      \"name\": \"tag\",\n                      \"wrapped\": true\n                    },\n                    \"items\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"id\": {\n                          \"type\": \"integer\",\n                          \"format\": \"int64\"\n                        },\n                        \"name\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"xml\": {\n                        \"name\": \"Tag\"\n                      },\n                      \"x-oldref\": \"#/components/schemas/Tag\"\n                    }\n                  },\n                  \"status\": {\n                    \"type\": \"string\",\n                    \"description\": \"pet status in the store\",\n                    \"enum\": [\n                      \"available\",\n                      \"pending\",\n                      \"sold\"\n                    ]\n                  }\n                },\n                \"xml\": {\n                  \"name\": \"Pet\"\n                },\n                \"x-oldref\": \"#/components/schemas/Pet\"\n              }\n            }\n          },\n          \"description\": \"Pet object that needs to be added to the store\",\n          \"required\": true,\n          \"x-oldref\": \"#/components/requestBodies/Pet\"\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"Update an existing pet\",\n        \"description\": \"\",\n        \"operationId\": \"updatePet\",\n        \"responses\": {\n          \"400\": {\n            \"description\": \"Invalid ID supplied\"\n          },\n          \"404\": {\n            \"description\": \"Pet not found\"\n          },\n          \"405\": {\n            \"description\": \"Validation exception\"\n          }\n        },\n        \"security\": [\n          {\n            \"petstore_auth\": [\n              \"write:pets\",\n              \"read:pets\"\n            ]\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"required\": [\n                  \"name\",\n                  \"photoUrls\"\n                ],\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                  },\n                  \"category\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"id\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                      },\n                      \"name\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"xml\": {\n                      \"name\": \"Category\"\n                    },\n                    \"x-oldref\": \"#/components/schemas/Category\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\",\n                    \"example\": \"doggie\"\n                  },\n                  \"photoUrls\": {\n                    \"type\": \"array\",\n                    \"xml\": {\n                      \"name\": \"photoUrl\",\n                      \"wrapped\": true\n                    },\n                    \"items\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"tags\": {\n                    \"type\": \"array\",\n                    \"xml\": {\n                      \"name\": \"tag\",\n                      \"wrapped\": true\n                    },\n                    \"items\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"id\": {\n                          \"type\": \"integer\",\n                          \"format\": \"int64\"\n                        },\n                        \"name\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"xml\": {\n                        \"name\": \"Tag\"\n                      },\n                      \"x-oldref\": \"#/components/schemas/Tag\"\n                    }\n                  },\n                  \"status\": {\n                    \"type\": \"string\",\n                    \"description\": \"pet status in the store\",\n                    \"enum\": [\n                      \"available\",\n                      \"pending\",\n                      \"sold\"\n                    ]\n                  }\n                },\n                \"xml\": {\n                  \"name\": \"Pet\"\n                },\n                \"x-oldref\": \"#/components/schemas/Pet\"\n              }\n            },\n            \"application/xml\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"required\": [\n                  \"name\",\n                  \"photoUrls\"\n                ],\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                  },\n                  \"category\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"id\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                      },\n                      \"name\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"xml\": {\n                      \"name\": \"Category\"\n                    },\n                    \"x-oldref\": \"#/components/schemas/Category\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\",\n                    \"example\": \"doggie\"\n                  },\n                  \"photoUrls\": {\n                    \"type\": \"array\",\n                    \"xml\": {\n                      \"name\": \"photoUrl\",\n                      \"wrapped\": true\n                    },\n                    \"items\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"tags\": {\n                    \"type\": \"array\",\n                    \"xml\": {\n                      \"name\": \"tag\",\n                      \"wrapped\": true\n                    },\n                    \"items\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"id\": {\n                          \"type\": \"integer\",\n                          \"format\": \"int64\"\n                        },\n                        \"name\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"xml\": {\n                        \"name\": \"Tag\"\n                      },\n                      \"x-oldref\": \"#/components/schemas/Tag\"\n                    }\n                  },\n                  \"status\": {\n                    \"type\": \"string\",\n                    \"description\": \"pet status in the store\",\n                    \"enum\": [\n                      \"available\",\n                      \"pending\",\n                      \"sold\"\n                    ]\n                  }\n                },\n                \"xml\": {\n                  \"name\": \"Pet\"\n                },\n                \"x-oldref\": \"#/components/schemas/Pet\"\n              }\n            }\n          },\n          \"description\": \"Pet object that needs to be added to the store\",\n          \"required\": true,\n          \"x-oldref\": \"#/components/requestBodies/Pet\"\n        }\n      }\n    },\n    \"/pet/findByStatus\": {\n      \"get\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"Finds Pets by status\",\n        \"description\": \"Multiple status values can be provided with comma separated strings\",\n        \"operationId\": \"findPetsByStatus\",\n        \"parameters\": [\n          {\n            \"name\": \"status\",\n            \"in\": \"query\",\n            \"description\": \"Status values that need to be considered for filter\",\n            \"required\": true,\n            \"explode\": true,\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\",\n                \"enum\": [\n                  \"available\",\n                  \"pending\",\n                  \"sold\"\n                ],\n                \"default\": \"available\"\n              }\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"content\": {\n              \"application/xml\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                      \"name\",\n                      \"photoUrls\"\n                    ],\n                    \"properties\": {\n                      \"id\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                      },\n                      \"category\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"id\": {\n                            \"type\": \"integer\",\n                            \"format\": \"int64\"\n                          },\n                          \"name\": {\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"xml\": {\n                          \"name\": \"Category\"\n                        },\n                        \"x-oldref\": \"#/components/schemas/Category\"\n                      },\n                      \"name\": {\n                        \"type\": \"string\",\n                        \"example\": \"doggie\"\n                      },\n                      \"photoUrls\": {\n                        \"type\": \"array\",\n                        \"xml\": {\n                          \"name\": \"photoUrl\",\n                          \"wrapped\": true\n                        },\n                        \"items\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"tags\": {\n                        \"type\": \"array\",\n                        \"xml\": {\n                          \"name\": \"tag\",\n                          \"wrapped\": true\n                        },\n                        \"items\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"id\": {\n                              \"type\": \"integer\",\n                              \"format\": \"int64\"\n                            },\n                            \"name\": {\n                              \"type\": \"string\"\n                            }\n                          },\n                          \"xml\": {\n                            \"name\": \"Tag\"\n                          },\n                          \"x-oldref\": \"#/components/schemas/Tag\"\n                        }\n                      },\n                      \"status\": {\n                        \"type\": \"string\",\n                        \"description\": \"pet status in the store\",\n                        \"enum\": [\n                          \"available\",\n                          \"pending\",\n                          \"sold\"\n                        ]\n                      }\n                    },\n                    \"xml\": {\n                      \"name\": \"Pet\"\n                    },\n                    \"x-oldref\": \"#/components/schemas/Pet\"\n                  }\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                      \"name\",\n                      \"photoUrls\"\n                    ],\n                    \"properties\": {\n                      \"id\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                      },\n                      \"category\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"id\": {\n                            \"type\": \"integer\",\n                            \"format\": \"int64\"\n                          },\n                          \"name\": {\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"xml\": {\n                          \"name\": \"Category\"\n                        },\n                        \"x-oldref\": \"#/components/schemas/Category\"\n                      },\n                      \"name\": {\n                        \"type\": \"string\",\n                        \"example\": \"doggie\"\n                      },\n                      \"photoUrls\": {\n                        \"type\": \"array\",\n                        \"xml\": {\n                          \"name\": \"photoUrl\",\n                          \"wrapped\": true\n                        },\n                        \"items\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"tags\": {\n                        \"type\": \"array\",\n                        \"xml\": {\n                          \"name\": \"tag\",\n                          \"wrapped\": true\n                        },\n                        \"items\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"id\": {\n                              \"type\": \"integer\",\n                              \"format\": \"int64\"\n                            },\n                            \"name\": {\n                              \"type\": \"string\"\n                            }\n                          },\n                          \"xml\": {\n                            \"name\": \"Tag\"\n                          },\n                          \"x-oldref\": \"#/components/schemas/Tag\"\n                        }\n                      },\n                      \"status\": {\n                        \"type\": \"string\",\n                        \"description\": \"pet status in the store\",\n                        \"enum\": [\n                          \"available\",\n                          \"pending\",\n                          \"sold\"\n                        ]\n                      }\n                    },\n                    \"xml\": {\n                      \"name\": \"Pet\"\n                    },\n                    \"x-oldref\": \"#/components/schemas/Pet\"\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid status value\"\n          }\n        },\n        \"security\": [\n          {\n            \"petstore_auth\": [\n              \"write:pets\",\n              \"read:pets\"\n            ]\n          }\n        ]\n      }\n    },\n    \"/pet/findByTags\": {\n      \"get\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"Finds Pets by tags\",\n        \"description\": \"Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\",\n        \"operationId\": \"findPetsByTags\",\n        \"parameters\": [\n          {\n            \"name\": \"tags\",\n            \"in\": \"query\",\n            \"description\": \"Tags to filter by\",\n            \"required\": true,\n            \"explode\": true,\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"content\": {\n              \"application/xml\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                      \"name\",\n                      \"photoUrls\"\n                    ],\n                    \"properties\": {\n                      \"id\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                      },\n                      \"category\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"id\": {\n                            \"type\": \"integer\",\n                            \"format\": \"int64\"\n                          },\n                          \"name\": {\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"xml\": {\n                          \"name\": \"Category\"\n                        },\n                        \"x-oldref\": \"#/components/schemas/Category\"\n                      },\n                      \"name\": {\n                        \"type\": \"string\",\n                        \"example\": \"doggie\"\n                      },\n                      \"photoUrls\": {\n                        \"type\": \"array\",\n                        \"xml\": {\n                          \"name\": \"photoUrl\",\n                          \"wrapped\": true\n                        },\n                        \"items\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"tags\": {\n                        \"type\": \"array\",\n                        \"xml\": {\n                          \"name\": \"tag\",\n                          \"wrapped\": true\n                        },\n                        \"items\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"id\": {\n                              \"type\": \"integer\",\n                              \"format\": \"int64\"\n                            },\n                            \"name\": {\n                              \"type\": \"string\"\n                            }\n                          },\n                          \"xml\": {\n                            \"name\": \"Tag\"\n                          },\n                          \"x-oldref\": \"#/components/schemas/Tag\"\n                        }\n                      },\n                      \"status\": {\n                        \"type\": \"string\",\n                        \"description\": \"pet status in the store\",\n                        \"enum\": [\n                          \"available\",\n                          \"pending\",\n                          \"sold\"\n                        ]\n                      }\n                    },\n                    \"xml\": {\n                      \"name\": \"Pet\"\n                    },\n                    \"x-oldref\": \"#/components/schemas/Pet\"\n                  }\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                      \"name\",\n                      \"photoUrls\"\n                    ],\n                    \"properties\": {\n                      \"id\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                      },\n                      \"category\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"id\": {\n                            \"type\": \"integer\",\n                            \"format\": \"int64\"\n                          },\n                          \"name\": {\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"xml\": {\n                          \"name\": \"Category\"\n                        },\n                        \"x-oldref\": \"#/components/schemas/Category\"\n                      },\n                      \"name\": {\n                        \"type\": \"string\",\n                        \"example\": \"doggie\"\n                      },\n                      \"photoUrls\": {\n                        \"type\": \"array\",\n                        \"xml\": {\n                          \"name\": \"photoUrl\",\n                          \"wrapped\": true\n                        },\n                        \"items\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"tags\": {\n                        \"type\": \"array\",\n                        \"xml\": {\n                          \"name\": \"tag\",\n                          \"wrapped\": true\n                        },\n                        \"items\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"id\": {\n                              \"type\": \"integer\",\n                              \"format\": \"int64\"\n                            },\n                            \"name\": {\n                              \"type\": \"string\"\n                            }\n                          },\n                          \"xml\": {\n                            \"name\": \"Tag\"\n                          },\n                          \"x-oldref\": \"#/components/schemas/Tag\"\n                        }\n                      },\n                      \"status\": {\n                        \"type\": \"string\",\n                        \"description\": \"pet status in the store\",\n                        \"enum\": [\n                          \"available\",\n                          \"pending\",\n                          \"sold\"\n                        ]\n                      }\n                    },\n                    \"xml\": {\n                      \"name\": \"Pet\"\n                    },\n                    \"x-oldref\": \"#/components/schemas/Pet\"\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid tag value\"\n          }\n        },\n        \"security\": [\n          {\n            \"petstore_auth\": [\n              \"write:pets\",\n              \"read:pets\"\n            ]\n          }\n        ],\n        \"deprecated\": true\n      }\n    },\n    \"/pet/{petId}\": {\n      \"get\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"Find pet by ID\",\n        \"description\": \"Returns a single pet\",\n        \"operationId\": \"getPetById\",\n        \"parameters\": [\n          {\n            \"name\": \"petId\",\n            \"in\": \"path\",\n            \"description\": \"ID of pet to return\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"content\": {\n              \"application/xml\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"name\",\n                    \"photoUrls\"\n                  ],\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    },\n                    \"category\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"id\": {\n                          \"type\": \"integer\",\n                          \"format\": \"int64\"\n                        },\n                        \"name\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"xml\": {\n                        \"name\": \"Category\"\n                      },\n                      \"x-oldref\": \"#/components/schemas/Category\"\n                    },\n                    \"name\": {\n                      \"type\": \"string\",\n                      \"example\": \"doggie\"\n                    },\n                    \"photoUrls\": {\n                      \"type\": \"array\",\n                      \"xml\": {\n                        \"name\": \"photoUrl\",\n                        \"wrapped\": true\n                      },\n                      \"items\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"tags\": {\n                      \"type\": \"array\",\n                      \"xml\": {\n                        \"name\": \"tag\",\n                        \"wrapped\": true\n                      },\n                      \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"id\": {\n                            \"type\": \"integer\",\n                            \"format\": \"int64\"\n                          },\n                          \"name\": {\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"xml\": {\n                          \"name\": \"Tag\"\n                        },\n                        \"x-oldref\": \"#/components/schemas/Tag\"\n                      }\n                    },\n                    \"status\": {\n                      \"type\": \"string\",\n                      \"description\": \"pet status in the store\",\n                      \"enum\": [\n                        \"available\",\n                        \"pending\",\n                        \"sold\"\n                      ]\n                    }\n                  },\n                  \"xml\": {\n                    \"name\": \"Pet\"\n                  },\n                  \"x-oldref\": \"#/components/schemas/Pet\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"required\": [\n                    \"name\",\n                    \"photoUrls\"\n                  ],\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    },\n                    \"category\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"id\": {\n                          \"type\": \"integer\",\n                          \"format\": \"int64\"\n                        },\n                        \"name\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"xml\": {\n                        \"name\": \"Category\"\n                      },\n                      \"x-oldref\": \"#/components/schemas/Category\"\n                    },\n                    \"name\": {\n                      \"type\": \"string\",\n                      \"example\": \"doggie\"\n                    },\n                    \"photoUrls\": {\n                      \"type\": \"array\",\n                      \"xml\": {\n                        \"name\": \"photoUrl\",\n                        \"wrapped\": true\n                      },\n                      \"items\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"tags\": {\n                      \"type\": \"array\",\n                      \"xml\": {\n                        \"name\": \"tag\",\n                        \"wrapped\": true\n                      },\n                      \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"id\": {\n                            \"type\": \"integer\",\n                            \"format\": \"int64\"\n                          },\n                          \"name\": {\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"xml\": {\n                          \"name\": \"Tag\"\n                        },\n                        \"x-oldref\": \"#/components/schemas/Tag\"\n                      }\n                    },\n                    \"status\": {\n                      \"type\": \"string\",\n                      \"description\": \"pet status in the store\",\n                      \"enum\": [\n                        \"available\",\n                        \"pending\",\n                        \"sold\"\n                      ]\n                    }\n                  },\n                  \"xml\": {\n                    \"name\": \"Pet\"\n                  },\n                  \"x-oldref\": \"#/components/schemas/Pet\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid ID supplied\"\n          },\n          \"404\": {\n            \"description\": \"Pet not found\"\n          }\n        },\n        \"security\": [\n          {\n            \"api_key\": []\n          }\n        ]\n      },\n      \"post\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"Updates a pet in the store with form data\",\n        \"description\": \"\",\n        \"operationId\": \"updatePetWithForm\",\n        \"parameters\": [\n          {\n            \"name\": \"petId\",\n            \"in\": \"path\",\n            \"description\": \"ID of pet that needs to be updated\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"405\": {\n            \"description\": \"Invalid input\"\n          }\n        },\n        \"security\": [\n          {\n            \"petstore_auth\": [\n              \"write:pets\",\n              \"read:pets\"\n            ]\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/x-www-form-urlencoded\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"name\": {\n                    \"description\": \"Updated name of the pet\",\n                    \"type\": \"string\"\n                  },\n                  \"status\": {\n                    \"description\": \"Updated status of the pet\",\n                    \"type\": \"string\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"Deletes a pet\",\n        \"description\": \"\",\n        \"operationId\": \"deletePet\",\n        \"parameters\": [\n          {\n            \"name\": \"api_key\",\n            \"in\": \"header\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"petId\",\n            \"in\": \"path\",\n            \"description\": \"Pet id to delete\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"400\": {\n            \"description\": \"Invalid ID supplied\"\n          },\n          \"404\": {\n            \"description\": \"Pet not found\"\n          }\n        },\n        \"security\": [\n          {\n            \"petstore_auth\": [\n              \"write:pets\",\n              \"read:pets\"\n            ]\n          }\n        ]\n      }\n    },\n    \"/pet/{petId}/uploadImage\": {\n      \"post\": {\n        \"tags\": [\n          \"pet\"\n        ],\n        \"summary\": \"uploads an image\",\n        \"description\": \"\",\n        \"operationId\": \"uploadFile\",\n        \"parameters\": [\n          {\n            \"name\": \"petId\",\n            \"in\": \"path\",\n            \"description\": \"ID of pet to update\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"code\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int32\"\n                    },\n                    \"type\": {\n                      \"type\": \"string\"\n                    },\n                    \"message\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"x-oldref\": \"#/components/schemas/ApiResponse\"\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"petstore_auth\": [\n              \"write:pets\",\n              \"read:pets\"\n            ]\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/octet-stream\": {\n              \"schema\": {\n                \"type\": \"string\",\n                \"format\": \"binary\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/store/inventory\": {\n      \"get\": {\n        \"tags\": [\n          \"store\"\n        ],\n        \"summary\": \"Returns pet inventories by status\",\n        \"description\": \"Returns a map of status codes to quantities\",\n        \"operationId\": \"getInventory\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"additionalProperties\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"api_key\": []\n          }\n        ]\n      }\n    },\n    \"/store/order\": {\n      \"post\": {\n        \"tags\": [\n          \"store\"\n        ],\n        \"summary\": \"Place an order for a pet\",\n        \"description\": \"\",\n        \"operationId\": \"placeOrder\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"content\": {\n              \"application/xml\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    },\n                    \"petId\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    },\n                    \"quantity\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int32\"\n                    },\n                    \"shipDate\": {\n                      \"type\": \"string\",\n                      \"format\": \"date-time\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\",\n                      \"description\": \"Order Status\",\n                      \"enum\": [\n                        \"placed\",\n                        \"approved\",\n                        \"delivered\"\n                      ]\n                    },\n                    \"complete\": {\n                      \"type\": \"boolean\",\n                      \"default\": false\n                    }\n                  },\n                  \"xml\": {\n                    \"name\": \"Order\"\n                  },\n                  \"x-oldref\": \"#/components/schemas/Order\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    },\n                    \"petId\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    },\n                    \"quantity\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int32\"\n                    },\n                    \"shipDate\": {\n                      \"type\": \"string\",\n                      \"format\": \"date-time\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\",\n                      \"description\": \"Order Status\",\n                      \"enum\": [\n                        \"placed\",\n                        \"approved\",\n                        \"delivered\"\n                      ]\n                    },\n                    \"complete\": {\n                      \"type\": \"boolean\",\n                      \"default\": false\n                    }\n                  },\n                  \"xml\": {\n                    \"name\": \"Order\"\n                  },\n                  \"x-oldref\": \"#/components/schemas/Order\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid Order\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                  },\n                  \"petId\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                  },\n                  \"quantity\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\"\n                  },\n                  \"shipDate\": {\n                    \"type\": \"string\",\n                    \"format\": \"date-time\"\n                  },\n                  \"status\": {\n                    \"type\": \"string\",\n                    \"description\": \"Order Status\",\n                    \"enum\": [\n                      \"placed\",\n                      \"approved\",\n                      \"delivered\"\n                    ]\n                  },\n                  \"complete\": {\n                    \"type\": \"boolean\",\n                    \"default\": false\n                  }\n                },\n                \"xml\": {\n                  \"name\": \"Order\"\n                },\n                \"x-oldref\": \"#/components/schemas/Order\"\n              }\n            }\n          },\n          \"description\": \"order placed for purchasing the pet\",\n          \"required\": true\n        }\n      }\n    },\n    \"/store/order/{orderId}\": {\n      \"get\": {\n        \"tags\": [\n          \"store\"\n        ],\n        \"summary\": \"Find purchase order by ID\",\n        \"description\": \"For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\",\n        \"operationId\": \"getOrderById\",\n        \"parameters\": [\n          {\n            \"name\": \"orderId\",\n            \"in\": \"path\",\n            \"description\": \"ID of pet that needs to be fetched\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\",\n              \"minimum\": 1,\n              \"maximum\": 10\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"content\": {\n              \"application/xml\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    },\n                    \"petId\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    },\n                    \"quantity\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int32\"\n                    },\n                    \"shipDate\": {\n                      \"type\": \"string\",\n                      \"format\": \"date-time\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\",\n                      \"description\": \"Order Status\",\n                      \"enum\": [\n                        \"placed\",\n                        \"approved\",\n                        \"delivered\"\n                      ]\n                    },\n                    \"complete\": {\n                      \"type\": \"boolean\",\n                      \"default\": false\n                    }\n                  },\n                  \"xml\": {\n                    \"name\": \"Order\"\n                  },\n                  \"x-oldref\": \"#/components/schemas/Order\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    },\n                    \"petId\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    },\n                    \"quantity\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int32\"\n                    },\n                    \"shipDate\": {\n                      \"type\": \"string\",\n                      \"format\": \"date-time\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\",\n                      \"description\": \"Order Status\",\n                      \"enum\": [\n                        \"placed\",\n                        \"approved\",\n                        \"delivered\"\n                      ]\n                    },\n                    \"complete\": {\n                      \"type\": \"boolean\",\n                      \"default\": false\n                    }\n                  },\n                  \"xml\": {\n                    \"name\": \"Order\"\n                  },\n                  \"x-oldref\": \"#/components/schemas/Order\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid ID supplied\"\n          },\n          \"404\": {\n            \"description\": \"Order not found\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"store\"\n        ],\n        \"summary\": \"Delete purchase order by ID\",\n        \"description\": \"For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\",\n        \"operationId\": \"deleteOrder\",\n        \"parameters\": [\n          {\n            \"name\": \"orderId\",\n            \"in\": \"path\",\n            \"description\": \"ID of the order that needs to be deleted\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\",\n              \"minimum\": 1\n            }\n          }\n        ],\n        \"responses\": {\n          \"400\": {\n            \"description\": \"Invalid ID supplied\"\n          },\n          \"404\": {\n            \"description\": \"Order not found\"\n          }\n        }\n      }\n    },\n    \"/user\": {\n      \"post\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Create user\",\n        \"description\": \"This can only be done by the logged in user.\",\n        \"operationId\": \"createUser\",\n        \"responses\": {\n          \"default\": {\n            \"description\": \"successful operation\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                  },\n                  \"username\": {\n                    \"type\": \"string\"\n                  },\n                  \"firstName\": {\n                    \"type\": \"string\"\n                  },\n                  \"lastName\": {\n                    \"type\": \"string\"\n                  },\n                  \"email\": {\n                    \"type\": \"string\"\n                  },\n                  \"password\": {\n                    \"type\": \"string\"\n                  },\n                  \"phone\": {\n                    \"type\": \"string\"\n                  },\n                  \"userStatus\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\",\n                    \"description\": \"User Status\"\n                  }\n                },\n                \"xml\": {\n                  \"name\": \"User\"\n                },\n                \"x-oldref\": \"#/components/schemas/User\"\n              }\n            }\n          },\n          \"description\": \"Created user object\",\n          \"required\": true\n        }\n      }\n    },\n    \"/user/createWithArray\": {\n      \"post\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Creates list of users with given input array\",\n        \"description\": \"\",\n        \"operationId\": \"createUsersWithArrayInput\",\n        \"responses\": {\n          \"default\": {\n            \"description\": \"successful operation\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    },\n                    \"username\": {\n                      \"type\": \"string\"\n                    },\n                    \"firstName\": {\n                      \"type\": \"string\"\n                    },\n                    \"lastName\": {\n                      \"type\": \"string\"\n                    },\n                    \"email\": {\n                      \"type\": \"string\"\n                    },\n                    \"password\": {\n                      \"type\": \"string\"\n                    },\n                    \"phone\": {\n                      \"type\": \"string\"\n                    },\n                    \"userStatus\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int32\",\n                      \"description\": \"User Status\"\n                    }\n                  },\n                  \"xml\": {\n                    \"name\": \"User\"\n                  },\n                  \"x-oldref\": \"#/components/schemas/User\"\n                }\n              }\n            }\n          },\n          \"description\": \"List of user object\",\n          \"required\": true,\n          \"x-oldref\": \"#/components/requestBodies/UserArray\"\n        }\n      }\n    },\n    \"/user/createWithList\": {\n      \"post\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Creates list of users with given input array\",\n        \"description\": \"\",\n        \"operationId\": \"createUsersWithListInput\",\n        \"responses\": {\n          \"default\": {\n            \"description\": \"successful operation\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    },\n                    \"username\": {\n                      \"type\": \"string\"\n                    },\n                    \"firstName\": {\n                      \"type\": \"string\"\n                    },\n                    \"lastName\": {\n                      \"type\": \"string\"\n                    },\n                    \"email\": {\n                      \"type\": \"string\"\n                    },\n                    \"password\": {\n                      \"type\": \"string\"\n                    },\n                    \"phone\": {\n                      \"type\": \"string\"\n                    },\n                    \"userStatus\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int32\",\n                      \"description\": \"User Status\"\n                    }\n                  },\n                  \"xml\": {\n                    \"name\": \"User\"\n                  },\n                  \"x-oldref\": \"#/components/schemas/User\"\n                }\n              }\n            }\n          },\n          \"description\": \"List of user object\",\n          \"required\": true,\n          \"x-oldref\": \"#/components/requestBodies/UserArray\"\n        }\n      }\n    },\n    \"/user/login\": {\n      \"get\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Logs user into the system\",\n        \"description\": \"\",\n        \"operationId\": \"loginUser\",\n        \"parameters\": [\n          {\n            \"name\": \"username\",\n            \"in\": \"query\",\n            \"description\": \"The user name for login\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"password\",\n            \"in\": \"query\",\n            \"description\": \"The password for login in clear text\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"password\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"headers\": {\n              \"X-Rate-Limit\": {\n                \"description\": \"calls per hour allowed by the user\",\n                \"schema\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int32\"\n                }\n              },\n              \"X-Expires-After\": {\n                \"description\": \"date in UTC when token expires\",\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"format\": \"date-time\"\n                }\n              }\n            },\n            \"content\": {\n              \"application/xml\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid username/password supplied\"\n          }\n        }\n      }\n    },\n    \"/user/logout\": {\n      \"get\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Logs out current logged in user session\",\n        \"description\": \"\",\n        \"operationId\": \"logoutUser\",\n        \"responses\": {\n          \"default\": {\n            \"description\": \"successful operation\"\n          }\n        }\n      }\n    },\n    \"/user/{username}\": {\n      \"get\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Get user by user name\",\n        \"description\": \"\",\n        \"operationId\": \"getUserByName\",\n        \"parameters\": [\n          {\n            \"name\": \"username\",\n            \"in\": \"path\",\n            \"description\": \"The name that needs to be fetched. Use user1 for testing. \",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"content\": {\n              \"application/xml\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    },\n                    \"username\": {\n                      \"type\": \"string\"\n                    },\n                    \"firstName\": {\n                      \"type\": \"string\"\n                    },\n                    \"lastName\": {\n                      \"type\": \"string\"\n                    },\n                    \"email\": {\n                      \"type\": \"string\"\n                    },\n                    \"password\": {\n                      \"type\": \"string\"\n                    },\n                    \"phone\": {\n                      \"type\": \"string\"\n                    },\n                    \"userStatus\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int32\",\n                      \"description\": \"User Status\"\n                    }\n                  },\n                  \"xml\": {\n                    \"name\": \"User\"\n                  },\n                  \"x-oldref\": \"#/components/schemas/User\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    },\n                    \"username\": {\n                      \"type\": \"string\"\n                    },\n                    \"firstName\": {\n                      \"type\": \"string\"\n                    },\n                    \"lastName\": {\n                      \"type\": \"string\"\n                    },\n                    \"email\": {\n                      \"type\": \"string\"\n                    },\n                    \"password\": {\n                      \"type\": \"string\"\n                    },\n                    \"phone\": {\n                      \"type\": \"string\"\n                    },\n                    \"userStatus\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int32\",\n                      \"description\": \"User Status\"\n                    }\n                  },\n                  \"xml\": {\n                    \"name\": \"User\"\n                  },\n                  \"x-oldref\": \"#/components/schemas/User\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid username supplied\"\n          },\n          \"404\": {\n            \"description\": \"User not found\"\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Updated user\",\n        \"description\": \"This can only be done by the logged in user.\",\n        \"operationId\": \"updateUser\",\n        \"parameters\": [\n          {\n            \"name\": \"username\",\n            \"in\": \"path\",\n            \"description\": \"name that need to be updated\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"400\": {\n            \"description\": \"Invalid user supplied\"\n          },\n          \"404\": {\n            \"description\": \"User not found\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                  },\n                  \"username\": {\n                    \"type\": \"string\"\n                  },\n                  \"firstName\": {\n                    \"type\": \"string\"\n                  },\n                  \"lastName\": {\n                    \"type\": \"string\"\n                  },\n                  \"email\": {\n                    \"type\": \"string\"\n                  },\n                  \"password\": {\n                    \"type\": \"string\"\n                  },\n                  \"phone\": {\n                    \"type\": \"string\"\n                  },\n                  \"userStatus\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\",\n                    \"description\": \"User Status\"\n                  }\n                },\n                \"xml\": {\n                  \"name\": \"User\"\n                },\n                \"x-oldref\": \"#/components/schemas/User\"\n              }\n            }\n          },\n          \"description\": \"Updated user object\",\n          \"required\": true\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Delete user\",\n        \"description\": \"This can only be done by the logged in user.\",\n        \"operationId\": \"deleteUser\",\n        \"parameters\": [\n          {\n            \"name\": \"username\",\n            \"in\": \"path\",\n            \"description\": \"The name that needs to be deleted\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"400\": {\n            \"description\": \"Invalid username supplied\"\n          },\n          \"404\": {\n            \"description\": \"User not found\"\n          }\n        }\n      }\n    }\n  },\n  \"externalDocs\": {\n    \"description\": \"Find out more about Swagger\",\n    \"url\": \"http://swagger.io\"\n  },\n  \"components\": {\n    \"schemas\": {\n      \"Order\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"petId\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"quantity\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"shipDate\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"status\": {\n            \"type\": \"string\",\n            \"description\": \"Order Status\",\n            \"enum\": [\n              \"placed\",\n              \"approved\",\n              \"delivered\"\n            ]\n          },\n          \"complete\": {\n            \"type\": \"boolean\",\n            \"default\": false\n          }\n        },\n        \"xml\": {\n          \"name\": \"Order\"\n        },\n        \"x-oldref\": \"#/components/schemas/Order\"\n      },\n      \"Category\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          }\n        },\n        \"xml\": {\n          \"name\": \"Category\"\n        },\n        \"x-oldref\": \"#/components/schemas/Category\"\n      },\n      \"User\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"username\": {\n            \"type\": \"string\"\n          },\n          \"firstName\": {\n            \"type\": \"string\"\n          },\n          \"lastName\": {\n            \"type\": \"string\"\n          },\n          \"email\": {\n            \"type\": \"string\"\n          },\n          \"password\": {\n            \"type\": \"string\"\n          },\n          \"phone\": {\n            \"type\": \"string\"\n          },\n          \"userStatus\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"description\": \"User Status\"\n          }\n        },\n        \"xml\": {\n          \"name\": \"User\"\n        },\n        \"x-oldref\": \"#/components/schemas/User\"\n      },\n      \"Tag\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          }\n        },\n        \"xml\": {\n          \"name\": \"Tag\"\n        },\n        \"x-oldref\": \"#/components/schemas/Tag\"\n      },\n      \"Pet\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"name\",\n          \"photoUrls\"\n        ],\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"category\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"id\": {\n                \"type\": \"integer\",\n                \"format\": \"int64\"\n              },\n              \"name\": {\n                \"type\": \"string\"\n              }\n            },\n            \"xml\": {\n              \"name\": \"Category\"\n            },\n            \"x-oldref\": \"#/components/schemas/Category\"\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"example\": \"doggie\"\n          },\n          \"photoUrls\": {\n            \"type\": \"array\",\n            \"xml\": {\n              \"name\": \"photoUrl\",\n              \"wrapped\": true\n            },\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"tags\": {\n            \"type\": \"array\",\n            \"xml\": {\n              \"name\": \"tag\",\n              \"wrapped\": true\n            },\n            \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"id\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                },\n                \"name\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"xml\": {\n                \"name\": \"Tag\"\n              },\n              \"x-oldref\": \"#/components/schemas/Tag\"\n            }\n          },\n          \"status\": {\n            \"type\": \"string\",\n            \"description\": \"pet status in the store\",\n            \"enum\": [\n              \"available\",\n              \"pending\",\n              \"sold\"\n            ]\n          }\n        },\n        \"xml\": {\n          \"name\": \"Pet\"\n        },\n        \"x-oldref\": \"#/components/schemas/Pet\"\n      },\n      \"ApiResponse\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"code\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"type\": {\n            \"type\": \"string\"\n          },\n          \"message\": {\n            \"type\": \"string\"\n          }\n        },\n        \"x-oldref\": \"#/components/schemas/ApiResponse\"\n      }\n    },\n    \"requestBodies\": {\n      \"Pet\": {\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"required\": [\n                \"name\",\n                \"photoUrls\"\n              ],\n              \"properties\": {\n                \"id\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                },\n                \"category\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    },\n                    \"name\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"xml\": {\n                    \"name\": \"Category\"\n                  },\n                  \"x-oldref\": \"#/components/schemas/Category\"\n                },\n                \"name\": {\n                  \"type\": \"string\",\n                  \"example\": \"doggie\"\n                },\n                \"photoUrls\": {\n                  \"type\": \"array\",\n                  \"xml\": {\n                    \"name\": \"photoUrl\",\n                    \"wrapped\": true\n                  },\n                  \"items\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"tags\": {\n                  \"type\": \"array\",\n                  \"xml\": {\n                    \"name\": \"tag\",\n                    \"wrapped\": true\n                  },\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"id\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                      },\n                      \"name\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"xml\": {\n                      \"name\": \"Tag\"\n                    },\n                    \"x-oldref\": \"#/components/schemas/Tag\"\n                  }\n                },\n                \"status\": {\n                  \"type\": \"string\",\n                  \"description\": \"pet status in the store\",\n                  \"enum\": [\n                    \"available\",\n                    \"pending\",\n                    \"sold\"\n                  ]\n                }\n              },\n              \"xml\": {\n                \"name\": \"Pet\"\n              },\n              \"x-oldref\": \"#/components/schemas/Pet\"\n            }\n          },\n          \"application/xml\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"required\": [\n                \"name\",\n                \"photoUrls\"\n              ],\n              \"properties\": {\n                \"id\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                },\n                \"category\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    },\n                    \"name\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"xml\": {\n                    \"name\": \"Category\"\n                  },\n                  \"x-oldref\": \"#/components/schemas/Category\"\n                },\n                \"name\": {\n                  \"type\": \"string\",\n                  \"example\": \"doggie\"\n                },\n                \"photoUrls\": {\n                  \"type\": \"array\",\n                  \"xml\": {\n                    \"name\": \"photoUrl\",\n                    \"wrapped\": true\n                  },\n                  \"items\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"tags\": {\n                  \"type\": \"array\",\n                  \"xml\": {\n                    \"name\": \"tag\",\n                    \"wrapped\": true\n                  },\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"id\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                      },\n                      \"name\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"xml\": {\n                      \"name\": \"Tag\"\n                    },\n                    \"x-oldref\": \"#/components/schemas/Tag\"\n                  }\n                },\n                \"status\": {\n                  \"type\": \"string\",\n                  \"description\": \"pet status in the store\",\n                  \"enum\": [\n                    \"available\",\n                    \"pending\",\n                    \"sold\"\n                  ]\n                }\n              },\n              \"xml\": {\n                \"name\": \"Pet\"\n              },\n              \"x-oldref\": \"#/components/schemas/Pet\"\n            }\n          }\n        },\n        \"description\": \"Pet object that needs to be added to the store\",\n        \"required\": true,\n        \"x-oldref\": \"#/components/requestBodies/Pet\"\n      },\n      \"UserArray\": {\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                  },\n                  \"username\": {\n                    \"type\": \"string\"\n                  },\n                  \"firstName\": {\n                    \"type\": \"string\"\n                  },\n                  \"lastName\": {\n                    \"type\": \"string\"\n                  },\n                  \"email\": {\n                    \"type\": \"string\"\n                  },\n                  \"password\": {\n                    \"type\": \"string\"\n                  },\n                  \"phone\": {\n                    \"type\": \"string\"\n                  },\n                  \"userStatus\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\",\n                    \"description\": \"User Status\"\n                  }\n                },\n                \"xml\": {\n                  \"name\": \"User\"\n                },\n                \"x-oldref\": \"#/components/schemas/User\"\n              }\n            }\n          }\n        },\n        \"description\": \"List of user object\",\n        \"required\": true,\n        \"x-oldref\": \"#/components/requestBodies/UserArray\"\n      }\n    },\n    \"securitySchemes\": {\n      \"petstore_auth\": {\n        \"type\": \"oauth2\",\n        \"flows\": {\n          \"implicit\": {\n            \"authorizationUrl\": \"http://petstore.swagger.io/oauth/dialog\",\n            \"scopes\": {\n              \"write:pets\": \"modify pets in your account\",\n              \"read:pets\": \"read your pets\"\n            }\n          }\n        }\n      },\n      \"api_key\": {\n        \"type\": \"apiKey\",\n        \"name\": \"api_key\",\n        \"in\": \"header\"\n      }\n    }\n  }\n}",
  "openapi": {
    "operationCounter": 1,
    "version": "3.0.0",
    "servers": [
      {
        "url": "http://petstore.swagger.io/v2"
      }
    ]
  },
  "hasAuthMethods": true,
  "authMethods": [
    {
      "name": "petstore_auth",
      "isApiKey": false,
      "isBasic": false,
      "isOAuth": true,
      "flow": "implicit",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "scopes": [
        {
          "scope": "write:pets",
          "-first": true,
          "-last": false,
          "hasMore": true
        },
        {
          "scope": "read:pets",
          "-first": false,
          "-last": true,
          "hasMore": false
        }
      ],
      "-first": true,
      "-last": false,
      "hasMore": true
    },
    {
      "name": "api_key",
      "isApiKey": true,
      "isBasic": false,
      "isOAuth": false,
      "keyParamName": "api_key",
      "isKeyInQuery": false,
      "isKeyInHeader": true,
      "isKeyInCookie": false,
      "-first": false,
      "-last": true,
      "hasMore": false
    }
  ],
  "messages": [
    {
      "level": "Valid",
      "elementType": "Context",
      "elementId": "None",
      "message": "No validation errors detected"
    }
  ],
  "consumes": [
    {
      "mediaType": "application/json",
      "-first": true,
      "-last": false,
      "hasMore": true
    },
    {
      "mediaType": "application/x-www-form-urlencoded",
      "-first": false,
      "-last": false,
      "hasMore": true
    },
    {
      "mediaType": "application/octet-stream",
      "-first": false,
      "-last": true,
      "hasMore": false
    }
  ],
  "produces": [
    {
      "mediaType": "application/xml",
      "-first": true,
      "-last": false,
      "hasMore": true
    },
    {
      "mediaType": "application/json",
      "-first": false,
      "-last": true,
      "hasMore": false
    }
  ],
  "apiInfo": {
    "apis": [
      {
        "name": "pet",
        "classname": "petApi",
        "classFilename": "petApi",
        "classVarName": "pet",
        "packageName": "IO.OpenAPI",
        "operations": {
          "operation": [
            {
              "httpMethod": "POST",
              "path": "/pet",
              "replacedPathName": "/pet",
              "operationId": "addPet",
              "operationIdLowerCase": "addpet",
              "operationIdSnakeCase": "add_pet",
              "nickname": "addPet",
              "description": "",
              "summary": "Add a new pet to the store",
              "allParams": [
                {
                  "isBodyParam": true,
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isFormParam": false,
                  "isDate": false,
                  "isDateTime": false,
                  "baseName": "body",
                  "paramName": "body",
                  "baseType": "object",
                  "required": true,
                  "optional": false,
                  "dataType": "object",
                  "description": "Pet object that needs to be added to the store",
                  "schema": {
                    "type": "object",
                    "required": [
                      "name",
                      "photoUrls"
                    ],
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "category": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "xml": {
                          "name": "Category"
                        },
                        "x-oldref": "#/components/schemas/Category"
                      },
                      "name": {
                        "type": "string",
                        "example": "doggie"
                      },
                      "photoUrls": {
                        "type": "array",
                        "xml": {
                          "name": "photoUrl",
                          "wrapped": true
                        },
                        "items": {
                          "type": "string"
                        }
                      },
                      "tags": {
                        "type": "array",
                        "xml": {
                          "name": "tag",
                          "wrapped": true
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "xml": {
                            "name": "Tag"
                          },
                          "x-oldref": "#/components/schemas/Tag"
                        }
                      },
                      "status": {
                        "type": "string",
                        "description": "pet status in the store",
                        "enum": [
                          "available",
                          "pending",
                          "sold"
                        ]
                      }
                    },
                    "xml": {
                      "name": "Pet"
                    },
                    "x-oldref": "#/components/schemas/Pet"
                  },
                  "isEnum": false,
                  "vendorExtensions": {
                    "x-oldref": "#/components/requestBodies/Pet"
                  },
                  "example": "{\"id\":0,\"category\":{\"id\":0,\"name\":\"string\"},\"name\":\"doggie\",\"photoUrls\":[\"string\"],\"tags\":[{\"id\":0,\"name\":\"string\"}],\"status\":\"available\"}",
                  "type": "object",
                  "%dataType%": "object",
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"required\": [\n      \"name\",\n      \"photoUrls\"\n    ],\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"category\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          }\n        },\n        \"xml\": {\n          \"name\": \"Category\"\n        },\n        \"x-oldref\": \"#/components/schemas/Category\"\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"example\": \"doggie\"\n      },\n      \"photoUrls\": {\n        \"type\": \"array\",\n        \"xml\": {\n          \"name\": \"photoUrl\",\n          \"wrapped\": true\n        },\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"tags\": {\n        \"type\": \"array\",\n        \"xml\": {\n          \"name\": \"tag\",\n          \"wrapped\": true\n        },\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            }\n          },\n          \"xml\": {\n            \"name\": \"Tag\"\n          },\n          \"x-oldref\": \"#/components/schemas/Tag\"\n        }\n      },\n      \"status\": {\n        \"type\": \"string\",\n        \"description\": \"pet status in the store\",\n        \"enum\": [\n          \"available\",\n          \"pending\",\n          \"sold\"\n        ]\n      }\n    },\n    \"xml\": {\n      \"name\": \"Pet\"\n    },\n    \"x-oldref\": \"#/components/schemas/Pet\"\n  }\n}",
                  "isFile": false,
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "pathParams": [],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "notes": {
                "isEmpty": true
              },
              "isResponseBinary": false,
              "isResponseFile": false,
              "baseName": "pet",
              "consumes": [
                {
                  "mediaType": "application/json",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "hasParams": true,
              "hasOptionalParams": false,
              "hasRequiredParams": true,
              "hasQueryParams": false,
              "hasFormParams": false,
              "hasPathParams": false,
              "hasHeaderParams": false,
              "hasBodyParam": true,
              "openapi": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "name",
                          "photoUrls"
                        ],
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "category": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "format": "int64"
                              },
                              "name": {
                                "type": "string"
                              }
                            },
                            "xml": {
                              "name": "Category"
                            },
                            "x-oldref": "#/components/schemas/Category"
                          },
                          "name": {
                            "type": "string",
                            "example": "doggie"
                          },
                          "photoUrls": {
                            "type": "array",
                            "xml": {
                              "name": "photoUrl",
                              "wrapped": true
                            },
                            "items": {
                              "type": "string"
                            }
                          },
                          "tags": {
                            "type": "array",
                            "xml": {
                              "name": "tag",
                              "wrapped": true
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "name": {
                                  "type": "string"
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              },
                              "x-oldref": "#/components/schemas/Tag"
                            }
                          },
                          "status": {
                            "type": "string",
                            "description": "pet status in the store",
                            "enum": [
                              "available",
                              "pending",
                              "sold"
                            ]
                          }
                        },
                        "xml": {
                          "name": "Pet"
                        },
                        "x-oldref": "#/components/schemas/Pet"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "name",
                          "photoUrls"
                        ],
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "category": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "format": "int64"
                              },
                              "name": {
                                "type": "string"
                              }
                            },
                            "xml": {
                              "name": "Category"
                            },
                            "x-oldref": "#/components/schemas/Category"
                          },
                          "name": {
                            "type": "string",
                            "example": "doggie"
                          },
                          "photoUrls": {
                            "type": "array",
                            "xml": {
                              "name": "photoUrl",
                              "wrapped": true
                            },
                            "items": {
                              "type": "string"
                            }
                          },
                          "tags": {
                            "type": "array",
                            "xml": {
                              "name": "tag",
                              "wrapped": true
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "name": {
                                  "type": "string"
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              },
                              "x-oldref": "#/components/schemas/Tag"
                            }
                          },
                          "status": {
                            "type": "string",
                            "description": "pet status in the store",
                            "enum": [
                              "available",
                              "pending",
                              "sold"
                            ]
                          }
                        },
                        "xml": {
                          "name": "Pet"
                        },
                        "x-oldref": "#/components/schemas/Pet"
                      }
                    }
                  },
                  "description": "Pet object that needs to be added to the store",
                  "required": true,
                  "x-oldref": "#/components/requestBodies/Pet"
                }
              },
              "hasAuthMethods": true,
              "authMethods": [
                {
                  "name": "petstore_auth",
                  "isApiKey": false,
                  "isBasic": false,
                  "isOAuth": true,
                  "flow": "implicit",
                  "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
                  "scopes": [
                    {
                      "scope": "write:pets",
                      "-first": true,
                      "-last": false,
                      "hasMore": true
                    },
                    {
                      "scope": "read:pets",
                      "-first": false,
                      "-last": true,
                      "hasMore": false
                    }
                  ],
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "bodyParams": [
                {
                  "isBodyParam": true,
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isFormParam": false,
                  "isDate": false,
                  "isDateTime": false,
                  "baseName": "body",
                  "paramName": "body",
                  "baseType": "object",
                  "required": true,
                  "optional": false,
                  "dataType": "object",
                  "description": "Pet object that needs to be added to the store",
                  "schema": {
                    "type": "object",
                    "required": [
                      "name",
                      "photoUrls"
                    ],
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "category": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "xml": {
                          "name": "Category"
                        },
                        "x-oldref": "#/components/schemas/Category"
                      },
                      "name": {
                        "type": "string",
                        "example": "doggie"
                      },
                      "photoUrls": {
                        "type": "array",
                        "xml": {
                          "name": "photoUrl",
                          "wrapped": true
                        },
                        "items": {
                          "type": "string"
                        }
                      },
                      "tags": {
                        "type": "array",
                        "xml": {
                          "name": "tag",
                          "wrapped": true
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "xml": {
                            "name": "Tag"
                          },
                          "x-oldref": "#/components/schemas/Tag"
                        }
                      },
                      "status": {
                        "type": "string",
                        "description": "pet status in the store",
                        "enum": [
                          "available",
                          "pending",
                          "sold"
                        ]
                      }
                    },
                    "xml": {
                      "name": "Pet"
                    },
                    "x-oldref": "#/components/schemas/Pet"
                  },
                  "isEnum": false,
                  "vendorExtensions": {
                    "x-oldref": "#/components/requestBodies/Pet"
                  },
                  "example": "{\"id\":0,\"category\":{\"id\":0,\"name\":\"string\"},\"name\":\"doggie\",\"photoUrls\":[\"string\"],\"tags\":[{\"id\":0,\"name\":\"string\"}],\"status\":\"available\"}",
                  "type": "object",
                  "%dataType%": "object",
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"required\": [\n      \"name\",\n      \"photoUrls\"\n    ],\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"category\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          }\n        },\n        \"xml\": {\n          \"name\": \"Category\"\n        },\n        \"x-oldref\": \"#/components/schemas/Category\"\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"example\": \"doggie\"\n      },\n      \"photoUrls\": {\n        \"type\": \"array\",\n        \"xml\": {\n          \"name\": \"photoUrl\",\n          \"wrapped\": true\n        },\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"tags\": {\n        \"type\": \"array\",\n        \"xml\": {\n          \"name\": \"tag\",\n          \"wrapped\": true\n        },\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            }\n          },\n          \"xml\": {\n            \"name\": \"Tag\"\n          },\n          \"x-oldref\": \"#/components/schemas/Tag\"\n        }\n      },\n      \"status\": {\n        \"type\": \"string\",\n        \"description\": \"pet status in the store\",\n        \"enum\": [\n          \"available\",\n          \"pending\",\n          \"sold\"\n        ]\n      }\n    },\n    \"xml\": {\n      \"name\": \"Pet\"\n    },\n    \"x-oldref\": \"#/components/schemas/Pet\"\n  }\n}",
                  "isFile": false,
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "bodyParam": {
                "isBodyParam": true,
                "isHeaderParam": false,
                "isQueryParam": false,
                "isPathParam": false,
                "isFormParam": false,
                "isDate": false,
                "isDateTime": false,
                "baseName": "body",
                "paramName": "body",
                "baseType": "object",
                "required": true,
                "optional": false,
                "dataType": "object",
                "description": "Pet object that needs to be added to the store",
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "photoUrls"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "category": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "xml": {
                        "name": "Category"
                      },
                      "x-oldref": "#/components/schemas/Category"
                    },
                    "name": {
                      "type": "string",
                      "example": "doggie"
                    },
                    "photoUrls": {
                      "type": "array",
                      "xml": {
                        "name": "photoUrl",
                        "wrapped": true
                      },
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "xml": {
                        "name": "tag",
                        "wrapped": true
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "xml": {
                          "name": "Tag"
                        },
                        "x-oldref": "#/components/schemas/Tag"
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "pet status in the store",
                      "enum": [
                        "available",
                        "pending",
                        "sold"
                      ]
                    }
                  },
                  "xml": {
                    "name": "Pet"
                  },
                  "x-oldref": "#/components/schemas/Pet"
                },
                "isEnum": false,
                "vendorExtensions": {
                  "x-oldref": "#/components/requestBodies/Pet"
                },
                "example": "{\"id\":0,\"category\":{\"id\":0,\"name\":\"string\"},\"name\":\"doggie\",\"photoUrls\":[\"string\"],\"tags\":[{\"id\":0,\"name\":\"string\"}],\"status\":\"available\"}",
                "type": "object",
                "%dataType%": "object",
                "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"required\": [\n      \"name\",\n      \"photoUrls\"\n    ],\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"category\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          }\n        },\n        \"xml\": {\n          \"name\": \"Category\"\n        },\n        \"x-oldref\": \"#/components/schemas/Category\"\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"example\": \"doggie\"\n      },\n      \"photoUrls\": {\n        \"type\": \"array\",\n        \"xml\": {\n          \"name\": \"photoUrl\",\n          \"wrapped\": true\n        },\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"tags\": {\n        \"type\": \"array\",\n        \"xml\": {\n          \"name\": \"tag\",\n          \"wrapped\": true\n        },\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            }\n          },\n          \"xml\": {\n            \"name\": \"Tag\"\n          },\n          \"x-oldref\": \"#/components/schemas/Tag\"\n        }\n      },\n      \"status\": {\n        \"type\": \"string\",\n        \"description\": \"pet status in the store\",\n        \"enum\": [\n          \"available\",\n          \"pending\",\n          \"sold\"\n        ]\n      }\n    },\n    \"xml\": {\n      \"name\": \"Pet\"\n    },\n    \"x-oldref\": \"#/components/schemas/Pet\"\n  }\n}",
                "isFile": false,
                "-first": true,
                "-last": true,
                "hasMore": false
              },
              "hasConsumes": true,
              "tags": [
                "pet"
              ],
              "imports": [
                "pet"
              ],
              "vendorExtensions": {},
              "responses": [
                {
                  "code": "405",
                  "isDefault": false,
                  "nickname": "response405",
                  "message": "Invalid input",
                  "description": "Invalid input",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                }
              ],
              "examples": [],
              "-first": true,
              "-last": false,
              "hasMore": true
            },
            {
              "httpMethod": "PUT",
              "path": "/pet",
              "replacedPathName": "/pet",
              "operationId": "updatePet",
              "operationIdLowerCase": "updatepet",
              "operationIdSnakeCase": "update_pet",
              "nickname": "updatePet",
              "description": "",
              "summary": "Update an existing pet",
              "allParams": [
                {
                  "isBodyParam": true,
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isFormParam": false,
                  "isDate": false,
                  "isDateTime": false,
                  "baseName": "body",
                  "paramName": "body",
                  "baseType": "object",
                  "required": true,
                  "optional": false,
                  "dataType": "object",
                  "description": "Pet object that needs to be added to the store",
                  "schema": {
                    "type": "object",
                    "required": [
                      "name",
                      "photoUrls"
                    ],
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "category": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "xml": {
                          "name": "Category"
                        },
                        "x-oldref": "#/components/schemas/Category"
                      },
                      "name": {
                        "type": "string",
                        "example": "doggie"
                      },
                      "photoUrls": {
                        "type": "array",
                        "xml": {
                          "name": "photoUrl",
                          "wrapped": true
                        },
                        "items": {
                          "type": "string"
                        }
                      },
                      "tags": {
                        "type": "array",
                        "xml": {
                          "name": "tag",
                          "wrapped": true
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "xml": {
                            "name": "Tag"
                          },
                          "x-oldref": "#/components/schemas/Tag"
                        }
                      },
                      "status": {
                        "type": "string",
                        "description": "pet status in the store",
                        "enum": [
                          "available",
                          "pending",
                          "sold"
                        ]
                      }
                    },
                    "xml": {
                      "name": "Pet"
                    },
                    "x-oldref": "#/components/schemas/Pet"
                  },
                  "isEnum": false,
                  "vendorExtensions": {
                    "x-oldref": "#/components/requestBodies/Pet"
                  },
                  "example": "{\"id\":0,\"category\":{\"id\":0,\"name\":\"string\"},\"name\":\"doggie\",\"photoUrls\":[\"string\"],\"tags\":[{\"id\":0,\"name\":\"string\"}],\"status\":\"available\"}",
                  "type": "object",
                  "%dataType%": "object",
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"required\": [\n      \"name\",\n      \"photoUrls\"\n    ],\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"category\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          }\n        },\n        \"xml\": {\n          \"name\": \"Category\"\n        },\n        \"x-oldref\": \"#/components/schemas/Category\"\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"example\": \"doggie\"\n      },\n      \"photoUrls\": {\n        \"type\": \"array\",\n        \"xml\": {\n          \"name\": \"photoUrl\",\n          \"wrapped\": true\n        },\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"tags\": {\n        \"type\": \"array\",\n        \"xml\": {\n          \"name\": \"tag\",\n          \"wrapped\": true\n        },\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            }\n          },\n          \"xml\": {\n            \"name\": \"Tag\"\n          },\n          \"x-oldref\": \"#/components/schemas/Tag\"\n        }\n      },\n      \"status\": {\n        \"type\": \"string\",\n        \"description\": \"pet status in the store\",\n        \"enum\": [\n          \"available\",\n          \"pending\",\n          \"sold\"\n        ]\n      }\n    },\n    \"xml\": {\n      \"name\": \"Pet\"\n    },\n    \"x-oldref\": \"#/components/schemas/Pet\"\n  }\n}",
                  "isFile": false,
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "pathParams": [],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "notes": {
                "isEmpty": true
              },
              "isResponseBinary": false,
              "isResponseFile": false,
              "baseName": "pet",
              "consumes": [
                {
                  "mediaType": "application/json",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "hasParams": true,
              "hasOptionalParams": false,
              "hasRequiredParams": true,
              "hasQueryParams": false,
              "hasFormParams": false,
              "hasPathParams": false,
              "hasHeaderParams": false,
              "hasBodyParam": true,
              "openapi": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "name",
                          "photoUrls"
                        ],
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "category": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "format": "int64"
                              },
                              "name": {
                                "type": "string"
                              }
                            },
                            "xml": {
                              "name": "Category"
                            },
                            "x-oldref": "#/components/schemas/Category"
                          },
                          "name": {
                            "type": "string",
                            "example": "doggie"
                          },
                          "photoUrls": {
                            "type": "array",
                            "xml": {
                              "name": "photoUrl",
                              "wrapped": true
                            },
                            "items": {
                              "type": "string"
                            }
                          },
                          "tags": {
                            "type": "array",
                            "xml": {
                              "name": "tag",
                              "wrapped": true
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "name": {
                                  "type": "string"
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              },
                              "x-oldref": "#/components/schemas/Tag"
                            }
                          },
                          "status": {
                            "type": "string",
                            "description": "pet status in the store",
                            "enum": [
                              "available",
                              "pending",
                              "sold"
                            ]
                          }
                        },
                        "xml": {
                          "name": "Pet"
                        },
                        "x-oldref": "#/components/schemas/Pet"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "name",
                          "photoUrls"
                        ],
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "category": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "format": "int64"
                              },
                              "name": {
                                "type": "string"
                              }
                            },
                            "xml": {
                              "name": "Category"
                            },
                            "x-oldref": "#/components/schemas/Category"
                          },
                          "name": {
                            "type": "string",
                            "example": "doggie"
                          },
                          "photoUrls": {
                            "type": "array",
                            "xml": {
                              "name": "photoUrl",
                              "wrapped": true
                            },
                            "items": {
                              "type": "string"
                            }
                          },
                          "tags": {
                            "type": "array",
                            "xml": {
                              "name": "tag",
                              "wrapped": true
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "name": {
                                  "type": "string"
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              },
                              "x-oldref": "#/components/schemas/Tag"
                            }
                          },
                          "status": {
                            "type": "string",
                            "description": "pet status in the store",
                            "enum": [
                              "available",
                              "pending",
                              "sold"
                            ]
                          }
                        },
                        "xml": {
                          "name": "Pet"
                        },
                        "x-oldref": "#/components/schemas/Pet"
                      }
                    }
                  },
                  "description": "Pet object that needs to be added to the store",
                  "required": true,
                  "x-oldref": "#/components/requestBodies/Pet"
                }
              },
              "hasAuthMethods": true,
              "authMethods": [
                {
                  "name": "petstore_auth",
                  "isApiKey": false,
                  "isBasic": false,
                  "isOAuth": true,
                  "flow": "implicit",
                  "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
                  "scopes": [
                    {
                      "scope": "write:pets",
                      "-first": true,
                      "-last": false,
                      "hasMore": true
                    },
                    {
                      "scope": "read:pets",
                      "-first": false,
                      "-last": true,
                      "hasMore": false
                    }
                  ],
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "bodyParams": [
                {
                  "isBodyParam": true,
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isFormParam": false,
                  "isDate": false,
                  "isDateTime": false,
                  "baseName": "body",
                  "paramName": "body",
                  "baseType": "object",
                  "required": true,
                  "optional": false,
                  "dataType": "object",
                  "description": "Pet object that needs to be added to the store",
                  "schema": {
                    "type": "object",
                    "required": [
                      "name",
                      "photoUrls"
                    ],
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "category": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "xml": {
                          "name": "Category"
                        },
                        "x-oldref": "#/components/schemas/Category"
                      },
                      "name": {
                        "type": "string",
                        "example": "doggie"
                      },
                      "photoUrls": {
                        "type": "array",
                        "xml": {
                          "name": "photoUrl",
                          "wrapped": true
                        },
                        "items": {
                          "type": "string"
                        }
                      },
                      "tags": {
                        "type": "array",
                        "xml": {
                          "name": "tag",
                          "wrapped": true
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "xml": {
                            "name": "Tag"
                          },
                          "x-oldref": "#/components/schemas/Tag"
                        }
                      },
                      "status": {
                        "type": "string",
                        "description": "pet status in the store",
                        "enum": [
                          "available",
                          "pending",
                          "sold"
                        ]
                      }
                    },
                    "xml": {
                      "name": "Pet"
                    },
                    "x-oldref": "#/components/schemas/Pet"
                  },
                  "isEnum": false,
                  "vendorExtensions": {
                    "x-oldref": "#/components/requestBodies/Pet"
                  },
                  "example": "{\"id\":0,\"category\":{\"id\":0,\"name\":\"string\"},\"name\":\"doggie\",\"photoUrls\":[\"string\"],\"tags\":[{\"id\":0,\"name\":\"string\"}],\"status\":\"available\"}",
                  "type": "object",
                  "%dataType%": "object",
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"required\": [\n      \"name\",\n      \"photoUrls\"\n    ],\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"category\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          }\n        },\n        \"xml\": {\n          \"name\": \"Category\"\n        },\n        \"x-oldref\": \"#/components/schemas/Category\"\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"example\": \"doggie\"\n      },\n      \"photoUrls\": {\n        \"type\": \"array\",\n        \"xml\": {\n          \"name\": \"photoUrl\",\n          \"wrapped\": true\n        },\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"tags\": {\n        \"type\": \"array\",\n        \"xml\": {\n          \"name\": \"tag\",\n          \"wrapped\": true\n        },\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            }\n          },\n          \"xml\": {\n            \"name\": \"Tag\"\n          },\n          \"x-oldref\": \"#/components/schemas/Tag\"\n        }\n      },\n      \"status\": {\n        \"type\": \"string\",\n        \"description\": \"pet status in the store\",\n        \"enum\": [\n          \"available\",\n          \"pending\",\n          \"sold\"\n        ]\n      }\n    },\n    \"xml\": {\n      \"name\": \"Pet\"\n    },\n    \"x-oldref\": \"#/components/schemas/Pet\"\n  }\n}",
                  "isFile": false,
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "bodyParam": {
                "isBodyParam": true,
                "isHeaderParam": false,
                "isQueryParam": false,
                "isPathParam": false,
                "isFormParam": false,
                "isDate": false,
                "isDateTime": false,
                "baseName": "body",
                "paramName": "body",
                "baseType": "object",
                "required": true,
                "optional": false,
                "dataType": "object",
                "description": "Pet object that needs to be added to the store",
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "photoUrls"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "category": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "xml": {
                        "name": "Category"
                      },
                      "x-oldref": "#/components/schemas/Category"
                    },
                    "name": {
                      "type": "string",
                      "example": "doggie"
                    },
                    "photoUrls": {
                      "type": "array",
                      "xml": {
                        "name": "photoUrl",
                        "wrapped": true
                      },
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "xml": {
                        "name": "tag",
                        "wrapped": true
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "xml": {
                          "name": "Tag"
                        },
                        "x-oldref": "#/components/schemas/Tag"
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "pet status in the store",
                      "enum": [
                        "available",
                        "pending",
                        "sold"
                      ]
                    }
                  },
                  "xml": {
                    "name": "Pet"
                  },
                  "x-oldref": "#/components/schemas/Pet"
                },
                "isEnum": false,
                "vendorExtensions": {
                  "x-oldref": "#/components/requestBodies/Pet"
                },
                "example": "{\"id\":0,\"category\":{\"id\":0,\"name\":\"string\"},\"name\":\"doggie\",\"photoUrls\":[\"string\"],\"tags\":[{\"id\":0,\"name\":\"string\"}],\"status\":\"available\"}",
                "type": "object",
                "%dataType%": "object",
                "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"required\": [\n      \"name\",\n      \"photoUrls\"\n    ],\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"category\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          }\n        },\n        \"xml\": {\n          \"name\": \"Category\"\n        },\n        \"x-oldref\": \"#/components/schemas/Category\"\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"example\": \"doggie\"\n      },\n      \"photoUrls\": {\n        \"type\": \"array\",\n        \"xml\": {\n          \"name\": \"photoUrl\",\n          \"wrapped\": true\n        },\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"tags\": {\n        \"type\": \"array\",\n        \"xml\": {\n          \"name\": \"tag\",\n          \"wrapped\": true\n        },\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            }\n          },\n          \"xml\": {\n            \"name\": \"Tag\"\n          },\n          \"x-oldref\": \"#/components/schemas/Tag\"\n        }\n      },\n      \"status\": {\n        \"type\": \"string\",\n        \"description\": \"pet status in the store\",\n        \"enum\": [\n          \"available\",\n          \"pending\",\n          \"sold\"\n        ]\n      }\n    },\n    \"xml\": {\n      \"name\": \"Pet\"\n    },\n    \"x-oldref\": \"#/components/schemas/Pet\"\n  }\n}",
                "isFile": false,
                "-first": true,
                "-last": true,
                "hasMore": false
              },
              "hasConsumes": true,
              "tags": [
                "pet"
              ],
              "imports": [
                "pet"
              ],
              "vendorExtensions": {},
              "responses": [
                {
                  "code": "400",
                  "isDefault": false,
                  "nickname": "response400",
                  "message": "Invalid ID supplied",
                  "description": "Invalid ID supplied",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                },
                {
                  "code": "404",
                  "isDefault": false,
                  "nickname": "response404",
                  "message": "Pet not found",
                  "description": "Pet not found",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                },
                {
                  "code": "405",
                  "isDefault": false,
                  "nickname": "response405",
                  "message": "Validation exception",
                  "description": "Validation exception",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                }
              ],
              "examples": [],
              "-first": false,
              "-last": false,
              "hasMore": true
            },
            {
              "httpMethod": "GET",
              "path": "/pet/findByStatus",
              "replacedPathName": "/pet/findByStatus",
              "operationId": "findPetsByStatus",
              "operationIdLowerCase": "findpetsbystatus",
              "operationIdSnakeCase": "find_pets_by_status",
              "nickname": "findPetsByStatus",
              "description": "Multiple status values can be provided with comma separated strings",
              "summary": "Finds Pets by status",
              "allParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": true,
                  "isPathParam": false,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "status",
                  "baseName": "status",
                  "required": true,
                  "optional": false,
                  "dataType": "array",
                  "%dataType%": "array",
                  "example": "[\"available\"]",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "isDate": false,
                  "isDateTime": false,
                  "description": "Status values that need to be considered for filter",
                  "unescapedDescription": "Status values that need to be considered for filter",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "pathParams": [],
              "queryParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": true,
                  "isPathParam": false,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "status",
                  "baseName": "status",
                  "required": true,
                  "optional": false,
                  "dataType": "array",
                  "%dataType%": "array",
                  "example": "[\"available\"]",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "isDate": false,
                  "isDateTime": false,
                  "description": "Status values that need to be considered for filter",
                  "unescapedDescription": "Status values that need to be considered for filter",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "headerParams": [],
              "formParams": [],
              "notes": "Multiple status values can be provided with comma separated strings",
              "isResponseBinary": false,
              "isResponseFile": false,
              "baseName": "pet",
              "produces": [
                {
                  "mediaType": "application/xml",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "hasParams": true,
              "hasOptionalParams": false,
              "hasRequiredParams": true,
              "hasQueryParams": true,
              "hasFormParams": false,
              "hasPathParams": false,
              "hasHeaderParams": false,
              "hasBodyParam": false,
              "openapi": {},
              "hasAuthMethods": true,
              "authMethods": [
                {
                  "name": "petstore_auth",
                  "isApiKey": false,
                  "isBasic": false,
                  "isOAuth": true,
                  "flow": "implicit",
                  "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
                  "scopes": [
                    {
                      "scope": "write:pets",
                      "-first": true,
                      "-last": false,
                      "hasMore": true
                    },
                    {
                      "scope": "read:pets",
                      "-first": false,
                      "-last": true,
                      "hasMore": false
                    }
                  ],
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "bodyParams": [],
              "tags": [
                "pet"
              ],
              "imports": [
                "pet"
              ],
              "vendorExtensions": {},
              "responses": [
                {
                  "code": "200",
                  "isDefault": false,
                  "nickname": "response200",
                  "message": "successful operation",
                  "description": "successful operation",
                  "simpleType": true,
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "photoUrls"
                      ],
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "category": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "xml": {
                            "name": "Category"
                          },
                          "x-oldref": "#/components/schemas/Category"
                        },
                        "name": {
                          "type": "string",
                          "example": "doggie"
                        },
                        "photoUrls": {
                          "type": "array",
                          "xml": {
                            "name": "photoUrl",
                            "wrapped": true
                          },
                          "items": {
                            "type": "string"
                          }
                        },
                        "tags": {
                          "type": "array",
                          "xml": {
                            "name": "tag",
                            "wrapped": true
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "format": "int64"
                              },
                              "name": {
                                "type": "string"
                              }
                            },
                            "xml": {
                              "name": "Tag"
                            },
                            "x-oldref": "#/components/schemas/Tag"
                          }
                        },
                        "status": {
                          "type": "string",
                          "description": "pet status in the store",
                          "enum": [
                            "available",
                            "pending",
                            "sold"
                          ]
                        }
                      },
                      "xml": {
                        "name": "Pet"
                      },
                      "x-oldref": "#/components/schemas/Pet"
                    }
                  },
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"name\",\n        \"photoUrls\"\n      ],\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"category\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            }\n          },\n          \"xml\": {\n            \"name\": \"Category\"\n          },\n          \"x-oldref\": \"#/components/schemas/Category\"\n        },\n        \"name\": {\n          \"type\": \"string\",\n          \"example\": \"doggie\"\n        },\n        \"photoUrls\": {\n          \"type\": \"array\",\n          \"xml\": {\n            \"name\": \"photoUrl\",\n            \"wrapped\": true\n          },\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"tags\": {\n          \"type\": \"array\",\n          \"xml\": {\n            \"name\": \"tag\",\n            \"wrapped\": true\n          },\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"id\": {\n                \"type\": \"integer\",\n                \"format\": \"int64\"\n              },\n              \"name\": {\n                \"type\": \"string\"\n              }\n            },\n            \"xml\": {\n              \"name\": \"Tag\"\n            },\n            \"x-oldref\": \"#/components/schemas/Tag\"\n          }\n        },\n        \"status\": {\n          \"type\": \"string\",\n          \"description\": \"pet status in the store\",\n          \"enum\": [\n            \"available\",\n            \"pending\",\n            \"sold\"\n          ]\n        }\n      },\n      \"xml\": {\n        \"name\": \"Pet\"\n      },\n      \"x-oldref\": \"#/components/schemas/Pet\"\n    }\n  }\n}",
                  "baseType": "array",
                  "dataType": "array",
                  "isPrimitiveType": true,
                  "hasExamples": true,
                  "examples": [
                    {
                      "contentType": "application/xml",
                      "example": "[\n  {\n    \"id\": 0,\n    \"category\": {\n      \"id\": 0,\n      \"name\": \"string\"\n    },\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"string\"\n    ],\n    \"tags\": [\n      {\n        \"id\": 0,\n        \"name\": \"string\"\n      }\n    ],\n    \"status\": \"available\"\n  }\n]",
                      "-first": true,
                      "-last": true,
                      "hasMore": false
                    }
                  ],
                  "responseHeaders": [],
                  "openapi": {}
                },
                {
                  "code": "400",
                  "isDefault": false,
                  "nickname": "response400",
                  "message": "Invalid status value",
                  "description": "Invalid status value",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                }
              ],
              "hasProduces": true,
              "examples": [
                {
                  "contentType": "application/xml",
                  "example": "[\n  {\n    \"id\": 0,\n    \"category\": {\n      \"id\": 0,\n      \"name\": \"string\"\n    },\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"string\"\n    ],\n    \"tags\": [\n      {\n        \"id\": 0,\n        \"name\": \"string\"\n      }\n    ],\n    \"status\": \"available\"\n  }\n]",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "returnType": "array",
              "returnBaseType": "array",
              "returnTypeIsPrimitive": true,
              "returnContainer": true,
              "-first": false,
              "-last": false,
              "hasMore": true
            },
            {
              "httpMethod": "GET",
              "path": "/pet/findByTags",
              "replacedPathName": "/pet/findByTags",
              "operationId": "findPetsByTags",
              "operationIdLowerCase": "findpetsbytags",
              "operationIdSnakeCase": "find_pets_by_tags",
              "nickname": "findPetsByTags",
              "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
              "summary": "Finds Pets by tags",
              "allParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": true,
                  "isPathParam": false,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "tags",
                  "baseName": "tags",
                  "required": true,
                  "optional": false,
                  "dataType": "array",
                  "%dataType%": "array",
                  "example": "[\"string\"]",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "isDate": false,
                  "isDateTime": false,
                  "description": "Tags to filter by",
                  "unescapedDescription": "Tags to filter by",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "pathParams": [],
              "queryParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": true,
                  "isPathParam": false,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "tags",
                  "baseName": "tags",
                  "required": true,
                  "optional": false,
                  "dataType": "array",
                  "%dataType%": "array",
                  "example": "[\"string\"]",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "isDate": false,
                  "isDateTime": false,
                  "description": "Tags to filter by",
                  "unescapedDescription": "Tags to filter by",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "headerParams": [],
              "formParams": [],
              "notes": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
              "isResponseBinary": false,
              "isResponseFile": false,
              "baseName": "pet",
              "produces": [
                {
                  "mediaType": "application/xml",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "hasParams": true,
              "hasOptionalParams": false,
              "hasRequiredParams": true,
              "hasQueryParams": true,
              "hasFormParams": false,
              "hasPathParams": false,
              "hasHeaderParams": false,
              "hasBodyParam": false,
              "openapi": {},
              "hasAuthMethods": true,
              "authMethods": [
                {
                  "name": "petstore_auth",
                  "isApiKey": false,
                  "isBasic": false,
                  "isOAuth": true,
                  "flow": "implicit",
                  "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
                  "scopes": [
                    {
                      "scope": "write:pets",
                      "-first": true,
                      "-last": false,
                      "hasMore": true
                    },
                    {
                      "scope": "read:pets",
                      "-first": false,
                      "-last": true,
                      "hasMore": false
                    }
                  ],
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "bodyParams": [],
              "tags": [
                "pet"
              ],
              "imports": [
                "pet"
              ],
              "vendorExtensions": {},
              "responses": [
                {
                  "code": "200",
                  "isDefault": false,
                  "nickname": "response200",
                  "message": "successful operation",
                  "description": "successful operation",
                  "simpleType": true,
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "photoUrls"
                      ],
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "category": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "xml": {
                            "name": "Category"
                          },
                          "x-oldref": "#/components/schemas/Category"
                        },
                        "name": {
                          "type": "string",
                          "example": "doggie"
                        },
                        "photoUrls": {
                          "type": "array",
                          "xml": {
                            "name": "photoUrl",
                            "wrapped": true
                          },
                          "items": {
                            "type": "string"
                          }
                        },
                        "tags": {
                          "type": "array",
                          "xml": {
                            "name": "tag",
                            "wrapped": true
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "format": "int64"
                              },
                              "name": {
                                "type": "string"
                              }
                            },
                            "xml": {
                              "name": "Tag"
                            },
                            "x-oldref": "#/components/schemas/Tag"
                          }
                        },
                        "status": {
                          "type": "string",
                          "description": "pet status in the store",
                          "enum": [
                            "available",
                            "pending",
                            "sold"
                          ]
                        }
                      },
                      "xml": {
                        "name": "Pet"
                      },
                      "x-oldref": "#/components/schemas/Pet"
                    }
                  },
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"name\",\n        \"photoUrls\"\n      ],\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"category\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            }\n          },\n          \"xml\": {\n            \"name\": \"Category\"\n          },\n          \"x-oldref\": \"#/components/schemas/Category\"\n        },\n        \"name\": {\n          \"type\": \"string\",\n          \"example\": \"doggie\"\n        },\n        \"photoUrls\": {\n          \"type\": \"array\",\n          \"xml\": {\n            \"name\": \"photoUrl\",\n            \"wrapped\": true\n          },\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"tags\": {\n          \"type\": \"array\",\n          \"xml\": {\n            \"name\": \"tag\",\n            \"wrapped\": true\n          },\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"id\": {\n                \"type\": \"integer\",\n                \"format\": \"int64\"\n              },\n              \"name\": {\n                \"type\": \"string\"\n              }\n            },\n            \"xml\": {\n              \"name\": \"Tag\"\n            },\n            \"x-oldref\": \"#/components/schemas/Tag\"\n          }\n        },\n        \"status\": {\n          \"type\": \"string\",\n          \"description\": \"pet status in the store\",\n          \"enum\": [\n            \"available\",\n            \"pending\",\n            \"sold\"\n          ]\n        }\n      },\n      \"xml\": {\n        \"name\": \"Pet\"\n      },\n      \"x-oldref\": \"#/components/schemas/Pet\"\n    }\n  }\n}",
                  "baseType": "array",
                  "dataType": "array",
                  "isPrimitiveType": true,
                  "hasExamples": true,
                  "examples": [
                    {
                      "contentType": "application/xml",
                      "example": "[\n  {\n    \"id\": 0,\n    \"category\": {\n      \"id\": 0,\n      \"name\": \"string\"\n    },\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"string\"\n    ],\n    \"tags\": [\n      {\n        \"id\": 0,\n        \"name\": \"string\"\n      }\n    ],\n    \"status\": \"available\"\n  }\n]",
                      "-first": true,
                      "-last": true,
                      "hasMore": false
                    }
                  ],
                  "responseHeaders": [],
                  "openapi": {}
                },
                {
                  "code": "400",
                  "isDefault": false,
                  "nickname": "response400",
                  "message": "Invalid tag value",
                  "description": "Invalid tag value",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                }
              ],
              "hasProduces": true,
              "examples": [
                {
                  "contentType": "application/xml",
                  "example": "[\n  {\n    \"id\": 0,\n    \"category\": {\n      \"id\": 0,\n      \"name\": \"string\"\n    },\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"string\"\n    ],\n    \"tags\": [\n      {\n        \"id\": 0,\n        \"name\": \"string\"\n      }\n    ],\n    \"status\": \"available\"\n  }\n]",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "returnType": "array",
              "returnBaseType": "array",
              "returnTypeIsPrimitive": true,
              "returnContainer": true,
              "-first": false,
              "-last": false,
              "hasMore": true
            },
            {
              "httpMethod": "GET",
              "path": "/pet/{petId}",
              "replacedPathName": "/pet/{petId}",
              "operationId": "getPetById",
              "operationIdLowerCase": "getpetbyid",
              "operationIdSnakeCase": "get_pet_by_id",
              "nickname": "getPetById",
              "description": "Returns a single pet",
              "summary": "Find pet by ID",
              "allParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "petId",
                  "baseName": "petId",
                  "required": true,
                  "optional": false,
                  "dataType": "integer",
                  "%dataType%": "integer",
                  "format": "int64",
                  "example": "0",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "dataFormat": "int64",
                  "isDate": false,
                  "isDateTime": false,
                  "description": "ID of pet to return",
                  "unescapedDescription": "ID of pet to return",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "pathParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "petId",
                  "baseName": "petId",
                  "required": true,
                  "optional": false,
                  "dataType": "integer",
                  "%dataType%": "integer",
                  "format": "int64",
                  "example": "0",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "dataFormat": "int64",
                  "isDate": false,
                  "isDateTime": false,
                  "description": "ID of pet to return",
                  "unescapedDescription": "ID of pet to return",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "notes": "Returns a single pet",
              "isResponseBinary": false,
              "isResponseFile": false,
              "baseName": "pet",
              "produces": [
                {
                  "mediaType": "application/xml",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "hasParams": true,
              "hasOptionalParams": false,
              "hasRequiredParams": true,
              "hasQueryParams": false,
              "hasFormParams": false,
              "hasPathParams": true,
              "hasHeaderParams": false,
              "hasBodyParam": false,
              "openapi": {},
              "hasAuthMethods": true,
              "authMethods": [
                {
                  "name": "api_key",
                  "isApiKey": true,
                  "isBasic": false,
                  "isOAuth": false,
                  "keyParamName": "api_key",
                  "isKeyInQuery": false,
                  "isKeyInHeader": true,
                  "isKeyInCookie": false,
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "bodyParams": [],
              "tags": [
                "pet"
              ],
              "imports": [
                "pet"
              ],
              "vendorExtensions": {},
              "responses": [
                {
                  "code": "200",
                  "isDefault": false,
                  "nickname": "response200",
                  "message": "successful operation",
                  "description": "successful operation",
                  "simpleType": true,
                  "schema": {
                    "type": "object",
                    "required": [
                      "name",
                      "photoUrls"
                    ],
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "category": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "xml": {
                          "name": "Category"
                        },
                        "x-oldref": "#/components/schemas/Category"
                      },
                      "name": {
                        "type": "string",
                        "example": "doggie"
                      },
                      "photoUrls": {
                        "type": "array",
                        "xml": {
                          "name": "photoUrl",
                          "wrapped": true
                        },
                        "items": {
                          "type": "string"
                        }
                      },
                      "tags": {
                        "type": "array",
                        "xml": {
                          "name": "tag",
                          "wrapped": true
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "xml": {
                            "name": "Tag"
                          },
                          "x-oldref": "#/components/schemas/Tag"
                        }
                      },
                      "status": {
                        "type": "string",
                        "description": "pet status in the store",
                        "enum": [
                          "available",
                          "pending",
                          "sold"
                        ]
                      }
                    },
                    "xml": {
                      "name": "Pet"
                    },
                    "x-oldref": "#/components/schemas/Pet"
                  },
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"required\": [\n      \"name\",\n      \"photoUrls\"\n    ],\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"category\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          }\n        },\n        \"xml\": {\n          \"name\": \"Category\"\n        },\n        \"x-oldref\": \"#/components/schemas/Category\"\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"example\": \"doggie\"\n      },\n      \"photoUrls\": {\n        \"type\": \"array\",\n        \"xml\": {\n          \"name\": \"photoUrl\",\n          \"wrapped\": true\n        },\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"tags\": {\n        \"type\": \"array\",\n        \"xml\": {\n          \"name\": \"tag\",\n          \"wrapped\": true\n        },\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            }\n          },\n          \"xml\": {\n            \"name\": \"Tag\"\n          },\n          \"x-oldref\": \"#/components/schemas/Tag\"\n        }\n      },\n      \"status\": {\n        \"type\": \"string\",\n        \"description\": \"pet status in the store\",\n        \"enum\": [\n          \"available\",\n          \"pending\",\n          \"sold\"\n        ]\n      }\n    },\n    \"xml\": {\n      \"name\": \"Pet\"\n    },\n    \"x-oldref\": \"#/components/schemas/Pet\"\n  }\n}",
                  "baseType": "object",
                  "dataType": "Pet",
                  "isPrimitiveType": false,
                  "hasExamples": true,
                  "examples": [
                    {
                      "contentType": "application/xml",
                      "example": "{\n  \"id\": 0,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"string\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                      "-first": true,
                      "-last": true,
                      "hasMore": false
                    }
                  ],
                  "responseHeaders": [],
                  "openapi": {}
                },
                {
                  "code": "400",
                  "isDefault": false,
                  "nickname": "response400",
                  "message": "Invalid ID supplied",
                  "description": "Invalid ID supplied",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                },
                {
                  "code": "404",
                  "isDefault": false,
                  "nickname": "response404",
                  "message": "Pet not found",
                  "description": "Pet not found",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                }
              ],
              "hasProduces": true,
              "examples": [
                {
                  "contentType": "application/xml",
                  "example": "{\n  \"id\": 0,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"string\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "returnType": "Pet",
              "returnBaseType": "object",
              "returnTypeIsPrimitive": false,
              "returnContainer": true,
              "-first": false,
              "-last": false,
              "hasMore": true
            },
            {
              "httpMethod": "POST",
              "path": "/pet/{petId}",
              "replacedPathName": "/pet/{petId}",
              "operationId": "updatePetWithForm",
              "operationIdLowerCase": "updatepetwithform",
              "operationIdSnakeCase": "update_pet_with_form",
              "nickname": "updatePetWithForm",
              "description": "",
              "summary": "Updates a pet in the store with form data",
              "allParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "petId",
                  "baseName": "petId",
                  "required": true,
                  "optional": false,
                  "dataType": "integer",
                  "%dataType%": "integer",
                  "format": "int64",
                  "example": "0",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "dataFormat": "int64",
                  "isDate": false,
                  "isDateTime": false,
                  "description": "ID of pet that needs to be updated",
                  "unescapedDescription": "ID of pet that needs to be updated",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": false,
                  "hasMore": true
                },
                {
                  "isBodyParam": true,
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isFormParam": false,
                  "isDate": false,
                  "isDateTime": false,
                  "baseName": "body",
                  "paramName": "body",
                  "baseType": "object",
                  "required": false,
                  "optional": true,
                  "dataType": "object",
                  "description": "",
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Updated name of the pet",
                        "type": "string"
                      },
                      "status": {
                        "description": "Updated status of the pet",
                        "type": "string"
                      }
                    }
                  },
                  "isEnum": false,
                  "vendorExtensions": {},
                  "example": "{\"name\":\"string\",\"status\":\"string\"}",
                  "type": "object",
                  "%dataType%": "object",
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": {\n        \"description\": \"Updated name of the pet\",\n        \"type\": \"string\"\n      },\n      \"status\": {\n        \"description\": \"Updated status of the pet\",\n        \"type\": \"string\"\n      }\n    }\n  }\n}",
                  "isFile": false,
                  "-first": false,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "pathParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "petId",
                  "baseName": "petId",
                  "required": true,
                  "optional": false,
                  "dataType": "integer",
                  "%dataType%": "integer",
                  "format": "int64",
                  "example": "0",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "dataFormat": "int64",
                  "isDate": false,
                  "isDateTime": false,
                  "description": "ID of pet that needs to be updated",
                  "unescapedDescription": "ID of pet that needs to be updated",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "notes": {
                "isEmpty": true
              },
              "isResponseBinary": false,
              "isResponseFile": false,
              "baseName": "pet",
              "consumes": [
                {
                  "mediaType": "application/x-www-form-urlencoded",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "hasParams": true,
              "hasOptionalParams": true,
              "hasRequiredParams": true,
              "hasQueryParams": false,
              "hasFormParams": false,
              "hasPathParams": true,
              "hasHeaderParams": false,
              "hasBodyParam": true,
              "openapi": {
                "requestBody": {
                  "content": {
                    "application/x-www-form-urlencoded": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Updated name of the pet",
                            "type": "string"
                          },
                          "status": {
                            "description": "Updated status of the pet",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "hasAuthMethods": true,
              "authMethods": [
                {
                  "name": "petstore_auth",
                  "isApiKey": false,
                  "isBasic": false,
                  "isOAuth": true,
                  "flow": "implicit",
                  "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
                  "scopes": [
                    {
                      "scope": "write:pets",
                      "-first": true,
                      "-last": false,
                      "hasMore": true
                    },
                    {
                      "scope": "read:pets",
                      "-first": false,
                      "-last": true,
                      "hasMore": false
                    }
                  ],
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "bodyParams": [
                {
                  "isBodyParam": true,
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isFormParam": false,
                  "isDate": false,
                  "isDateTime": false,
                  "baseName": "body",
                  "paramName": "body",
                  "baseType": "object",
                  "required": false,
                  "optional": true,
                  "dataType": "object",
                  "description": "",
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Updated name of the pet",
                        "type": "string"
                      },
                      "status": {
                        "description": "Updated status of the pet",
                        "type": "string"
                      }
                    }
                  },
                  "isEnum": false,
                  "vendorExtensions": {},
                  "example": "{\"name\":\"string\",\"status\":\"string\"}",
                  "type": "object",
                  "%dataType%": "object",
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": {\n        \"description\": \"Updated name of the pet\",\n        \"type\": \"string\"\n      },\n      \"status\": {\n        \"description\": \"Updated status of the pet\",\n        \"type\": \"string\"\n      }\n    }\n  }\n}",
                  "isFile": false,
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "bodyParam": {
                "isBodyParam": true,
                "isHeaderParam": false,
                "isQueryParam": false,
                "isPathParam": false,
                "isFormParam": false,
                "isDate": false,
                "isDateTime": false,
                "baseName": "body",
                "paramName": "body",
                "baseType": "object",
                "required": false,
                "optional": true,
                "dataType": "object",
                "description": "",
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Updated name of the pet",
                      "type": "string"
                    },
                    "status": {
                      "description": "Updated status of the pet",
                      "type": "string"
                    }
                  }
                },
                "isEnum": false,
                "vendorExtensions": {},
                "example": "{\"name\":\"string\",\"status\":\"string\"}",
                "type": "object",
                "%dataType%": "object",
                "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": {\n        \"description\": \"Updated name of the pet\",\n        \"type\": \"string\"\n      },\n      \"status\": {\n        \"description\": \"Updated status of the pet\",\n        \"type\": \"string\"\n      }\n    }\n  }\n}",
                "isFile": false,
                "-first": true,
                "-last": true,
                "hasMore": false
              },
              "hasConsumes": true,
              "tags": [
                "pet"
              ],
              "imports": [
                "pet"
              ],
              "vendorExtensions": {},
              "responses": [
                {
                  "code": "405",
                  "isDefault": false,
                  "nickname": "response405",
                  "message": "Invalid input",
                  "description": "Invalid input",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                }
              ],
              "examples": [],
              "-first": false,
              "-last": false,
              "hasMore": true
            },
            {
              "httpMethod": "DELETE",
              "path": "/pet/{petId}",
              "replacedPathName": "/pet/{petId}",
              "operationId": "deletePet",
              "operationIdLowerCase": "deletepet",
              "operationIdSnakeCase": "delete_pet",
              "nickname": "deletePet",
              "description": "",
              "summary": "Deletes a pet",
              "allParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "petId",
                  "baseName": "petId",
                  "required": true,
                  "optional": false,
                  "dataType": "integer",
                  "%dataType%": "integer",
                  "format": "int64",
                  "example": "0",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "dataFormat": "int64",
                  "isDate": false,
                  "isDateTime": false,
                  "description": "Pet id to delete",
                  "unescapedDescription": "Pet id to delete",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": false,
                  "hasMore": true
                },
                {
                  "isHeaderParam": true,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "api_key",
                  "baseName": "api_key",
                  "required": false,
                  "optional": true,
                  "dataType": "string",
                  "%dataType%": "string",
                  "example": "\"string\"",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "isDate": false,
                  "isDateTime": false,
                  "description": "",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": false,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "pathParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "petId",
                  "baseName": "petId",
                  "required": true,
                  "optional": false,
                  "dataType": "integer",
                  "%dataType%": "integer",
                  "format": "int64",
                  "example": "0",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "dataFormat": "int64",
                  "isDate": false,
                  "isDateTime": false,
                  "description": "Pet id to delete",
                  "unescapedDescription": "Pet id to delete",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "queryParams": [],
              "headerParams": [
                {
                  "isHeaderParam": true,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "api_key",
                  "baseName": "api_key",
                  "required": false,
                  "optional": true,
                  "dataType": "string",
                  "%dataType%": "string",
                  "example": "\"string\"",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "isDate": false,
                  "isDateTime": false,
                  "description": "",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "formParams": [],
              "notes": {
                "isEmpty": true
              },
              "isResponseBinary": false,
              "isResponseFile": false,
              "baseName": "pet",
              "hasParams": true,
              "hasOptionalParams": true,
              "hasRequiredParams": true,
              "hasQueryParams": false,
              "hasFormParams": false,
              "hasPathParams": true,
              "hasHeaderParams": true,
              "hasBodyParam": false,
              "openapi": {},
              "hasAuthMethods": true,
              "authMethods": [
                {
                  "name": "petstore_auth",
                  "isApiKey": false,
                  "isBasic": false,
                  "isOAuth": true,
                  "flow": "implicit",
                  "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
                  "scopes": [
                    {
                      "scope": "write:pets",
                      "-first": true,
                      "-last": false,
                      "hasMore": true
                    },
                    {
                      "scope": "read:pets",
                      "-first": false,
                      "-last": true,
                      "hasMore": false
                    }
                  ],
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "bodyParams": [],
              "tags": [
                "pet"
              ],
              "imports": [
                "pet"
              ],
              "vendorExtensions": {},
              "responses": [
                {
                  "code": "400",
                  "isDefault": false,
                  "nickname": "response400",
                  "message": "Invalid ID supplied",
                  "description": "Invalid ID supplied",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                },
                {
                  "code": "404",
                  "isDefault": false,
                  "nickname": "response404",
                  "message": "Pet not found",
                  "description": "Pet not found",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                }
              ],
              "examples": [],
              "-first": false,
              "-last": false,
              "hasMore": true
            },
            {
              "httpMethod": "POST",
              "path": "/pet/{petId}/uploadImage",
              "replacedPathName": "/pet/{petId}/uploadImage",
              "operationId": "uploadFile",
              "operationIdLowerCase": "uploadfile",
              "operationIdSnakeCase": "upload_file",
              "nickname": "uploadFile",
              "description": "",
              "summary": "uploads an image",
              "allParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "petId",
                  "baseName": "petId",
                  "required": true,
                  "optional": false,
                  "dataType": "integer",
                  "%dataType%": "integer",
                  "format": "int64",
                  "example": "0",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "dataFormat": "int64",
                  "isDate": false,
                  "isDateTime": false,
                  "description": "ID of pet to update",
                  "unescapedDescription": "ID of pet to update",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": false,
                  "hasMore": true
                },
                {
                  "isBodyParam": true,
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isFormParam": false,
                  "isDate": false,
                  "isDateTime": false,
                  "baseName": "body",
                  "paramName": "body",
                  "baseType": "object",
                  "required": false,
                  "optional": true,
                  "dataType": "string",
                  "description": "",
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  },
                  "isEnum": false,
                  "vendorExtensions": {},
                  "example": "\"string\"",
                  "type": "string",
                  "%dataType%": "string",
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"string\",\n    \"format\": \"binary\"\n  }\n}",
                  "isFile": false,
                  "-first": false,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "pathParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "petId",
                  "baseName": "petId",
                  "required": true,
                  "optional": false,
                  "dataType": "integer",
                  "%dataType%": "integer",
                  "format": "int64",
                  "example": "0",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "dataFormat": "int64",
                  "isDate": false,
                  "isDateTime": false,
                  "description": "ID of pet to update",
                  "unescapedDescription": "ID of pet to update",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "notes": {
                "isEmpty": true
              },
              "isResponseBinary": false,
              "isResponseFile": false,
              "baseName": "pet",
              "produces": [
                {
                  "mediaType": "application/json",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "consumes": [
                {
                  "mediaType": "application/octet-stream",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "hasParams": true,
              "hasOptionalParams": true,
              "hasRequiredParams": true,
              "hasQueryParams": false,
              "hasFormParams": false,
              "hasPathParams": true,
              "hasHeaderParams": false,
              "hasBodyParam": true,
              "openapi": {
                "requestBody": {
                  "content": {
                    "application/octet-stream": {
                      "schema": {
                        "type": "string",
                        "format": "binary"
                      }
                    }
                  }
                }
              },
              "hasAuthMethods": true,
              "authMethods": [
                {
                  "name": "petstore_auth",
                  "isApiKey": false,
                  "isBasic": false,
                  "isOAuth": true,
                  "flow": "implicit",
                  "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
                  "scopes": [
                    {
                      "scope": "write:pets",
                      "-first": true,
                      "-last": false,
                      "hasMore": true
                    },
                    {
                      "scope": "read:pets",
                      "-first": false,
                      "-last": true,
                      "hasMore": false
                    }
                  ],
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "bodyParams": [
                {
                  "isBodyParam": true,
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isFormParam": false,
                  "isDate": false,
                  "isDateTime": false,
                  "baseName": "body",
                  "paramName": "body",
                  "baseType": "object",
                  "required": false,
                  "optional": true,
                  "dataType": "string",
                  "description": "",
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  },
                  "isEnum": false,
                  "vendorExtensions": {},
                  "example": "\"string\"",
                  "type": "string",
                  "%dataType%": "string",
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"string\",\n    \"format\": \"binary\"\n  }\n}",
                  "isFile": false,
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "bodyParam": {
                "isBodyParam": true,
                "isHeaderParam": false,
                "isQueryParam": false,
                "isPathParam": false,
                "isFormParam": false,
                "isDate": false,
                "isDateTime": false,
                "baseName": "body",
                "paramName": "body",
                "baseType": "object",
                "required": false,
                "optional": true,
                "dataType": "string",
                "description": "",
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "isEnum": false,
                "vendorExtensions": {},
                "example": "\"string\"",
                "type": "string",
                "%dataType%": "string",
                "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"string\",\n    \"format\": \"binary\"\n  }\n}",
                "isFile": false,
                "-first": true,
                "-last": true,
                "hasMore": false
              },
              "hasConsumes": true,
              "tags": [
                "pet"
              ],
              "imports": [
                "pet"
              ],
              "vendorExtensions": {},
              "responses": [
                {
                  "code": "200",
                  "isDefault": false,
                  "nickname": "response200",
                  "message": "successful operation",
                  "description": "successful operation",
                  "simpleType": true,
                  "schema": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "type": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      }
                    },
                    "x-oldref": "#/components/schemas/ApiResponse"
                  },
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"code\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      },\n      \"type\": {\n        \"type\": \"string\"\n      },\n      \"message\": {\n        \"type\": \"string\"\n      }\n    },\n    \"x-oldref\": \"#/components/schemas/ApiResponse\"\n  }\n}",
                  "baseType": "object",
                  "dataType": "ApiResponse",
                  "isPrimitiveType": false,
                  "hasExamples": true,
                  "examples": [
                    {
                      "contentType": "application/json",
                      "example": "{\n  \"code\": 0,\n  \"type\": \"string\",\n  \"message\": \"string\"\n}",
                      "-first": true,
                      "-last": true,
                      "hasMore": false
                    }
                  ],
                  "responseHeaders": [],
                  "openapi": {}
                }
              ],
              "hasProduces": true,
              "examples": [
                {
                  "contentType": "application/json",
                  "example": "{\n  \"code\": 0,\n  \"type\": \"string\",\n  \"message\": \"string\"\n}",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "returnType": "ApiResponse",
              "returnBaseType": "object",
              "returnTypeIsPrimitive": false,
              "returnContainer": true,
              "-first": false,
              "-last": true,
              "hasMore": false
            }
          ]
        },
        "-first": true,
        "-last": false,
        "hasMore": true
      },
      {
        "name": "store",
        "classname": "storeApi",
        "classFilename": "storeApi",
        "classVarName": "store",
        "packageName": "IO.OpenAPI",
        "operations": {
          "operation": [
            {
              "httpMethod": "GET",
              "path": "/store/inventory",
              "replacedPathName": "/store/inventory",
              "operationId": "getInventory",
              "operationIdLowerCase": "getinventory",
              "operationIdSnakeCase": "get_inventory",
              "nickname": "getInventory",
              "description": "Returns a map of status codes to quantities",
              "summary": "Returns pet inventories by status",
              "allParams": [],
              "pathParams": [],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "notes": "Returns a map of status codes to quantities",
              "isResponseBinary": false,
              "isResponseFile": false,
              "baseName": "store",
              "produces": [
                {
                  "mediaType": "application/json",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "hasParams": false,
              "hasOptionalParams": false,
              "hasRequiredParams": false,
              "hasQueryParams": false,
              "hasFormParams": false,
              "hasPathParams": false,
              "hasHeaderParams": false,
              "hasBodyParam": false,
              "openapi": {},
              "hasAuthMethods": true,
              "authMethods": [
                {
                  "name": "api_key",
                  "isApiKey": true,
                  "isBasic": false,
                  "isOAuth": false,
                  "keyParamName": "api_key",
                  "isKeyInQuery": false,
                  "isKeyInHeader": true,
                  "isKeyInCookie": false,
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "bodyParams": [],
              "tags": [
                "store"
              ],
              "imports": [
                "store"
              ],
              "vendorExtensions": {},
              "responses": [
                {
                  "code": "200",
                  "isDefault": false,
                  "nickname": "response200",
                  "message": "successful operation",
                  "description": "successful operation",
                  "simpleType": true,
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"additionalProperties\": {\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n    }\n  }\n}",
                  "baseType": "object",
                  "dataType": "object",
                  "isPrimitiveType": true,
                  "hasExamples": true,
                  "examples": [
                    {
                      "contentType": "application/json",
                      "example": "{\n  \"property1\": 0,\n  \"property2\": 0\n}",
                      "-first": true,
                      "-last": true,
                      "hasMore": false
                    }
                  ],
                  "responseHeaders": [],
                  "openapi": {}
                }
              ],
              "hasProduces": true,
              "examples": [
                {
                  "contentType": "application/json",
                  "example": "{\n  \"property1\": 0,\n  \"property2\": 0\n}",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "returnType": "object",
              "returnBaseType": "object",
              "returnTypeIsPrimitive": true,
              "returnContainer": true,
              "-first": true,
              "-last": false,
              "hasMore": true
            },
            {
              "httpMethod": "POST",
              "path": "/store/order",
              "replacedPathName": "/store/order",
              "operationId": "placeOrder",
              "operationIdLowerCase": "placeorder",
              "operationIdSnakeCase": "place_order",
              "nickname": "placeOrder",
              "description": "",
              "summary": "Place an order for a pet",
              "allParams": [
                {
                  "isBodyParam": true,
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isFormParam": false,
                  "isDate": false,
                  "isDateTime": false,
                  "baseName": "body",
                  "paramName": "body",
                  "baseType": "object",
                  "required": true,
                  "optional": false,
                  "dataType": "object",
                  "description": "order placed for purchasing the pet",
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "petId": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "quantity": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "shipDate": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "status": {
                        "type": "string",
                        "description": "Order Status",
                        "enum": [
                          "placed",
                          "approved",
                          "delivered"
                        ]
                      },
                      "complete": {
                        "type": "boolean",
                        "default": false
                      }
                    },
                    "xml": {
                      "name": "Order"
                    },
                    "x-oldref": "#/components/schemas/Order"
                  },
                  "isEnum": false,
                  "vendorExtensions": {},
                  "example": "{\"id\":0,\"petId\":0,\"quantity\":0,\"shipDate\":\"2018-07-02T10:01:51Z\",\"status\":\"placed\",\"complete\":false}",
                  "type": "object",
                  "%dataType%": "object",
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"petId\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"quantity\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      },\n      \"shipDate\": {\n        \"type\": \"string\",\n        \"format\": \"date-time\"\n      },\n      \"status\": {\n        \"type\": \"string\",\n        \"description\": \"Order Status\",\n        \"enum\": [\n          \"placed\",\n          \"approved\",\n          \"delivered\"\n        ]\n      },\n      \"complete\": {\n        \"type\": \"boolean\",\n        \"default\": false\n      }\n    },\n    \"xml\": {\n      \"name\": \"Order\"\n    },\n    \"x-oldref\": \"#/components/schemas/Order\"\n  }\n}",
                  "isFile": false,
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "pathParams": [],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "notes": {
                "isEmpty": true
              },
              "isResponseBinary": false,
              "isResponseFile": false,
              "baseName": "store",
              "produces": [
                {
                  "mediaType": "application/xml",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "consumes": [
                {
                  "mediaType": "application/json",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "hasParams": true,
              "hasOptionalParams": false,
              "hasRequiredParams": true,
              "hasQueryParams": false,
              "hasFormParams": false,
              "hasPathParams": false,
              "hasHeaderParams": false,
              "hasBodyParam": true,
              "openapi": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "petId": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "shipDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "status": {
                            "type": "string",
                            "description": "Order Status",
                            "enum": [
                              "placed",
                              "approved",
                              "delivered"
                            ]
                          },
                          "complete": {
                            "type": "boolean",
                            "default": false
                          }
                        },
                        "xml": {
                          "name": "Order"
                        },
                        "x-oldref": "#/components/schemas/Order"
                      }
                    }
                  },
                  "description": "order placed for purchasing the pet",
                  "required": true
                }
              },
              "authMethods": [],
              "bodyParams": [
                {
                  "isBodyParam": true,
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isFormParam": false,
                  "isDate": false,
                  "isDateTime": false,
                  "baseName": "body",
                  "paramName": "body",
                  "baseType": "object",
                  "required": true,
                  "optional": false,
                  "dataType": "object",
                  "description": "order placed for purchasing the pet",
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "petId": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "quantity": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "shipDate": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "status": {
                        "type": "string",
                        "description": "Order Status",
                        "enum": [
                          "placed",
                          "approved",
                          "delivered"
                        ]
                      },
                      "complete": {
                        "type": "boolean",
                        "default": false
                      }
                    },
                    "xml": {
                      "name": "Order"
                    },
                    "x-oldref": "#/components/schemas/Order"
                  },
                  "isEnum": false,
                  "vendorExtensions": {},
                  "example": "{\"id\":0,\"petId\":0,\"quantity\":0,\"shipDate\":\"2018-07-02T10:01:51Z\",\"status\":\"placed\",\"complete\":false}",
                  "type": "object",
                  "%dataType%": "object",
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"petId\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"quantity\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      },\n      \"shipDate\": {\n        \"type\": \"string\",\n        \"format\": \"date-time\"\n      },\n      \"status\": {\n        \"type\": \"string\",\n        \"description\": \"Order Status\",\n        \"enum\": [\n          \"placed\",\n          \"approved\",\n          \"delivered\"\n        ]\n      },\n      \"complete\": {\n        \"type\": \"boolean\",\n        \"default\": false\n      }\n    },\n    \"xml\": {\n      \"name\": \"Order\"\n    },\n    \"x-oldref\": \"#/components/schemas/Order\"\n  }\n}",
                  "isFile": false,
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "bodyParam": {
                "isBodyParam": true,
                "isHeaderParam": false,
                "isQueryParam": false,
                "isPathParam": false,
                "isFormParam": false,
                "isDate": false,
                "isDateTime": false,
                "baseName": "body",
                "paramName": "body",
                "baseType": "object",
                "required": true,
                "optional": false,
                "dataType": "object",
                "description": "order placed for purchasing the pet",
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "petId": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "quantity": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "shipDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "status": {
                      "type": "string",
                      "description": "Order Status",
                      "enum": [
                        "placed",
                        "approved",
                        "delivered"
                      ]
                    },
                    "complete": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "xml": {
                    "name": "Order"
                  },
                  "x-oldref": "#/components/schemas/Order"
                },
                "isEnum": false,
                "vendorExtensions": {},
                "example": "{\"id\":0,\"petId\":0,\"quantity\":0,\"shipDate\":\"2018-07-02T10:01:51Z\",\"status\":\"placed\",\"complete\":false}",
                "type": "object",
                "%dataType%": "object",
                "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"petId\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"quantity\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      },\n      \"shipDate\": {\n        \"type\": \"string\",\n        \"format\": \"date-time\"\n      },\n      \"status\": {\n        \"type\": \"string\",\n        \"description\": \"Order Status\",\n        \"enum\": [\n          \"placed\",\n          \"approved\",\n          \"delivered\"\n        ]\n      },\n      \"complete\": {\n        \"type\": \"boolean\",\n        \"default\": false\n      }\n    },\n    \"xml\": {\n      \"name\": \"Order\"\n    },\n    \"x-oldref\": \"#/components/schemas/Order\"\n  }\n}",
                "isFile": false,
                "-first": true,
                "-last": true,
                "hasMore": false
              },
              "hasConsumes": true,
              "tags": [
                "store"
              ],
              "imports": [
                "store"
              ],
              "vendorExtensions": {},
              "responses": [
                {
                  "code": "200",
                  "isDefault": false,
                  "nickname": "response200",
                  "message": "successful operation",
                  "description": "successful operation",
                  "simpleType": true,
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "petId": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "quantity": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "shipDate": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "status": {
                        "type": "string",
                        "description": "Order Status",
                        "enum": [
                          "placed",
                          "approved",
                          "delivered"
                        ]
                      },
                      "complete": {
                        "type": "boolean",
                        "default": false
                      }
                    },
                    "xml": {
                      "name": "Order"
                    },
                    "x-oldref": "#/components/schemas/Order"
                  },
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"petId\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"quantity\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      },\n      \"shipDate\": {\n        \"type\": \"string\",\n        \"format\": \"date-time\"\n      },\n      \"status\": {\n        \"type\": \"string\",\n        \"description\": \"Order Status\",\n        \"enum\": [\n          \"placed\",\n          \"approved\",\n          \"delivered\"\n        ]\n      },\n      \"complete\": {\n        \"type\": \"boolean\",\n        \"default\": false\n      }\n    },\n    \"xml\": {\n      \"name\": \"Order\"\n    },\n    \"x-oldref\": \"#/components/schemas/Order\"\n  }\n}",
                  "baseType": "object",
                  "dataType": "Order",
                  "isPrimitiveType": false,
                  "hasExamples": true,
                  "examples": [
                    {
                      "contentType": "application/xml",
                      "example": "{\n  \"id\": 0,\n  \"petId\": 0,\n  \"quantity\": 0,\n  \"shipDate\": \"2018-07-02T10:01:51Z\",\n  \"status\": \"placed\",\n  \"complete\": false\n}",
                      "-first": true,
                      "-last": true,
                      "hasMore": false
                    }
                  ],
                  "responseHeaders": [],
                  "openapi": {}
                },
                {
                  "code": "400",
                  "isDefault": false,
                  "nickname": "response400",
                  "message": "Invalid Order",
                  "description": "Invalid Order",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                }
              ],
              "hasProduces": true,
              "examples": [
                {
                  "contentType": "application/xml",
                  "example": "{\n  \"id\": 0,\n  \"petId\": 0,\n  \"quantity\": 0,\n  \"shipDate\": \"2018-07-02T10:01:51Z\",\n  \"status\": \"placed\",\n  \"complete\": false\n}",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "returnType": "Order",
              "returnBaseType": "object",
              "returnTypeIsPrimitive": false,
              "returnContainer": true,
              "-first": false,
              "-last": false,
              "hasMore": true
            },
            {
              "httpMethod": "GET",
              "path": "/store/order/{orderId}",
              "replacedPathName": "/store/order/{orderId}",
              "operationId": "getOrderById",
              "operationIdLowerCase": "getorderbyid",
              "operationIdSnakeCase": "get_order_by_id",
              "nickname": "getOrderById",
              "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
              "summary": "Find purchase order by ID",
              "allParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "orderId",
                  "baseName": "orderId",
                  "required": true,
                  "optional": false,
                  "dataType": "integer",
                  "%dataType%": "integer",
                  "format": "int64",
                  "minimum": 1,
                  "maximum": 10,
                  "example": "1",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "dataFormat": "int64",
                  "isDate": false,
                  "isDateTime": false,
                  "description": "ID of pet that needs to be fetched",
                  "unescapedDescription": "ID of pet that needs to be fetched",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "pathParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "orderId",
                  "baseName": "orderId",
                  "required": true,
                  "optional": false,
                  "dataType": "integer",
                  "%dataType%": "integer",
                  "format": "int64",
                  "minimum": 1,
                  "maximum": 10,
                  "example": "1",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "dataFormat": "int64",
                  "isDate": false,
                  "isDateTime": false,
                  "description": "ID of pet that needs to be fetched",
                  "unescapedDescription": "ID of pet that needs to be fetched",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "notes": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
              "isResponseBinary": false,
              "isResponseFile": false,
              "baseName": "store",
              "produces": [
                {
                  "mediaType": "application/xml",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "hasParams": true,
              "hasOptionalParams": false,
              "hasRequiredParams": true,
              "hasQueryParams": false,
              "hasFormParams": false,
              "hasPathParams": true,
              "hasHeaderParams": false,
              "hasBodyParam": false,
              "openapi": {},
              "authMethods": [],
              "bodyParams": [],
              "tags": [
                "store"
              ],
              "imports": [
                "store"
              ],
              "vendorExtensions": {},
              "responses": [
                {
                  "code": "200",
                  "isDefault": false,
                  "nickname": "response200",
                  "message": "successful operation",
                  "description": "successful operation",
                  "simpleType": true,
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "petId": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "quantity": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "shipDate": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "status": {
                        "type": "string",
                        "description": "Order Status",
                        "enum": [
                          "placed",
                          "approved",
                          "delivered"
                        ]
                      },
                      "complete": {
                        "type": "boolean",
                        "default": false
                      }
                    },
                    "xml": {
                      "name": "Order"
                    },
                    "x-oldref": "#/components/schemas/Order"
                  },
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"petId\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"quantity\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      },\n      \"shipDate\": {\n        \"type\": \"string\",\n        \"format\": \"date-time\"\n      },\n      \"status\": {\n        \"type\": \"string\",\n        \"description\": \"Order Status\",\n        \"enum\": [\n          \"placed\",\n          \"approved\",\n          \"delivered\"\n        ]\n      },\n      \"complete\": {\n        \"type\": \"boolean\",\n        \"default\": false\n      }\n    },\n    \"xml\": {\n      \"name\": \"Order\"\n    },\n    \"x-oldref\": \"#/components/schemas/Order\"\n  }\n}",
                  "baseType": "object",
                  "dataType": "Order",
                  "isPrimitiveType": false,
                  "hasExamples": true,
                  "examples": [
                    {
                      "contentType": "application/xml",
                      "example": "{\n  \"id\": 0,\n  \"petId\": 0,\n  \"quantity\": 0,\n  \"shipDate\": \"2018-07-02T10:01:51Z\",\n  \"status\": \"placed\",\n  \"complete\": false\n}",
                      "-first": true,
                      "-last": true,
                      "hasMore": false
                    }
                  ],
                  "responseHeaders": [],
                  "openapi": {}
                },
                {
                  "code": "400",
                  "isDefault": false,
                  "nickname": "response400",
                  "message": "Invalid ID supplied",
                  "description": "Invalid ID supplied",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                },
                {
                  "code": "404",
                  "isDefault": false,
                  "nickname": "response404",
                  "message": "Order not found",
                  "description": "Order not found",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                }
              ],
              "hasProduces": true,
              "examples": [
                {
                  "contentType": "application/xml",
                  "example": "{\n  \"id\": 0,\n  \"petId\": 0,\n  \"quantity\": 0,\n  \"shipDate\": \"2018-07-02T10:01:51Z\",\n  \"status\": \"placed\",\n  \"complete\": false\n}",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "returnType": "Order",
              "returnBaseType": "object",
              "returnTypeIsPrimitive": false,
              "returnContainer": true,
              "-first": false,
              "-last": false,
              "hasMore": true
            },
            {
              "httpMethod": "DELETE",
              "path": "/store/order/{orderId}",
              "replacedPathName": "/store/order/{orderId}",
              "operationId": "deleteOrder",
              "operationIdLowerCase": "deleteorder",
              "operationIdSnakeCase": "delete_order",
              "nickname": "deleteOrder",
              "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
              "summary": "Delete purchase order by ID",
              "allParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "orderId",
                  "baseName": "orderId",
                  "required": true,
                  "optional": false,
                  "dataType": "integer",
                  "%dataType%": "integer",
                  "format": "int64",
                  "minimum": 1,
                  "example": "1",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "dataFormat": "int64",
                  "isDate": false,
                  "isDateTime": false,
                  "description": "ID of the order that needs to be deleted",
                  "unescapedDescription": "ID of the order that needs to be deleted",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "pathParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "orderId",
                  "baseName": "orderId",
                  "required": true,
                  "optional": false,
                  "dataType": "integer",
                  "%dataType%": "integer",
                  "format": "int64",
                  "minimum": 1,
                  "example": "1",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "dataFormat": "int64",
                  "isDate": false,
                  "isDateTime": false,
                  "description": "ID of the order that needs to be deleted",
                  "unescapedDescription": "ID of the order that needs to be deleted",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "notes": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
              "isResponseBinary": false,
              "isResponseFile": false,
              "baseName": "store",
              "hasParams": true,
              "hasOptionalParams": false,
              "hasRequiredParams": true,
              "hasQueryParams": false,
              "hasFormParams": false,
              "hasPathParams": true,
              "hasHeaderParams": false,
              "hasBodyParam": false,
              "openapi": {},
              "authMethods": [],
              "bodyParams": [],
              "tags": [
                "store"
              ],
              "imports": [
                "store"
              ],
              "vendorExtensions": {},
              "responses": [
                {
                  "code": "400",
                  "isDefault": false,
                  "nickname": "response400",
                  "message": "Invalid ID supplied",
                  "description": "Invalid ID supplied",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                },
                {
                  "code": "404",
                  "isDefault": false,
                  "nickname": "response404",
                  "message": "Order not found",
                  "description": "Order not found",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                }
              ],
              "examples": [],
              "-first": false,
              "-last": true,
              "hasMore": false
            }
          ]
        },
        "-first": false,
        "-last": false,
        "hasMore": true
      },
      {
        "name": "user",
        "classname": "userApi",
        "classFilename": "userApi",
        "classVarName": "user",
        "packageName": "IO.OpenAPI",
        "operations": {
          "operation": [
            {
              "httpMethod": "POST",
              "path": "/user",
              "replacedPathName": "/user",
              "operationId": "createUser",
              "operationIdLowerCase": "createuser",
              "operationIdSnakeCase": "create_user",
              "nickname": "createUser",
              "description": "This can only be done by the logged in user.",
              "summary": "Create user",
              "allParams": [
                {
                  "isBodyParam": true,
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isFormParam": false,
                  "isDate": false,
                  "isDateTime": false,
                  "baseName": "body",
                  "paramName": "body",
                  "baseType": "object",
                  "required": true,
                  "optional": false,
                  "dataType": "object",
                  "description": "Created user object",
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "username": {
                        "type": "string"
                      },
                      "firstName": {
                        "type": "string"
                      },
                      "lastName": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      },
                      "phone": {
                        "type": "string"
                      },
                      "userStatus": {
                        "type": "integer",
                        "format": "int32",
                        "description": "User Status"
                      }
                    },
                    "xml": {
                      "name": "User"
                    },
                    "x-oldref": "#/components/schemas/User"
                  },
                  "isEnum": false,
                  "vendorExtensions": {},
                  "example": "{\"id\":0,\"username\":\"string\",\"firstName\":\"string\",\"lastName\":\"string\",\"email\":\"string\",\"password\":\"string\",\"phone\":\"string\",\"userStatus\":0}",
                  "type": "object",
                  "%dataType%": "object",
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"username\": {\n        \"type\": \"string\"\n      },\n      \"firstName\": {\n        \"type\": \"string\"\n      },\n      \"lastName\": {\n        \"type\": \"string\"\n      },\n      \"email\": {\n        \"type\": \"string\"\n      },\n      \"password\": {\n        \"type\": \"string\"\n      },\n      \"phone\": {\n        \"type\": \"string\"\n      },\n      \"userStatus\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\",\n        \"description\": \"User Status\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"User\"\n    },\n    \"x-oldref\": \"#/components/schemas/User\"\n  }\n}",
                  "isFile": false,
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "pathParams": [],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "notes": "This can only be done by the logged in user.",
              "isResponseBinary": false,
              "isResponseFile": false,
              "baseName": "user",
              "consumes": [
                {
                  "mediaType": "application/json",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "hasParams": true,
              "hasOptionalParams": false,
              "hasRequiredParams": true,
              "hasQueryParams": false,
              "hasFormParams": false,
              "hasPathParams": false,
              "hasHeaderParams": false,
              "hasBodyParam": true,
              "openapi": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "username": {
                            "type": "string"
                          },
                          "firstName": {
                            "type": "string"
                          },
                          "lastName": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "password": {
                            "type": "string"
                          },
                          "phone": {
                            "type": "string"
                          },
                          "userStatus": {
                            "type": "integer",
                            "format": "int32",
                            "description": "User Status"
                          }
                        },
                        "xml": {
                          "name": "User"
                        },
                        "x-oldref": "#/components/schemas/User"
                      }
                    }
                  },
                  "description": "Created user object",
                  "required": true
                }
              },
              "authMethods": [],
              "bodyParams": [
                {
                  "isBodyParam": true,
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isFormParam": false,
                  "isDate": false,
                  "isDateTime": false,
                  "baseName": "body",
                  "paramName": "body",
                  "baseType": "object",
                  "required": true,
                  "optional": false,
                  "dataType": "object",
                  "description": "Created user object",
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "username": {
                        "type": "string"
                      },
                      "firstName": {
                        "type": "string"
                      },
                      "lastName": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      },
                      "phone": {
                        "type": "string"
                      },
                      "userStatus": {
                        "type": "integer",
                        "format": "int32",
                        "description": "User Status"
                      }
                    },
                    "xml": {
                      "name": "User"
                    },
                    "x-oldref": "#/components/schemas/User"
                  },
                  "isEnum": false,
                  "vendorExtensions": {},
                  "example": "{\"id\":0,\"username\":\"string\",\"firstName\":\"string\",\"lastName\":\"string\",\"email\":\"string\",\"password\":\"string\",\"phone\":\"string\",\"userStatus\":0}",
                  "type": "object",
                  "%dataType%": "object",
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"username\": {\n        \"type\": \"string\"\n      },\n      \"firstName\": {\n        \"type\": \"string\"\n      },\n      \"lastName\": {\n        \"type\": \"string\"\n      },\n      \"email\": {\n        \"type\": \"string\"\n      },\n      \"password\": {\n        \"type\": \"string\"\n      },\n      \"phone\": {\n        \"type\": \"string\"\n      },\n      \"userStatus\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\",\n        \"description\": \"User Status\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"User\"\n    },\n    \"x-oldref\": \"#/components/schemas/User\"\n  }\n}",
                  "isFile": false,
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "bodyParam": {
                "isBodyParam": true,
                "isHeaderParam": false,
                "isQueryParam": false,
                "isPathParam": false,
                "isFormParam": false,
                "isDate": false,
                "isDateTime": false,
                "baseName": "body",
                "paramName": "body",
                "baseType": "object",
                "required": true,
                "optional": false,
                "dataType": "object",
                "description": "Created user object",
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "username": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    },
                    "phone": {
                      "type": "string"
                    },
                    "userStatus": {
                      "type": "integer",
                      "format": "int32",
                      "description": "User Status"
                    }
                  },
                  "xml": {
                    "name": "User"
                  },
                  "x-oldref": "#/components/schemas/User"
                },
                "isEnum": false,
                "vendorExtensions": {},
                "example": "{\"id\":0,\"username\":\"string\",\"firstName\":\"string\",\"lastName\":\"string\",\"email\":\"string\",\"password\":\"string\",\"phone\":\"string\",\"userStatus\":0}",
                "type": "object",
                "%dataType%": "object",
                "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"username\": {\n        \"type\": \"string\"\n      },\n      \"firstName\": {\n        \"type\": \"string\"\n      },\n      \"lastName\": {\n        \"type\": \"string\"\n      },\n      \"email\": {\n        \"type\": \"string\"\n      },\n      \"password\": {\n        \"type\": \"string\"\n      },\n      \"phone\": {\n        \"type\": \"string\"\n      },\n      \"userStatus\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\",\n        \"description\": \"User Status\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"User\"\n    },\n    \"x-oldref\": \"#/components/schemas/User\"\n  }\n}",
                "isFile": false,
                "-first": true,
                "-last": true,
                "hasMore": false
              },
              "hasConsumes": true,
              "tags": [
                "user"
              ],
              "imports": [
                "user"
              ],
              "vendorExtensions": {},
              "responses": [
                {
                  "code": "default",
                  "isDefault": true,
                  "nickname": "responsedefault",
                  "message": "successful operation",
                  "description": "successful operation",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                }
              ],
              "examples": [],
              "-first": true,
              "-last": false,
              "hasMore": true
            },
            {
              "httpMethod": "POST",
              "path": "/user/createWithArray",
              "replacedPathName": "/user/createWithArray",
              "operationId": "createUsersWithArrayInput",
              "operationIdLowerCase": "createuserswitharrayinput",
              "operationIdSnakeCase": "create_users_with_array_input",
              "nickname": "createUsersWithArrayInput",
              "description": "",
              "summary": "Creates list of users with given input array",
              "allParams": [
                {
                  "isBodyParam": true,
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isFormParam": false,
                  "isDate": false,
                  "isDateTime": false,
                  "baseName": "body",
                  "paramName": "body",
                  "baseType": "object",
                  "required": true,
                  "optional": false,
                  "dataType": "array",
                  "description": "List of user object",
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "username": {
                          "type": "string"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "password": {
                          "type": "string"
                        },
                        "phone": {
                          "type": "string"
                        },
                        "userStatus": {
                          "type": "integer",
                          "format": "int32",
                          "description": "User Status"
                        }
                      },
                      "xml": {
                        "name": "User"
                      },
                      "x-oldref": "#/components/schemas/User"
                    }
                  },
                  "isEnum": false,
                  "vendorExtensions": {
                    "x-oldref": "#/components/requestBodies/UserArray"
                  },
                  "example": "[{\"id\":0,\"username\":\"string\",\"firstName\":\"string\",\"lastName\":\"string\",\"email\":\"string\",\"password\":\"string\",\"phone\":\"string\",\"userStatus\":0}]",
                  "type": "array",
                  "%dataType%": "array",
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"username\": {\n          \"type\": \"string\"\n        },\n        \"firstName\": {\n          \"type\": \"string\"\n        },\n        \"lastName\": {\n          \"type\": \"string\"\n        },\n        \"email\": {\n          \"type\": \"string\"\n        },\n        \"password\": {\n          \"type\": \"string\"\n        },\n        \"phone\": {\n          \"type\": \"string\"\n        },\n        \"userStatus\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\",\n          \"description\": \"User Status\"\n        }\n      },\n      \"xml\": {\n        \"name\": \"User\"\n      },\n      \"x-oldref\": \"#/components/schemas/User\"\n    }\n  }\n}",
                  "isFile": false,
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "pathParams": [],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "notes": {
                "isEmpty": true
              },
              "isResponseBinary": false,
              "isResponseFile": false,
              "baseName": "user",
              "consumes": [
                {
                  "mediaType": "application/json",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "hasParams": true,
              "hasOptionalParams": false,
              "hasRequiredParams": true,
              "hasQueryParams": false,
              "hasFormParams": false,
              "hasPathParams": false,
              "hasHeaderParams": false,
              "hasBodyParam": true,
              "openapi": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "username": {
                              "type": "string"
                            },
                            "firstName": {
                              "type": "string"
                            },
                            "lastName": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            },
                            "password": {
                              "type": "string"
                            },
                            "phone": {
                              "type": "string"
                            },
                            "userStatus": {
                              "type": "integer",
                              "format": "int32",
                              "description": "User Status"
                            }
                          },
                          "xml": {
                            "name": "User"
                          },
                          "x-oldref": "#/components/schemas/User"
                        }
                      }
                    }
                  },
                  "description": "List of user object",
                  "required": true,
                  "x-oldref": "#/components/requestBodies/UserArray"
                }
              },
              "authMethods": [],
              "bodyParams": [
                {
                  "isBodyParam": true,
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isFormParam": false,
                  "isDate": false,
                  "isDateTime": false,
                  "baseName": "body",
                  "paramName": "body",
                  "baseType": "object",
                  "required": true,
                  "optional": false,
                  "dataType": "array",
                  "description": "List of user object",
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "username": {
                          "type": "string"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "password": {
                          "type": "string"
                        },
                        "phone": {
                          "type": "string"
                        },
                        "userStatus": {
                          "type": "integer",
                          "format": "int32",
                          "description": "User Status"
                        }
                      },
                      "xml": {
                        "name": "User"
                      },
                      "x-oldref": "#/components/schemas/User"
                    }
                  },
                  "isEnum": false,
                  "vendorExtensions": {
                    "x-oldref": "#/components/requestBodies/UserArray"
                  },
                  "example": "[{\"id\":0,\"username\":\"string\",\"firstName\":\"string\",\"lastName\":\"string\",\"email\":\"string\",\"password\":\"string\",\"phone\":\"string\",\"userStatus\":0}]",
                  "type": "array",
                  "%dataType%": "array",
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"username\": {\n          \"type\": \"string\"\n        },\n        \"firstName\": {\n          \"type\": \"string\"\n        },\n        \"lastName\": {\n          \"type\": \"string\"\n        },\n        \"email\": {\n          \"type\": \"string\"\n        },\n        \"password\": {\n          \"type\": \"string\"\n        },\n        \"phone\": {\n          \"type\": \"string\"\n        },\n        \"userStatus\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\",\n          \"description\": \"User Status\"\n        }\n      },\n      \"xml\": {\n        \"name\": \"User\"\n      },\n      \"x-oldref\": \"#/components/schemas/User\"\n    }\n  }\n}",
                  "isFile": false,
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "bodyParam": {
                "isBodyParam": true,
                "isHeaderParam": false,
                "isQueryParam": false,
                "isPathParam": false,
                "isFormParam": false,
                "isDate": false,
                "isDateTime": false,
                "baseName": "body",
                "paramName": "body",
                "baseType": "object",
                "required": true,
                "optional": false,
                "dataType": "array",
                "description": "List of user object",
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "username": {
                        "type": "string"
                      },
                      "firstName": {
                        "type": "string"
                      },
                      "lastName": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      },
                      "phone": {
                        "type": "string"
                      },
                      "userStatus": {
                        "type": "integer",
                        "format": "int32",
                        "description": "User Status"
                      }
                    },
                    "xml": {
                      "name": "User"
                    },
                    "x-oldref": "#/components/schemas/User"
                  }
                },
                "isEnum": false,
                "vendorExtensions": {
                  "x-oldref": "#/components/requestBodies/UserArray"
                },
                "example": "[{\"id\":0,\"username\":\"string\",\"firstName\":\"string\",\"lastName\":\"string\",\"email\":\"string\",\"password\":\"string\",\"phone\":\"string\",\"userStatus\":0}]",
                "type": "array",
                "%dataType%": "array",
                "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"username\": {\n          \"type\": \"string\"\n        },\n        \"firstName\": {\n          \"type\": \"string\"\n        },\n        \"lastName\": {\n          \"type\": \"string\"\n        },\n        \"email\": {\n          \"type\": \"string\"\n        },\n        \"password\": {\n          \"type\": \"string\"\n        },\n        \"phone\": {\n          \"type\": \"string\"\n        },\n        \"userStatus\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\",\n          \"description\": \"User Status\"\n        }\n      },\n      \"xml\": {\n        \"name\": \"User\"\n      },\n      \"x-oldref\": \"#/components/schemas/User\"\n    }\n  }\n}",
                "isFile": false,
                "-first": true,
                "-last": true,
                "hasMore": false
              },
              "hasConsumes": true,
              "tags": [
                "user"
              ],
              "imports": [
                "user"
              ],
              "vendorExtensions": {},
              "responses": [
                {
                  "code": "default",
                  "isDefault": true,
                  "nickname": "responsedefault",
                  "message": "successful operation",
                  "description": "successful operation",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                }
              ],
              "examples": [],
              "-first": false,
              "-last": false,
              "hasMore": true
            },
            {
              "httpMethod": "POST",
              "path": "/user/createWithList",
              "replacedPathName": "/user/createWithList",
              "operationId": "createUsersWithListInput",
              "operationIdLowerCase": "createuserswithlistinput",
              "operationIdSnakeCase": "create_users_with_list_input",
              "nickname": "createUsersWithListInput",
              "description": "",
              "summary": "Creates list of users with given input array",
              "allParams": [
                {
                  "isBodyParam": true,
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isFormParam": false,
                  "isDate": false,
                  "isDateTime": false,
                  "baseName": "body",
                  "paramName": "body",
                  "baseType": "object",
                  "required": true,
                  "optional": false,
                  "dataType": "array",
                  "description": "List of user object",
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "username": {
                          "type": "string"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "password": {
                          "type": "string"
                        },
                        "phone": {
                          "type": "string"
                        },
                        "userStatus": {
                          "type": "integer",
                          "format": "int32",
                          "description": "User Status"
                        }
                      },
                      "xml": {
                        "name": "User"
                      },
                      "x-oldref": "#/components/schemas/User"
                    }
                  },
                  "isEnum": false,
                  "vendorExtensions": {
                    "x-oldref": "#/components/requestBodies/UserArray"
                  },
                  "example": "[{\"id\":0,\"username\":\"string\",\"firstName\":\"string\",\"lastName\":\"string\",\"email\":\"string\",\"password\":\"string\",\"phone\":\"string\",\"userStatus\":0}]",
                  "type": "array",
                  "%dataType%": "array",
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"username\": {\n          \"type\": \"string\"\n        },\n        \"firstName\": {\n          \"type\": \"string\"\n        },\n        \"lastName\": {\n          \"type\": \"string\"\n        },\n        \"email\": {\n          \"type\": \"string\"\n        },\n        \"password\": {\n          \"type\": \"string\"\n        },\n        \"phone\": {\n          \"type\": \"string\"\n        },\n        \"userStatus\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\",\n          \"description\": \"User Status\"\n        }\n      },\n      \"xml\": {\n        \"name\": \"User\"\n      },\n      \"x-oldref\": \"#/components/schemas/User\"\n    }\n  }\n}",
                  "isFile": false,
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "pathParams": [],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "notes": {
                "isEmpty": true
              },
              "isResponseBinary": false,
              "isResponseFile": false,
              "baseName": "user",
              "consumes": [
                {
                  "mediaType": "application/json",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "hasParams": true,
              "hasOptionalParams": false,
              "hasRequiredParams": true,
              "hasQueryParams": false,
              "hasFormParams": false,
              "hasPathParams": false,
              "hasHeaderParams": false,
              "hasBodyParam": true,
              "openapi": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "username": {
                              "type": "string"
                            },
                            "firstName": {
                              "type": "string"
                            },
                            "lastName": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            },
                            "password": {
                              "type": "string"
                            },
                            "phone": {
                              "type": "string"
                            },
                            "userStatus": {
                              "type": "integer",
                              "format": "int32",
                              "description": "User Status"
                            }
                          },
                          "xml": {
                            "name": "User"
                          },
                          "x-oldref": "#/components/schemas/User"
                        }
                      }
                    }
                  },
                  "description": "List of user object",
                  "required": true,
                  "x-oldref": "#/components/requestBodies/UserArray"
                }
              },
              "authMethods": [],
              "bodyParams": [
                {
                  "isBodyParam": true,
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isFormParam": false,
                  "isDate": false,
                  "isDateTime": false,
                  "baseName": "body",
                  "paramName": "body",
                  "baseType": "object",
                  "required": true,
                  "optional": false,
                  "dataType": "array",
                  "description": "List of user object",
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "username": {
                          "type": "string"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "password": {
                          "type": "string"
                        },
                        "phone": {
                          "type": "string"
                        },
                        "userStatus": {
                          "type": "integer",
                          "format": "int32",
                          "description": "User Status"
                        }
                      },
                      "xml": {
                        "name": "User"
                      },
                      "x-oldref": "#/components/schemas/User"
                    }
                  },
                  "isEnum": false,
                  "vendorExtensions": {
                    "x-oldref": "#/components/requestBodies/UserArray"
                  },
                  "example": "[{\"id\":0,\"username\":\"string\",\"firstName\":\"string\",\"lastName\":\"string\",\"email\":\"string\",\"password\":\"string\",\"phone\":\"string\",\"userStatus\":0}]",
                  "type": "array",
                  "%dataType%": "array",
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"username\": {\n          \"type\": \"string\"\n        },\n        \"firstName\": {\n          \"type\": \"string\"\n        },\n        \"lastName\": {\n          \"type\": \"string\"\n        },\n        \"email\": {\n          \"type\": \"string\"\n        },\n        \"password\": {\n          \"type\": \"string\"\n        },\n        \"phone\": {\n          \"type\": \"string\"\n        },\n        \"userStatus\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\",\n          \"description\": \"User Status\"\n        }\n      },\n      \"xml\": {\n        \"name\": \"User\"\n      },\n      \"x-oldref\": \"#/components/schemas/User\"\n    }\n  }\n}",
                  "isFile": false,
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "bodyParam": {
                "isBodyParam": true,
                "isHeaderParam": false,
                "isQueryParam": false,
                "isPathParam": false,
                "isFormParam": false,
                "isDate": false,
                "isDateTime": false,
                "baseName": "body",
                "paramName": "body",
                "baseType": "object",
                "required": true,
                "optional": false,
                "dataType": "array",
                "description": "List of user object",
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "username": {
                        "type": "string"
                      },
                      "firstName": {
                        "type": "string"
                      },
                      "lastName": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      },
                      "phone": {
                        "type": "string"
                      },
                      "userStatus": {
                        "type": "integer",
                        "format": "int32",
                        "description": "User Status"
                      }
                    },
                    "xml": {
                      "name": "User"
                    },
                    "x-oldref": "#/components/schemas/User"
                  }
                },
                "isEnum": false,
                "vendorExtensions": {
                  "x-oldref": "#/components/requestBodies/UserArray"
                },
                "example": "[{\"id\":0,\"username\":\"string\",\"firstName\":\"string\",\"lastName\":\"string\",\"email\":\"string\",\"password\":\"string\",\"phone\":\"string\",\"userStatus\":0}]",
                "type": "array",
                "%dataType%": "array",
                "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"username\": {\n          \"type\": \"string\"\n        },\n        \"firstName\": {\n          \"type\": \"string\"\n        },\n        \"lastName\": {\n          \"type\": \"string\"\n        },\n        \"email\": {\n          \"type\": \"string\"\n        },\n        \"password\": {\n          \"type\": \"string\"\n        },\n        \"phone\": {\n          \"type\": \"string\"\n        },\n        \"userStatus\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\",\n          \"description\": \"User Status\"\n        }\n      },\n      \"xml\": {\n        \"name\": \"User\"\n      },\n      \"x-oldref\": \"#/components/schemas/User\"\n    }\n  }\n}",
                "isFile": false,
                "-first": true,
                "-last": true,
                "hasMore": false
              },
              "hasConsumes": true,
              "tags": [
                "user"
              ],
              "imports": [
                "user"
              ],
              "vendorExtensions": {},
              "responses": [
                {
                  "code": "default",
                  "isDefault": true,
                  "nickname": "responsedefault",
                  "message": "successful operation",
                  "description": "successful operation",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                }
              ],
              "examples": [],
              "-first": false,
              "-last": false,
              "hasMore": true
            },
            {
              "httpMethod": "GET",
              "path": "/user/login",
              "replacedPathName": "/user/login",
              "operationId": "loginUser",
              "operationIdLowerCase": "loginuser",
              "operationIdSnakeCase": "login_user",
              "nickname": "loginUser",
              "description": "",
              "summary": "Logs user into the system",
              "allParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": true,
                  "isPathParam": false,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "username",
                  "baseName": "username",
                  "required": true,
                  "optional": false,
                  "dataType": "string",
                  "%dataType%": "string",
                  "example": "\"string\"",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "isDate": false,
                  "isDateTime": false,
                  "description": "The user name for login",
                  "unescapedDescription": "The user name for login",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": false,
                  "hasMore": true
                },
                {
                  "isHeaderParam": false,
                  "isQueryParam": true,
                  "isPathParam": false,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "password",
                  "baseName": "password",
                  "required": true,
                  "optional": false,
                  "dataType": "string",
                  "%dataType%": "string",
                  "format": "password",
                  "example": "\"pa$$word\"",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "dataFormat": "password",
                  "isDate": false,
                  "isDateTime": false,
                  "description": "The password for login in clear text",
                  "unescapedDescription": "The password for login in clear text",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": false,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "pathParams": [],
              "queryParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": true,
                  "isPathParam": false,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "username",
                  "baseName": "username",
                  "required": true,
                  "optional": false,
                  "dataType": "string",
                  "%dataType%": "string",
                  "example": "\"string\"",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "isDate": false,
                  "isDateTime": false,
                  "description": "The user name for login",
                  "unescapedDescription": "The user name for login",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": false,
                  "hasMore": true
                },
                {
                  "isHeaderParam": false,
                  "isQueryParam": true,
                  "isPathParam": false,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "password",
                  "baseName": "password",
                  "required": true,
                  "optional": false,
                  "dataType": "string",
                  "%dataType%": "string",
                  "format": "password",
                  "example": "\"pa$$word\"",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "dataFormat": "password",
                  "isDate": false,
                  "isDateTime": false,
                  "description": "The password for login in clear text",
                  "unescapedDescription": "The password for login in clear text",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": false,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "headerParams": [],
              "formParams": [],
              "notes": {
                "isEmpty": true
              },
              "isResponseBinary": false,
              "isResponseFile": false,
              "baseName": "user",
              "produces": [
                {
                  "mediaType": "application/xml",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "hasParams": true,
              "hasOptionalParams": false,
              "hasRequiredParams": true,
              "hasQueryParams": true,
              "hasFormParams": false,
              "hasPathParams": false,
              "hasHeaderParams": false,
              "hasBodyParam": false,
              "openapi": {},
              "authMethods": [],
              "bodyParams": [],
              "tags": [
                "user"
              ],
              "imports": [
                "user"
              ],
              "vendorExtensions": {},
              "responses": [
                {
                  "code": "200",
                  "isDefault": false,
                  "nickname": "response200",
                  "message": "successful operation",
                  "description": "successful operation",
                  "simpleType": true,
                  "schema": {
                    "type": "string"
                  },
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"string\"\n  }\n}",
                  "baseType": "string",
                  "dataType": "string",
                  "isPrimitiveType": true,
                  "hasExamples": true,
                  "examples": [
                    {
                      "contentType": "application/xml",
                      "example": "\"string\"",
                      "-first": true,
                      "-last": true,
                      "hasMore": false
                    }
                  ],
                  "responseHeaders": [],
                  "openapi": {}
                },
                {
                  "code": "400",
                  "isDefault": false,
                  "nickname": "response400",
                  "message": "Invalid username/password supplied",
                  "description": "Invalid username/password supplied",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                }
              ],
              "hasProduces": true,
              "examples": [
                {
                  "contentType": "application/xml",
                  "example": "\"string\"",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "returnType": "string",
              "returnBaseType": "string",
              "returnTypeIsPrimitive": true,
              "returnContainer": false,
              "-first": false,
              "-last": false,
              "hasMore": true
            },
            {
              "httpMethod": "GET",
              "path": "/user/logout",
              "replacedPathName": "/user/logout",
              "operationId": "logoutUser",
              "operationIdLowerCase": "logoutuser",
              "operationIdSnakeCase": "logout_user",
              "nickname": "logoutUser",
              "description": "",
              "summary": "Logs out current logged in user session",
              "allParams": [],
              "pathParams": [],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "notes": {
                "isEmpty": true
              },
              "isResponseBinary": false,
              "isResponseFile": false,
              "baseName": "user",
              "hasParams": false,
              "hasOptionalParams": false,
              "hasRequiredParams": false,
              "hasQueryParams": false,
              "hasFormParams": false,
              "hasPathParams": false,
              "hasHeaderParams": false,
              "hasBodyParam": false,
              "openapi": {},
              "authMethods": [],
              "bodyParams": [],
              "tags": [
                "user"
              ],
              "imports": [
                "user"
              ],
              "vendorExtensions": {},
              "responses": [
                {
                  "code": "default",
                  "isDefault": true,
                  "nickname": "responsedefault",
                  "message": "successful operation",
                  "description": "successful operation",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                }
              ],
              "examples": [],
              "-first": false,
              "-last": false,
              "hasMore": true
            },
            {
              "httpMethod": "GET",
              "path": "/user/{username}",
              "replacedPathName": "/user/{username}",
              "operationId": "getUserByName",
              "operationIdLowerCase": "getuserbyname",
              "operationIdSnakeCase": "get_user_by_name",
              "nickname": "getUserByName",
              "description": "",
              "summary": "Get user by user name",
              "allParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "username",
                  "baseName": "username",
                  "required": true,
                  "optional": false,
                  "dataType": "string",
                  "%dataType%": "string",
                  "example": "\"string\"",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "isDate": false,
                  "isDateTime": false,
                  "description": "The name that needs to be fetched. Use user1 for testing. ",
                  "unescapedDescription": "The name that needs to be fetched. Use user1 for testing. ",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "pathParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "username",
                  "baseName": "username",
                  "required": true,
                  "optional": false,
                  "dataType": "string",
                  "%dataType%": "string",
                  "example": "\"string\"",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "isDate": false,
                  "isDateTime": false,
                  "description": "The name that needs to be fetched. Use user1 for testing. ",
                  "unescapedDescription": "The name that needs to be fetched. Use user1 for testing. ",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "notes": {
                "isEmpty": true
              },
              "isResponseBinary": false,
              "isResponseFile": false,
              "baseName": "user",
              "produces": [
                {
                  "mediaType": "application/xml",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "hasParams": true,
              "hasOptionalParams": false,
              "hasRequiredParams": true,
              "hasQueryParams": false,
              "hasFormParams": false,
              "hasPathParams": true,
              "hasHeaderParams": false,
              "hasBodyParam": false,
              "openapi": {},
              "authMethods": [],
              "bodyParams": [],
              "tags": [
                "user"
              ],
              "imports": [
                "user"
              ],
              "vendorExtensions": {},
              "responses": [
                {
                  "code": "200",
                  "isDefault": false,
                  "nickname": "response200",
                  "message": "successful operation",
                  "description": "successful operation",
                  "simpleType": true,
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "username": {
                        "type": "string"
                      },
                      "firstName": {
                        "type": "string"
                      },
                      "lastName": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      },
                      "phone": {
                        "type": "string"
                      },
                      "userStatus": {
                        "type": "integer",
                        "format": "int32",
                        "description": "User Status"
                      }
                    },
                    "xml": {
                      "name": "User"
                    },
                    "x-oldref": "#/components/schemas/User"
                  },
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"username\": {\n        \"type\": \"string\"\n      },\n      \"firstName\": {\n        \"type\": \"string\"\n      },\n      \"lastName\": {\n        \"type\": \"string\"\n      },\n      \"email\": {\n        \"type\": \"string\"\n      },\n      \"password\": {\n        \"type\": \"string\"\n      },\n      \"phone\": {\n        \"type\": \"string\"\n      },\n      \"userStatus\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\",\n        \"description\": \"User Status\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"User\"\n    },\n    \"x-oldref\": \"#/components/schemas/User\"\n  }\n}",
                  "baseType": "object",
                  "dataType": "User",
                  "isPrimitiveType": false,
                  "hasExamples": true,
                  "examples": [
                    {
                      "contentType": "application/xml",
                      "example": "{\n  \"id\": 0,\n  \"username\": \"string\",\n  \"firstName\": \"string\",\n  \"lastName\": \"string\",\n  \"email\": \"string\",\n  \"password\": \"string\",\n  \"phone\": \"string\",\n  \"userStatus\": 0\n}",
                      "-first": true,
                      "-last": true,
                      "hasMore": false
                    }
                  ],
                  "responseHeaders": [],
                  "openapi": {}
                },
                {
                  "code": "400",
                  "isDefault": false,
                  "nickname": "response400",
                  "message": "Invalid username supplied",
                  "description": "Invalid username supplied",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                },
                {
                  "code": "404",
                  "isDefault": false,
                  "nickname": "response404",
                  "message": "User not found",
                  "description": "User not found",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                }
              ],
              "hasProduces": true,
              "examples": [
                {
                  "contentType": "application/xml",
                  "example": "{\n  \"id\": 0,\n  \"username\": \"string\",\n  \"firstName\": \"string\",\n  \"lastName\": \"string\",\n  \"email\": \"string\",\n  \"password\": \"string\",\n  \"phone\": \"string\",\n  \"userStatus\": 0\n}",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "returnType": "User",
              "returnBaseType": "object",
              "returnTypeIsPrimitive": false,
              "returnContainer": true,
              "-first": false,
              "-last": false,
              "hasMore": true
            },
            {
              "httpMethod": "PUT",
              "path": "/user/{username}",
              "replacedPathName": "/user/{username}",
              "operationId": "updateUser",
              "operationIdLowerCase": "updateuser",
              "operationIdSnakeCase": "update_user",
              "nickname": "updateUser",
              "description": "This can only be done by the logged in user.",
              "summary": "Updated user",
              "allParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "username",
                  "baseName": "username",
                  "required": true,
                  "optional": false,
                  "dataType": "string",
                  "%dataType%": "string",
                  "example": "\"string\"",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "isDate": false,
                  "isDateTime": false,
                  "description": "name that need to be updated",
                  "unescapedDescription": "name that need to be updated",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": false,
                  "hasMore": true
                },
                {
                  "isBodyParam": true,
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isFormParam": false,
                  "isDate": false,
                  "isDateTime": false,
                  "baseName": "body",
                  "paramName": "body",
                  "baseType": "object",
                  "required": true,
                  "optional": false,
                  "dataType": "object",
                  "description": "Updated user object",
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "username": {
                        "type": "string"
                      },
                      "firstName": {
                        "type": "string"
                      },
                      "lastName": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      },
                      "phone": {
                        "type": "string"
                      },
                      "userStatus": {
                        "type": "integer",
                        "format": "int32",
                        "description": "User Status"
                      }
                    },
                    "xml": {
                      "name": "User"
                    },
                    "x-oldref": "#/components/schemas/User"
                  },
                  "isEnum": false,
                  "vendorExtensions": {},
                  "example": "{\"id\":0,\"username\":\"string\",\"firstName\":\"string\",\"lastName\":\"string\",\"email\":\"string\",\"password\":\"string\",\"phone\":\"string\",\"userStatus\":0}",
                  "type": "object",
                  "%dataType%": "object",
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"username\": {\n        \"type\": \"string\"\n      },\n      \"firstName\": {\n        \"type\": \"string\"\n      },\n      \"lastName\": {\n        \"type\": \"string\"\n      },\n      \"email\": {\n        \"type\": \"string\"\n      },\n      \"password\": {\n        \"type\": \"string\"\n      },\n      \"phone\": {\n        \"type\": \"string\"\n      },\n      \"userStatus\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\",\n        \"description\": \"User Status\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"User\"\n    },\n    \"x-oldref\": \"#/components/schemas/User\"\n  }\n}",
                  "isFile": false,
                  "-first": false,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "pathParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "username",
                  "baseName": "username",
                  "required": true,
                  "optional": false,
                  "dataType": "string",
                  "%dataType%": "string",
                  "example": "\"string\"",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "isDate": false,
                  "isDateTime": false,
                  "description": "name that need to be updated",
                  "unescapedDescription": "name that need to be updated",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "notes": "This can only be done by the logged in user.",
              "isResponseBinary": false,
              "isResponseFile": false,
              "baseName": "user",
              "consumes": [
                {
                  "mediaType": "application/json",
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "hasParams": true,
              "hasOptionalParams": false,
              "hasRequiredParams": true,
              "hasQueryParams": false,
              "hasFormParams": false,
              "hasPathParams": true,
              "hasHeaderParams": false,
              "hasBodyParam": true,
              "openapi": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "username": {
                            "type": "string"
                          },
                          "firstName": {
                            "type": "string"
                          },
                          "lastName": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "password": {
                            "type": "string"
                          },
                          "phone": {
                            "type": "string"
                          },
                          "userStatus": {
                            "type": "integer",
                            "format": "int32",
                            "description": "User Status"
                          }
                        },
                        "xml": {
                          "name": "User"
                        },
                        "x-oldref": "#/components/schemas/User"
                      }
                    }
                  },
                  "description": "Updated user object",
                  "required": true
                }
              },
              "authMethods": [],
              "bodyParams": [
                {
                  "isBodyParam": true,
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isFormParam": false,
                  "isDate": false,
                  "isDateTime": false,
                  "baseName": "body",
                  "paramName": "body",
                  "baseType": "object",
                  "required": true,
                  "optional": false,
                  "dataType": "object",
                  "description": "Updated user object",
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "username": {
                        "type": "string"
                      },
                      "firstName": {
                        "type": "string"
                      },
                      "lastName": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      },
                      "phone": {
                        "type": "string"
                      },
                      "userStatus": {
                        "type": "integer",
                        "format": "int32",
                        "description": "User Status"
                      }
                    },
                    "xml": {
                      "name": "User"
                    },
                    "x-oldref": "#/components/schemas/User"
                  },
                  "isEnum": false,
                  "vendorExtensions": {},
                  "example": "{\"id\":0,\"username\":\"string\",\"firstName\":\"string\",\"lastName\":\"string\",\"email\":\"string\",\"password\":\"string\",\"phone\":\"string\",\"userStatus\":0}",
                  "type": "object",
                  "%dataType%": "object",
                  "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"username\": {\n        \"type\": \"string\"\n      },\n      \"firstName\": {\n        \"type\": \"string\"\n      },\n      \"lastName\": {\n        \"type\": \"string\"\n      },\n      \"email\": {\n        \"type\": \"string\"\n      },\n      \"password\": {\n        \"type\": \"string\"\n      },\n      \"phone\": {\n        \"type\": \"string\"\n      },\n      \"userStatus\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\",\n        \"description\": \"User Status\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"User\"\n    },\n    \"x-oldref\": \"#/components/schemas/User\"\n  }\n}",
                  "isFile": false,
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "bodyParam": {
                "isBodyParam": true,
                "isHeaderParam": false,
                "isQueryParam": false,
                "isPathParam": false,
                "isFormParam": false,
                "isDate": false,
                "isDateTime": false,
                "baseName": "body",
                "paramName": "body",
                "baseType": "object",
                "required": true,
                "optional": false,
                "dataType": "object",
                "description": "Updated user object",
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "username": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    },
                    "phone": {
                      "type": "string"
                    },
                    "userStatus": {
                      "type": "integer",
                      "format": "int32",
                      "description": "User Status"
                    }
                  },
                  "xml": {
                    "name": "User"
                  },
                  "x-oldref": "#/components/schemas/User"
                },
                "isEnum": false,
                "vendorExtensions": {},
                "example": "{\"id\":0,\"username\":\"string\",\"firstName\":\"string\",\"lastName\":\"string\",\"email\":\"string\",\"password\":\"string\",\"phone\":\"string\",\"userStatus\":0}",
                "type": "object",
                "%dataType%": "object",
                "jsonSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"username\": {\n        \"type\": \"string\"\n      },\n      \"firstName\": {\n        \"type\": \"string\"\n      },\n      \"lastName\": {\n        \"type\": \"string\"\n      },\n      \"email\": {\n        \"type\": \"string\"\n      },\n      \"password\": {\n        \"type\": \"string\"\n      },\n      \"phone\": {\n        \"type\": \"string\"\n      },\n      \"userStatus\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\",\n        \"description\": \"User Status\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"User\"\n    },\n    \"x-oldref\": \"#/components/schemas/User\"\n  }\n}",
                "isFile": false,
                "-first": true,
                "-last": true,
                "hasMore": false
              },
              "hasConsumes": true,
              "tags": [
                "user"
              ],
              "imports": [
                "user"
              ],
              "vendorExtensions": {},
              "responses": [
                {
                  "code": "400",
                  "isDefault": false,
                  "nickname": "response400",
                  "message": "Invalid user supplied",
                  "description": "Invalid user supplied",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                },
                {
                  "code": "404",
                  "isDefault": false,
                  "nickname": "response404",
                  "message": "User not found",
                  "description": "User not found",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                }
              ],
              "examples": [],
              "-first": false,
              "-last": false,
              "hasMore": true
            },
            {
              "httpMethod": "DELETE",
              "path": "/user/{username}",
              "replacedPathName": "/user/{username}",
              "operationId": "deleteUser",
              "operationIdLowerCase": "deleteuser",
              "operationIdSnakeCase": "delete_user",
              "nickname": "deleteUser",
              "description": "This can only be done by the logged in user.",
              "summary": "Delete user",
              "allParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "username",
                  "baseName": "username",
                  "required": true,
                  "optional": false,
                  "dataType": "string",
                  "%dataType%": "string",
                  "example": "\"string\"",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "isDate": false,
                  "isDateTime": false,
                  "description": "The name that needs to be deleted",
                  "unescapedDescription": "The name that needs to be deleted",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "pathParams": [
                {
                  "isHeaderParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isBodyParam": false,
                  "isFormParam": false,
                  "paramName": "username",
                  "baseName": "username",
                  "required": true,
                  "optional": false,
                  "dataType": "string",
                  "%dataType%": "string",
                  "example": "\"string\"",
                  "isBoolean": false,
                  "isPrimitiveType": true,
                  "isDate": false,
                  "isDateTime": false,
                  "description": "The name that needs to be deleted",
                  "unescapedDescription": "The name that needs to be deleted",
                  "isFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "-first": true,
                  "-last": true,
                  "hasMore": false
                }
              ],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "notes": "This can only be done by the logged in user.",
              "isResponseBinary": false,
              "isResponseFile": false,
              "baseName": "user",
              "hasParams": true,
              "hasOptionalParams": false,
              "hasRequiredParams": true,
              "hasQueryParams": false,
              "hasFormParams": false,
              "hasPathParams": true,
              "hasHeaderParams": false,
              "hasBodyParam": false,
              "openapi": {},
              "authMethods": [],
              "bodyParams": [],
              "tags": [
                "user"
              ],
              "imports": [
                "user"
              ],
              "vendorExtensions": {},
              "responses": [
                {
                  "code": "400",
                  "isDefault": false,
                  "nickname": "response400",
                  "message": "Invalid username supplied",
                  "description": "Invalid username supplied",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                },
                {
                  "code": "404",
                  "isDefault": false,
                  "nickname": "response404",
                  "message": "User not found",
                  "description": "User not found",
                  "simpleType": true,
                  "schema": {},
                  "jsonSchema": "{\n  \"schema\": {}\n}",
                  "responseHeaders": [],
                  "examples": [],
                  "openapi": {}
                }
              ],
              "examples": [],
              "-first": false,
              "-last": true,
              "hasMore": false
            }
          ]
        },
        "-first": false,
        "-last": true,
        "hasMore": false
      }
    ]
  },
  "hasConsumes": true,
  "hasProduces": true
}

[
  {
    "model": {
      "name": "Order",
      "classname": "Order",
      "classVarName": "Order",
      "modelJson": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"petId\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"quantity\": {\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n    },\n    \"shipDate\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\"\n    },\n    \"status\": {\n      \"type\": \"string\",\n      \"description\": \"Order Status\",\n      \"enum\": [\n        \"placed\",\n        \"approved\",\n        \"delivered\"\n      ]\n    },\n    \"complete\": {\n      \"type\": \"boolean\",\n      \"default\": false\n    }\n  },\n  \"xml\": {\n    \"name\": \"Order\"\n  },\n  \"x-oldref\": \"#/components/schemas/Order\"\n}",
      "classFilename": "clsOrder",
      "modelPackage": "Order",
      "hasEnums": true,
      "vars": [
        {
          "name": "id",
          "baseName": "id",
          "getter": "getId",
          "setter": "setId",
          "description": "",
          "unescapedDescription": "",
          "type": "integer",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "integer",
          "jsonSchema": "{\n  \"type\": \"integer\",\n  \"format\": \"int64\"\n}",
          "isEnum": false,
          "isPrimitiveType": true,
          "isNotContainer": true,
          "isContainer": false,
          "dataFormat": "int64",
          "nameInCamelCase": "Id",
          "datatypeWithEnum": "Order.idEnum",
          "enumName": "idEnum",
          "-first": true,
          "-last": false,
          "hasMore": true
        },
        {
          "name": "petId",
          "baseName": "petid",
          "getter": "getPetId",
          "setter": "setPetId",
          "description": "",
          "unescapedDescription": "",
          "type": "integer",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "integer",
          "jsonSchema": "{\n  \"type\": \"integer\",\n  \"format\": \"int64\"\n}",
          "isEnum": false,
          "isPrimitiveType": true,
          "isNotContainer": true,
          "isContainer": false,
          "dataFormat": "int64",
          "nameInCamelCase": "PetId",
          "datatypeWithEnum": "Order.petIdEnum",
          "enumName": "petIdEnum",
          "-first": false,
          "-last": false,
          "hasMore": true
        },
        {
          "name": "quantity",
          "baseName": "quantity",
          "getter": "getQuantity",
          "setter": "setQuantity",
          "description": "",
          "unescapedDescription": "",
          "type": "integer",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "integer",
          "jsonSchema": "{\n  \"type\": \"integer\",\n  \"format\": \"int32\"\n}",
          "isEnum": false,
          "isPrimitiveType": true,
          "isNotContainer": true,
          "isContainer": false,
          "dataFormat": "int32",
          "nameInCamelCase": "Quantity",
          "datatypeWithEnum": "Order.quantityEnum",
          "enumName": "quantityEnum",
          "-first": false,
          "-last": false,
          "hasMore": true
        },
        {
          "name": "shipDate",
          "baseName": "shipdate",
          "getter": "getShipDate",
          "setter": "setShipDate",
          "description": "",
          "unescapedDescription": "",
          "type": "string",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "string",
          "jsonSchema": "{\n  \"type\": \"string\",\n  \"format\": \"date-time\"\n}",
          "isEnum": false,
          "isPrimitiveType": true,
          "isNotContainer": true,
          "isContainer": false,
          "dataFormat": "date-time",
          "nameInCamelCase": "ShipDate",
          "datatypeWithEnum": "Order.shipDateEnum",
          "enumName": "shipDateEnum",
          "-first": false,
          "-last": false,
          "hasMore": true
        },
        {
          "name": "status",
          "baseName": "status",
          "getter": "getStatus",
          "setter": "setStatus",
          "description": "Order Status",
          "unescapedDescription": "Order Status",
          "type": "string",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "string",
          "jsonSchema": "{\n  \"type\": \"string\",\n  \"description\": \"Order Status\",\n  \"enum\": [\n    \"placed\",\n    \"approved\",\n    \"delivered\"\n  ]\n}",
          "isEnum": true,
          "isPrimitiveType": true,
          "isNotContainer": false,
          "isContainer": true,
          "nameInCamelCase": "Status",
          "datatypeWithEnum": "Order.statusEnum",
          "enumName": "statusEnum",
          "-first": false,
          "-last": false,
          "hasMore": true
        },
        {
          "name": "complete",
          "baseName": "complete",
          "getter": "getComplete",
          "setter": "setComplete",
          "description": "",
          "unescapedDescription": "",
          "type": "boolean",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "boolean",
          "jsonSchema": "{\n  \"type\": \"boolean\",\n  \"default\": false\n}",
          "isEnum": false,
          "isPrimitiveType": true,
          "isNotContainer": true,
          "isContainer": false,
          "defaultValue": false,
          "nameInCamelCase": "Complete",
          "datatypeWithEnum": "Order.completeEnum",
          "enumName": "completeEnum",
          "-first": false,
          "-last": true,
          "hasMore": false
        }
      ],
      "allowableValues": {
        "enumVars": [
          {
            "name": "placed",
            "value": "\"placed\"",
            "-first": true,
            "-last": false,
            "hasMore": true
          },
          {
            "name": "approved",
            "value": "\"approved\"",
            "-first": false,
            "-last": false,
            "hasMore": true
          },
          {
            "name": "delivered",
            "value": "\"delivered\"",
            "-first": false,
            "-last": true,
            "hasMore": false
          }
        ]
      },
      "allowableValues.values": [
        "placed",
        "approved",
        "delivered"
      ]
    },
    "importPath": "Order"
  },
  {
    "model": {
      "name": "Category",
      "classname": "Category",
      "classVarName": "Category",
      "modelJson": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"xml\": {\n    \"name\": \"Category\"\n  },\n  \"x-oldref\": \"#/components/schemas/Category\"\n}",
      "classFilename": "clsCategory",
      "modelPackage": "Category",
      "hasEnums": true,
      "vars": [
        {
          "name": "id",
          "baseName": "id",
          "getter": "getId",
          "setter": "setId",
          "description": "",
          "unescapedDescription": "",
          "type": "integer",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "integer",
          "jsonSchema": "{\n  \"type\": \"integer\",\n  \"format\": \"int64\"\n}",
          "isEnum": false,
          "isPrimitiveType": true,
          "isNotContainer": true,
          "isContainer": false,
          "dataFormat": "int64",
          "nameInCamelCase": "Id",
          "datatypeWithEnum": "Category.idEnum",
          "enumName": "idEnum",
          "-first": true,
          "-last": false,
          "hasMore": true
        },
        {
          "name": "name",
          "baseName": "name",
          "getter": "getName",
          "setter": "setName",
          "description": "",
          "unescapedDescription": "",
          "type": "string",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "string",
          "jsonSchema": "{\n  \"type\": \"string\"\n}",
          "isEnum": false,
          "isPrimitiveType": true,
          "isNotContainer": true,
          "isContainer": false,
          "nameInCamelCase": "Name",
          "datatypeWithEnum": "Category.nameEnum",
          "enumName": "nameEnum",
          "-first": false,
          "-last": true,
          "hasMore": false
        }
      ]
    },
    "importPath": "Category"
  },
  {
    "model": {
      "name": "User",
      "classname": "User",
      "classVarName": "User",
      "modelJson": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"username\": {\n      \"type\": \"string\"\n    },\n    \"firstName\": {\n      \"type\": \"string\"\n    },\n    \"lastName\": {\n      \"type\": \"string\"\n    },\n    \"email\": {\n      \"type\": \"string\"\n    },\n    \"password\": {\n      \"type\": \"string\"\n    },\n    \"phone\": {\n      \"type\": \"string\"\n    },\n    \"userStatus\": {\n      \"type\": \"integer\",\n      \"format\": \"int32\",\n      \"description\": \"User Status\"\n    }\n  },\n  \"xml\": {\n    \"name\": \"User\"\n  },\n  \"x-oldref\": \"#/components/schemas/User\"\n}",
      "classFilename": "clsUser",
      "modelPackage": "User",
      "hasEnums": true,
      "vars": [
        {
          "name": "id",
          "baseName": "id",
          "getter": "getId",
          "setter": "setId",
          "description": "",
          "unescapedDescription": "",
          "type": "integer",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "integer",
          "jsonSchema": "{\n  \"type\": \"integer\",\n  \"format\": \"int64\"\n}",
          "isEnum": false,
          "isPrimitiveType": true,
          "isNotContainer": true,
          "isContainer": false,
          "dataFormat": "int64",
          "nameInCamelCase": "Id",
          "datatypeWithEnum": "User.idEnum",
          "enumName": "idEnum",
          "-first": true,
          "-last": false,
          "hasMore": true
        },
        {
          "name": "username",
          "baseName": "username",
          "getter": "getUsername",
          "setter": "setUsername",
          "description": "",
          "unescapedDescription": "",
          "type": "string",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "string",
          "jsonSchema": "{\n  \"type\": \"string\"\n}",
          "isEnum": false,
          "isPrimitiveType": true,
          "isNotContainer": true,
          "isContainer": false,
          "nameInCamelCase": "Username",
          "datatypeWithEnum": "User.usernameEnum",
          "enumName": "usernameEnum",
          "-first": false,
          "-last": false,
          "hasMore": true
        },
        {
          "name": "firstName",
          "baseName": "firstname",
          "getter": "getFirstName",
          "setter": "setFirstName",
          "description": "",
          "unescapedDescription": "",
          "type": "string",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "string",
          "jsonSchema": "{\n  \"type\": \"string\"\n}",
          "isEnum": false,
          "isPrimitiveType": true,
          "isNotContainer": true,
          "isContainer": false,
          "nameInCamelCase": "FirstName",
          "datatypeWithEnum": "User.firstNameEnum",
          "enumName": "firstNameEnum",
          "-first": false,
          "-last": false,
          "hasMore": true
        },
        {
          "name": "lastName",
          "baseName": "lastname",
          "getter": "getLastName",
          "setter": "setLastName",
          "description": "",
          "unescapedDescription": "",
          "type": "string",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "string",
          "jsonSchema": "{\n  \"type\": \"string\"\n}",
          "isEnum": false,
          "isPrimitiveType": true,
          "isNotContainer": true,
          "isContainer": false,
          "nameInCamelCase": "LastName",
          "datatypeWithEnum": "User.lastNameEnum",
          "enumName": "lastNameEnum",
          "-first": false,
          "-last": false,
          "hasMore": true
        },
        {
          "name": "email",
          "baseName": "email",
          "getter": "getEmail",
          "setter": "setEmail",
          "description": "",
          "unescapedDescription": "",
          "type": "string",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "string",
          "jsonSchema": "{\n  \"type\": \"string\"\n}",
          "isEnum": false,
          "isPrimitiveType": true,
          "isNotContainer": true,
          "isContainer": false,
          "nameInCamelCase": "Email",
          "datatypeWithEnum": "User.emailEnum",
          "enumName": "emailEnum",
          "-first": false,
          "-last": false,
          "hasMore": true
        },
        {
          "name": "password",
          "baseName": "password",
          "getter": "getPassword",
          "setter": "setPassword",
          "description": "",
          "unescapedDescription": "",
          "type": "string",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "string",
          "jsonSchema": "{\n  \"type\": \"string\"\n}",
          "isEnum": false,
          "isPrimitiveType": true,
          "isNotContainer": true,
          "isContainer": false,
          "nameInCamelCase": "Password",
          "datatypeWithEnum": "User.passwordEnum",
          "enumName": "passwordEnum",
          "-first": false,
          "-last": false,
          "hasMore": true
        },
        {
          "name": "phone",
          "baseName": "phone",
          "getter": "getPhone",
          "setter": "setPhone",
          "description": "",
          "unescapedDescription": "",
          "type": "string",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "string",
          "jsonSchema": "{\n  \"type\": \"string\"\n}",
          "isEnum": false,
          "isPrimitiveType": true,
          "isNotContainer": true,
          "isContainer": false,
          "nameInCamelCase": "Phone",
          "datatypeWithEnum": "User.phoneEnum",
          "enumName": "phoneEnum",
          "-first": false,
          "-last": false,
          "hasMore": true
        },
        {
          "name": "userStatus",
          "baseName": "userstatus",
          "getter": "getUserStatus",
          "setter": "setUserStatus",
          "description": "User Status",
          "unescapedDescription": "User Status",
          "type": "integer",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "integer",
          "jsonSchema": "{\n  \"type\": \"integer\",\n  \"format\": \"int32\",\n  \"description\": \"User Status\"\n}",
          "isEnum": false,
          "isPrimitiveType": true,
          "isNotContainer": true,
          "isContainer": false,
          "dataFormat": "int32",
          "nameInCamelCase": "UserStatus",
          "datatypeWithEnum": "User.userStatusEnum",
          "enumName": "userStatusEnum",
          "-first": false,
          "-last": true,
          "hasMore": false
        }
      ]
    },
    "importPath": "User"
  },
  {
    "model": {
      "name": "Tag",
      "classname": "Tag",
      "classVarName": "Tag",
      "modelJson": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"xml\": {\n    \"name\": \"Tag\"\n  },\n  \"x-oldref\": \"#/components/schemas/Tag\"\n}",
      "classFilename": "clsTag",
      "modelPackage": "Tag",
      "hasEnums": true,
      "vars": [
        {
          "name": "id",
          "baseName": "id",
          "getter": "getId",
          "setter": "setId",
          "description": "",
          "unescapedDescription": "",
          "type": "integer",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "integer",
          "jsonSchema": "{\n  \"type\": \"integer\",\n  \"format\": \"int64\"\n}",
          "isEnum": false,
          "isPrimitiveType": true,
          "isNotContainer": true,
          "isContainer": false,
          "dataFormat": "int64",
          "nameInCamelCase": "Id",
          "datatypeWithEnum": "Tag.idEnum",
          "enumName": "idEnum",
          "-first": true,
          "-last": false,
          "hasMore": true
        },
        {
          "name": "name",
          "baseName": "name",
          "getter": "getName",
          "setter": "setName",
          "description": "",
          "unescapedDescription": "",
          "type": "string",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "string",
          "jsonSchema": "{\n  \"type\": \"string\"\n}",
          "isEnum": false,
          "isPrimitiveType": true,
          "isNotContainer": true,
          "isContainer": false,
          "nameInCamelCase": "Name",
          "datatypeWithEnum": "Tag.nameEnum",
          "enumName": "nameEnum",
          "-first": false,
          "-last": true,
          "hasMore": false
        }
      ]
    },
    "importPath": "Tag"
  },
  {
    "model": {
      "name": "Pet",
      "classname": "Pet",
      "classVarName": "Pet",
      "modelJson": "{\n  \"type\": \"object\",\n  \"required\": [\n    \"name\",\n    \"photoUrls\"\n  ],\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"category\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      },\n      \"xml\": {\n        \"name\": \"Category\"\n      },\n      \"x-oldref\": \"#/components/schemas/Category\"\n    },\n    \"name\": {\n      \"type\": \"string\",\n      \"example\": \"doggie\"\n    },\n    \"photoUrls\": {\n      \"type\": \"array\",\n      \"xml\": {\n        \"name\": \"photoUrl\",\n        \"wrapped\": true\n      },\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"tags\": {\n      \"type\": \"array\",\n      \"xml\": {\n        \"name\": \"tag\",\n        \"wrapped\": true\n      },\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          }\n        },\n        \"xml\": {\n          \"name\": \"Tag\"\n        },\n        \"x-oldref\": \"#/components/schemas/Tag\"\n      }\n    },\n    \"status\": {\n      \"type\": \"string\",\n      \"description\": \"pet status in the store\",\n      \"enum\": [\n        \"available\",\n        \"pending\",\n        \"sold\"\n      ]\n    }\n  },\n  \"xml\": {\n    \"name\": \"Pet\"\n  },\n  \"x-oldref\": \"#/components/schemas/Pet\"\n}",
      "classFilename": "clsPet",
      "modelPackage": "Pet",
      "hasEnums": true,
      "vars": [
        {
          "name": "id",
          "baseName": "id",
          "getter": "getId",
          "setter": "setId",
          "description": "",
          "unescapedDescription": "",
          "type": "integer",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "integer",
          "jsonSchema": "{\n  \"type\": \"integer\",\n  \"format\": \"int64\"\n}",
          "isEnum": false,
          "isPrimitiveType": true,
          "isNotContainer": true,
          "isContainer": false,
          "dataFormat": "int64",
          "nameInCamelCase": "Id",
          "datatypeWithEnum": "Pet.idEnum",
          "enumName": "idEnum",
          "-first": true,
          "-last": false,
          "hasMore": true
        },
        {
          "name": "category",
          "baseName": "category",
          "getter": "getCategory",
          "setter": "setCategory",
          "description": "",
          "unescapedDescription": "",
          "type": "object",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "object",
          "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"xml\": {\n    \"name\": \"Category\"\n  },\n  \"x-oldref\": \"#/components/schemas/Category\"\n}",
          "isEnum": false,
          "isPrimitiveType": false,
          "isNotContainer": false,
          "isContainer": true,
          "nameInCamelCase": "Category",
          "datatypeWithEnum": "Pet.categoryEnum",
          "enumName": "categoryEnum",
          "-first": false,
          "-last": false,
          "hasMore": true
        },
        {
          "name": "name",
          "baseName": "name",
          "getter": "getName",
          "setter": "setName",
          "description": "",
          "unescapedDescription": "",
          "type": "string",
          "required": true,
          "isNotRequired": false,
          "readOnly": false,
          "datatype": "string",
          "jsonSchema": "{\n  \"type\": \"string\",\n  \"example\": \"doggie\"\n}",
          "isEnum": false,
          "isPrimitiveType": true,
          "isNotContainer": true,
          "isContainer": false,
          "nameInCamelCase": "Name",
          "datatypeWithEnum": "Pet.nameEnum",
          "enumName": "nameEnum",
          "-first": false,
          "-last": false,
          "hasMore": true
        },
        {
          "name": "photoUrls",
          "baseName": "photourls",
          "getter": "getPhotoUrls",
          "setter": "setPhotoUrls",
          "description": "",
          "unescapedDescription": "",
          "type": "array",
          "required": true,
          "isNotRequired": false,
          "readOnly": false,
          "datatype": "array",
          "jsonSchema": "{\n  \"type\": \"array\",\n  \"xml\": {\n    \"name\": \"photoUrl\",\n    \"wrapped\": true\n  },\n  \"items\": {\n    \"type\": \"string\"\n  }\n}",
          "isEnum": false,
          "isPrimitiveType": false,
          "isNotContainer": false,
          "isContainer": true,
          "nameInCamelCase": "PhotoUrls",
          "datatypeWithEnum": "Pet.photoUrlsEnum",
          "enumName": "photoUrlsEnum",
          "-first": false,
          "-last": false,
          "hasMore": true
        },
        {
          "name": "tags",
          "baseName": "tags",
          "getter": "getTags",
          "setter": "setTags",
          "description": "",
          "unescapedDescription": "",
          "type": "array",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "array",
          "jsonSchema": "{\n  \"type\": \"array\",\n  \"xml\": {\n    \"name\": \"tag\",\n    \"wrapped\": true\n  },\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int64\"\n      },\n      \"name\": {\n        \"type\": \"string\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"Tag\"\n    },\n    \"x-oldref\": \"#/components/schemas/Tag\"\n  }\n}",
          "isEnum": false,
          "isPrimitiveType": false,
          "isNotContainer": false,
          "isContainer": true,
          "nameInCamelCase": "Tags",
          "datatypeWithEnum": "Pet.tagsEnum",
          "enumName": "tagsEnum",
          "-first": false,
          "-last": false,
          "hasMore": true
        },
        {
          "name": "status",
          "baseName": "status",
          "getter": "getStatus",
          "setter": "setStatus",
          "description": "pet status in the store",
          "unescapedDescription": "pet status in the store",
          "type": "string",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "string",
          "jsonSchema": "{\n  \"type\": \"string\",\n  \"description\": \"pet status in the store\",\n  \"enum\": [\n    \"available\",\n    \"pending\",\n    \"sold\"\n  ]\n}",
          "isEnum": true,
          "isPrimitiveType": true,
          "isNotContainer": false,
          "isContainer": true,
          "nameInCamelCase": "Status",
          "datatypeWithEnum": "Pet.statusEnum",
          "enumName": "statusEnum",
          "-first": false,
          "-last": true,
          "hasMore": false
        }
      ],
      "allowableValues": {
        "enumVars": [
          {
            "name": "available",
            "value": "\"available\"",
            "-first": true,
            "-last": false,
            "hasMore": true
          },
          {
            "name": "pending",
            "value": "\"pending\"",
            "-first": false,
            "-last": false,
            "hasMore": true
          },
          {
            "name": "sold",
            "value": "\"sold\"",
            "-first": false,
            "-last": true,
            "hasMore": false
          }
        ]
      },
      "allowableValues.values": [
        "available",
        "pending",
        "sold"
      ]
    },
    "importPath": "Pet"
  },
  {
    "model": {
      "name": "ApiResponse",
      "classname": "ApiResponse",
      "classVarName": "ApiResponse",
      "modelJson": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"code\": {\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n    },\n    \"type\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  },\n  \"x-oldref\": \"#/components/schemas/ApiResponse\"\n}",
      "classFilename": "clsApiResponse",
      "modelPackage": "ApiResponse",
      "hasEnums": true,
      "vars": [
        {
          "name": "code",
          "baseName": "code",
          "getter": "getCode",
          "setter": "setCode",
          "description": "",
          "unescapedDescription": "",
          "type": "integer",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "integer",
          "jsonSchema": "{\n  \"type\": \"integer\",\n  \"format\": \"int32\"\n}",
          "isEnum": false,
          "isPrimitiveType": true,
          "isNotContainer": true,
          "isContainer": false,
          "dataFormat": "int32",
          "nameInCamelCase": "Code",
          "datatypeWithEnum": "ApiResponse.codeEnum",
          "enumName": "codeEnum",
          "-first": true,
          "-last": false,
          "hasMore": true
        },
        {
          "name": "type",
          "baseName": "type",
          "getter": "getType",
          "setter": "setType",
          "description": "",
          "unescapedDescription": "",
          "type": "string",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "string",
          "jsonSchema": "{\n  \"type\": \"string\"\n}",
          "isEnum": false,
          "isPrimitiveType": true,
          "isNotContainer": true,
          "isContainer": false,
          "nameInCamelCase": "Type",
          "datatypeWithEnum": "ApiResponse.typeEnum",
          "enumName": "typeEnum",
          "-first": false,
          "-last": false,
          "hasMore": true
        },
        {
          "name": "message",
          "baseName": "message",
          "getter": "getMessage",
          "setter": "setMessage",
          "description": "",
          "unescapedDescription": "",
          "type": "string",
          "required": false,
          "isNotRequired": true,
          "readOnly": false,
          "datatype": "string",
          "jsonSchema": "{\n  \"type\": \"string\"\n}",
          "isEnum": false,
          "isPrimitiveType": true,
          "isNotContainer": true,
          "isContainer": false,
          "nameInCamelCase": "Message",
          "datatypeWithEnum": "ApiResponse.messageEnum",
          "enumName": "messageEnum",
          "-first": false,
          "-last": true,
          "hasMore": false
        }
      ]
    },
    "importPath": "ApiResponse"
  }
]
